using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace SAT.MVC.Model
{
    public partial class AdventureContext : DbContext
    {
        public AdventureContext()
        {
        }

        public AdventureContext(DbContextOptions<AdventureContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Acao> Acaos { get; set; }
        public virtual DbSet<AcaoChamado> AcaoChamados { get; set; }
        public virtual DbSet<AcaoComponente> AcaoComponentes { get; set; }
        public virtual DbSet<AcaoO> AcaoOs { get; set; }
        public virtual DbSet<AcaoPo> AcaoPos { get; set; }
        public virtual DbSet<AcessoInstal> AcessoInstals { get; set; }
        public virtual DbSet<AcompanhamentoTecnico> AcompanhamentoTecnicos { get; set; }
        public virtual DbSet<AdminBuscarTabela> AdminBuscarTabelas { get; set; }
        public virtual DbSet<AgendaTecnico> AgendaTecnicos { get; set; }
        public virtual DbSet<AgendamentoO> AgendamentoOs { get; set; }
        public virtual DbSet<AgendamentoOsArqMorto> AgendamentoOsArqMortos { get; set; }
        public virtual DbSet<AgendamentoOslog> AgendamentoOslogs { get; set; }
        public virtual DbSet<AgendamentoPreventiva> AgendamentoPreventivas { get; set; }
        public virtual DbSet<AguardandoClientePo> AguardandoClientePos { get; set; }
        public virtual DbSet<AjudaTopico> AjudaTopicos { get; set; }
        public virtual DbSet<AnaliseCaixaContrato0077> AnaliseCaixaContrato0077s { get; set; }
        public virtual DbSet<AnaliseDisponibilidadeBb> AnaliseDisponibilidadeBbs { get; set; }
        public virtual DbSet<AnaliseSpl> AnaliseSpls { get; set; }
        public virtual DbSet<ArqAntBanri> ArqAntBanris { get; set; }
        public virtual DbSet<ArquivoFaturamento> ArquivoFaturamentos { get; set; }
        public virtual DbSet<ArquivosChamado> ArquivosChamados { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetRoleClaim> AspNetRoleClaims { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserRole> AspNetUserRoles { get; set; }
        public virtual DbSet<AspNetUserToken> AspNetUserTokens { get; set; }
        public virtual DbSet<AtendimentoTelefonicoPo> AtendimentoTelefonicoPos { get; set; }
        public virtual DbSet<AtendimentoTelefonicoPosacao> AtendimentoTelefonicoPosacaos { get; set; }
        public virtual DbSet<AtendimentosBrb> AtendimentosBrbs { get; set; }
        public virtual DbSet<AtendimentosMetroRj> AtendimentosMetroRjs { get; set; }
        public virtual DbSet<AtendimentosMetroSp> AtendimentosMetroSps { get; set; }
        public virtual DbSet<AtualizacaoCubo> AtualizacaoCubos { get; set; }
        public virtual DbSet<AtualizacaoSat> AtualizacaoSats { get; set; }
        public virtual DbSet<AtualizacaoUsuarioSat> AtualizacaoUsuarioSats { get; set; }
        public virtual DbSet<AuditoriaFoto> AuditoriaFotos { get; set; }
        public virtual DbSet<AuditoriaStatus> AuditoriaStatuses { get; set; }
        public virtual DbSet<AuditoriaVeiculo> AuditoriaVeiculos { get; set; }
        public virtual DbSet<AuditoriaVeiculoAcessorio> AuditoriaVeiculoAcessorios { get; set; }
        public virtual DbSet<AuditoriaVeiculoTanque> AuditoriaVeiculoTanques { get; set; }
        public virtual DbSet<Auditorium> Auditoria { get; set; }
        public virtual DbSet<AutorizadaEmail> AutorizadaEmails { get; set; }
        public virtual DbSet<AutorizadaEmailSicredi> AutorizadaEmailSicredis { get; set; }
        public virtual DbSet<AutorizadaRepasse> AutorizadaRepasses { get; set; }
        public virtual DbSet<AutorizadaUfcidadePo> AutorizadaUfcidadePos { get; set; }
        public virtual DbSet<Autorizadum> Autorizada { get; set; }
        public virtual DbSet<AvaliacaoAtendimento> AvaliacaoAtendimentos { get; set; }
        public virtual DbSet<BaixaNaoRealizadum> BaixaNaoRealizada { get; set; }
        public virtual DbSet<BancadaLaboratorio> BancadaLaboratorios { get; set; }
        public virtual DbSet<BancadaListaPeca> BancadaListaPecas { get; set; }
        public virtual DbSet<BancadaListum> BancadaLista { get; set; }
        public virtual DbSet<BanrisulInterface> BanrisulInterfaces { get; set; }
        public virtual DbSet<BanrisulTipoArquivo> BanrisulTipoArquivos { get; set; }
        public virtual DbSet<BanrisulTipoRegistro> BanrisulTipoRegistros { get; set; }
        public virtual DbSet<BaseEquipamentoBanrisul> BaseEquipamentoBanrisuls { get; set; }
        public virtual DbSet<BaseEquipamentoBanrisulItem> BaseEquipamentoBanrisulItems { get; set; }
        public virtual DbSet<BloqueioReincidencium> BloqueioReincidencia { get; set; }
        public virtual DbSet<CalculoIndiceQuebra> CalculoIndiceQuebras { get; set; }
        public virtual DbSet<CalculoReceitaPo> CalculoReceitaPos { get; set; }
        public virtual DbSet<CalculoSla> CalculoSlas { get; set; }
        public virtual DbSet<CalendarioDiaFeriado> CalendarioDiaFeriados { get; set; }
        public virtual DbSet<CalendarioDiaSemana> CalendarioDiaSemanas { get; set; }
        public virtual DbSet<CalendarioDium> CalendarioDia { get; set; }
        public virtual DbSet<CalendarioMe> CalendarioMes { get; set; }
        public virtual DbSet<Cargo> Cargos { get; set; }
        public virtual DbSet<Causa> Causas { get; set; }
        public virtual DbSet<CausaImprodutividade> CausaImprodutividades { get; set; }
        public virtual DbSet<CausasSicredi> CausasSicredis { get; set; }
        public virtual DbSet<CedulasMecanismoRat> CedulasMecanismoRats { get; set; }
        public virtual DbSet<CercaEletronica> CercaEletronicas { get; set; }
        public virtual DbSet<Chamado> Chamados { get; set; }
        public virtual DbSet<ChamadoDadosAdicionai> ChamadoDadosAdicionais { get; set; }
        public virtual DbSet<ChamadoHist> ChamadoHists { get; set; }
        public virtual DbSet<ChamadoO> ChamadoOs { get; set; }
        public virtual DbSet<ChamadosStn> ChamadosStns { get; set; }
        public virtual DbSet<CheckInCheckOut> CheckInCheckOuts { get; set; }
        public virtual DbSet<CheckListStn> CheckListStns { get; set; }
        public virtual DbSet<CheckinCheckoutRelatorio> CheckinCheckoutRelatorios { get; set; }
        public virtual DbSet<ChecklistChamadoStn> ChecklistChamadoStns { get; set; }
        public virtual DbSet<ChecklistPreventiva> ChecklistPreventivas { get; set; }
        public virtual DbSet<ChecklistPreventivaAcompanhamento> ChecklistPreventivaAcompanhamentos { get; set; }
        public virtual DbSet<ChecklistPreventivaItem> ChecklistPreventivaItems { get; set; }
        public virtual DbSet<ChecklistPreventivaLayout> ChecklistPreventivaLayouts { get; set; }
        public virtual DbSet<ChecklistPreventivaLayoutItem> ChecklistPreventivaLayoutItems { get; set; }
        public virtual DbSet<ChecklistPreventivaLayoutPeriferico> ChecklistPreventivaLayoutPerifericos { get; set; }
        public virtual DbSet<ChecklistPreventivaLayoutXpai> ChecklistPreventivaLayoutXpais { get; set; }
        public virtual DbSet<ChecklistStnalteracao> ChecklistStnalteracaos { get; set; }
        public virtual DbSet<ChecklistStnpeca> ChecklistStnpecas { get; set; }
        public virtual DbSet<Cidade> Cidades { get; set; }
        public virtual DbSet<CidadeDeParaCliente> CidadeDeParaClientes { get; set; }
        public virtual DbSet<CidadeFonetica> CidadeFoneticas { get; set; }
        public virtual DbSet<CidadeIvan> CidadeIvans { get; set; }
        public virtual DbSet<CidadePo> CidadePos { get; set; }
        public virtual DbSet<CidadePosdePara> CidadePosdeParas { get; set; }
        public virtual DbSet<Cliente> Clientes { get; set; }
        public virtual DbSet<ClienteBancadaListum> ClienteBancadaLista { get; set; }
        public virtual DbSet<ClienteBancadum> ClienteBancada { get; set; }
        public virtual DbSet<ClienteContratoCoord> ClienteContratoCoords { get; set; }
        public virtual DbSet<ClienteIntervPerfil> ClienteIntervPerfils { get; set; }
        public virtual DbSet<ClientePeca> ClientePecas { get; set; }
        public virtual DbSet<ClientePeca060520> ClientePeca060520s { get; set; }
        public virtual DbSet<ClientePecaGenerica> ClientePecaGenericas { get; set; }
        public virtual DbSet<ClienteSemListum> ClienteSemLista { get; set; }
        public virtual DbSet<ClienteUsuario> ClienteUsuarios { get; set; }
        public virtual DbSet<CobrancaSicredi1> CobrancaSicredi1s { get; set; }
        public virtual DbSet<CobrancaSicredi2> CobrancaSicredi2s { get; set; }
        public virtual DbSet<CompRelFui> CompRelFuis { get; set; }
        public virtual DbSet<ComparacaoPo> ComparacaoPos { get; set; }
        public virtual DbSet<ComponentePo> ComponentePos { get; set; }
        public virtual DbSet<Conexao> Conexaos { get; set; }
        public virtual DbSet<ConfigEquipModulo> ConfigEquipModulos { get; set; }
        public virtual DbSet<Conjunto> Conjuntos { get; set; }
        public virtual DbSet<ConjuntoConjunto> ConjuntoConjuntos { get; set; }
        public virtual DbSet<ConjuntoPeca> ConjuntoPecas { get; set; }
        public virtual DbSet<ContaCorrente> ContaCorrentes { get; set; }
        public virtual DbSet<Contrato> Contratos { get; set; }
        public virtual DbSet<ContratoEquipDatum> ContratoEquipData { get; set; }
        public virtual DbSet<ContratoEquipMultum> ContratoEquipMulta { get; set; }
        public virtual DbSet<ContratoEquipRetencao> ContratoEquipRetencaos { get; set; }
        public virtual DbSet<ContratoEquipamento> ContratoEquipamentos { get; set; }
        public virtual DbSet<ContratoPeca> ContratoPecas { get; set; }
        public virtual DbSet<ContratoReajuste> ContratoReajustes { get; set; }
        public virtual DbSet<ContratoServico> ContratoServicos { get; set; }
        public virtual DbSet<ContratoServicoBkp> ContratoServicoBkps { get; set; }
        public virtual DbSet<ContratoServicoBkpold> ContratoServicoBkpolds { get; set; }
        public virtual DbSet<ContratoSla> ContratoSlas { get; set; }
        public virtual DbSet<ControleConsolidado> ControleConsolidados { get; set; }
        public virtual DbSet<ControleEnvioEmailCd> ControleEnvioEmailCds { get; set; }
        public virtual DbSet<ControleEnvioEmailCdserro> ControleEnvioEmailCdserros { get; set; }
        public virtual DbSet<ControleEnvioEmailCdsreenvio> ControleEnvioEmailCdsreenvios { get; set; }
        public virtual DbSet<ControleEnvioEmailVip> ControleEnvioEmailVips { get; set; }
        public virtual DbSet<ControleEnvioEmailVipErro> ControleEnvioEmailVipErros { get; set; }
        public virtual DbSet<ControlePo> ControlePos { get; set; }
        public virtual DbSet<ControlePosserie> ControlePosseries { get; set; }
        public virtual DbSet<ControlePosserieTmp> ControlePosserieTmps { get; set; }
        public virtual DbSet<ControleReincidencium> ControleReincidencia { get; set; }
        public virtual DbSet<CooperativaSicredi> CooperativaSicredis { get; set; }
        public virtual DbSet<CorStatusServicoPo> CorStatusServicoPos { get; set; }
        public virtual DbSet<DadoImportacao> DadoImportacaos { get; set; }
        public virtual DbSet<DadoImportacaoTipo> DadoImportacaoTipos { get; set; }
        public virtual DbSet<DadosDashboard> DadosDashboards { get; set; }
        public virtual DbSet<DadosDashboardBackup> DadosDashboardBackups { get; set; }
        public virtual DbSet<DadosDashboardPendenciaBackup> DadosDashboardPendenciaBackups { get; set; }
        public virtual DbSet<DadosDashboardPendencium> DadosDashboardPendencia { get; set; }
        public virtual DbSet<DadosDashboardReincidenciaBackup> DadosDashboardReincidenciaBackups { get; set; }
        public virtual DbSet<DadosDashboardReincidencium> DadosDashboardReincidencia { get; set; }
        public virtual DbSet<Dashboard> Dashboards { get; set; }
        public virtual DbSet<DashboardChamadosFaltante> DashboardChamadosFaltantes { get; set; }
        public virtual DbSet<DashboardChamadosPendente> DashboardChamadosPendentes { get; set; }
        public virtual DbSet<DashboardConfiguracao> DashboardConfiguracaos { get; set; }
        public virtual DbSet<DashboardDisponibilidade> DashboardDisponibilidades { get; set; }
        public virtual DbSet<DashboardModalidade> DashboardModalidades { get; set; }
        public virtual DbSet<DashboardPagina> DashboardPaginas { get; set; }
        public virtual DbSet<DashboardPecasFaltante> DashboardPecasFaltantes { get; set; }
        public virtual DbSet<DashboardPerfi> DashboardPerfis { get; set; }
        public virtual DbSet<DashboardReincidenciaPorEquipamento> DashboardReincidenciaPorEquipamentos { get; set; }
        public virtual DbSet<DashboardTecnicoDisponibilidade> DashboardTecnicoDisponibilidades { get; set; }
        public virtual DbSet<DashboardTecnicoDisponibilidadeBackup> DashboardTecnicoDisponibilidadeBackups { get; set; }
        public virtual DbSet<DashboardTecnicoDisponibilidadeNew> DashboardTecnicoDisponibilidadeNews { get; set; }
        public virtual DbSet<DashboardTecnicoDisponibilidadeNewBackup> DashboardTecnicoDisponibilidadeNewBackups { get; set; }
        public virtual DbSet<DataHoraTrab> DataHoraTrabs { get; set; }
        public virtual DbSet<Dbadarlan> Dbadarlans { get; set; }
        public virtual DbSet<DboVwTarefa> DboVwTarefas { get; set; }
        public virtual DbSet<DboVwcAuditoriaValore> DboVwcAuditoriaValores { get; set; }
        public virtual DbSet<DboVwcCnpjClientesLocai> DboVwcCnpjClientesLocais { get; set; }
        public virtual DbSet<DboVwcExportacaoChamadosTodosDetalhe> DboVwcExportacaoChamadosTodosDetalhes { get; set; }
        public virtual DbSet<DboVwcHugo> DboVwcHugos { get; set; }
        public virtual DbSet<DboVwcRelDaniela> DboVwcRelDanielas { get; set; }
        public virtual DbSet<DboVwcRelatorioEliano> DboVwcRelatorioElianos { get; set; }
        public virtual DbSet<DeParaCausaMotivo> DeParaCausaMotivos { get; set; }
        public virtual DbSet<Defeito> Defeitos { get; set; }
        public virtual DbSet<DefeitoComponente> DefeitoComponentes { get; set; }
        public virtual DbSet<DefeitoPo> DefeitoPos { get; set; }
        public virtual DbSet<Departamento> Departamentos { get; set; }
        public virtual DbSet<Despesa> Despesas { get; set; }
        public virtual DbSet<DespesaAcompanhamentoDetalhado> DespesaAcompanhamentoDetalhados { get; set; }
        public virtual DbSet<DespesaAdiantamento> DespesaAdiantamentos { get; set; }
        public virtual DbSet<DespesaAdiantamentoPeriodo> DespesaAdiantamentoPeriodos { get; set; }
        public virtual DbSet<DespesaAdiantamentoSolicitacao> DespesaAdiantamentoSolicitacaos { get; set; }
        public virtual DbSet<DespesaAdiantamentoTipo> DespesaAdiantamentoTipos { get; set; }
        public virtual DbSet<DespesaAluguelCarro> DespesaAluguelCarros { get; set; }
        public virtual DbSet<DespesaArqMorto> DespesaArqMortos { get; set; }
        public virtual DbSet<DespesaCartaoCombustivel> DespesaCartaoCombustivels { get; set; }
        public virtual DbSet<DespesaCartaoCombustivelControle> DespesaCartaoCombustivelControles { get; set; }
        public virtual DbSet<DespesaCartaoCombustivelEmissao> DespesaCartaoCombustivelEmissaos { get; set; }
        public virtual DbSet<DespesaCartaoCombustivelFaturamento> DespesaCartaoCombustivelFaturamentos { get; set; }
        public virtual DbSet<DespesaCartaoCombustivelTecnico> DespesaCartaoCombustivelTecnicos { get; set; }
        public virtual DbSet<DespesaConfiguracao> DespesaConfiguracaos { get; set; }
        public virtual DbSet<DespesaConfiguracaoCombustivel> DespesaConfiguracaoCombustivels { get; set; }
        public virtual DbSet<DespesaItem> DespesaItems { get; set; }
        public virtual DbSet<DespesaItemAlertum> DespesaItemAlerta { get; set; }
        public virtual DbSet<DespesaItemArqMorto> DespesaItemArqMortos { get; set; }
        public virtual DbSet<DespesaPeriodo> DespesaPeriodos { get; set; }
        public virtual DbSet<DespesaPeriodoTecnico> DespesaPeriodoTecnicos { get; set; }
        public virtual DbSet<DespesaPeriodoTecnicoStatus> DespesaPeriodoTecnicoStatuses { get; set; }
        public virtual DbSet<DespesaProtocolo> DespesaProtocolos { get; set; }
        public virtual DbSet<DespesaProtocoloPeriodoTecnico> DespesaProtocoloPeriodoTecnicos { get; set; }
        public virtual DbSet<DespesaTentativaKm> DespesaTentativaKms { get; set; }
        public virtual DbSet<DespesaTentativaKmArqMorto> DespesaTentativaKmArqMortos { get; set; }
        public virtual DbSet<DespesaTipo> DespesaTipos { get; set; }
        public virtual DbSet<Dicionario> Dicionarios { get; set; }
        public virtual DbSet<DispBbbloqueioO> DispBbbloqueioOs { get; set; }
        public virtual DbSet<DispBbcalcEquipamentoContrato> DispBbcalcEquipamentoContratos { get; set; }
        public virtual DbSet<DispBbcalcEquipamentoContratoSemAgend> DispBbcalcEquipamentoContratoSemAgends { get; set; }
        public virtual DbSet<DispBbcalcO> DispBbcalcOs { get; set; }
        public virtual DbSet<DispBbcalcOsanalise> DispBbcalcOsanalises { get; set; }
        public virtual DbSet<DispBbcalcOsexcluido> DispBbcalcOsexcluidos { get; set; }
        public virtual DbSet<DispBbcalcOssemAgend> DispBbcalcOssemAgends { get; set; }
        public virtual DbSet<DispBbcalcOstte> DispBbcalcOsttes { get; set; }
        public virtual DbSet<DispBbcriticidade> DispBbcriticidades { get; set; }
        public virtual DbSet<DispBbdesvio> DispBbdesvios { get; set; }
        public virtual DbSet<DispBbdissuasao> DispBbdissuasaos { get; set; }
        public virtual DbSet<DispBbdistanciaCapital> DispBbdistanciaCapitals { get; set; }
        public virtual DbSet<DispBbequipCriticidade> DispBbequipCriticidades { get; set; }
        public virtual DbSet<DispBbequipamentoContrato> DispBbequipamentoContratos { get; set; }
        public virtual DbSet<DispBbhistCalcEquipamentoContrato> DispBbhistCalcEquipamentoContratos { get; set; }
        public virtual DbSet<DispBbhistCalcO> DispBbhistCalcOs { get; set; }
        public virtual DbSet<DispBbhistEquipamentoContrato> DispBbhistEquipamentoContratos { get; set; }
        public virtual DbSet<DispBbpalavrasChavesBloqueio> DispBbpalavrasChavesBloqueios { get; set; }
        public virtual DbSet<DispBbpercRegiao> DispBbpercRegiaos { get; set; }
        public virtual DbSet<DispBbrebate> DispBbrebates { get; set; }
        public virtual DbSet<DispBbregiao> DispBbregiaos { get; set; }
        public virtual DbSet<DispBbregiaoFilial> DispBbregiaoFilials { get; set; }
        public virtual DbSet<DispBbregiaoUf> DispBbregiaoUfs { get; set; }
        public virtual DbSet<DispBbvalorCofreRegiao> DispBbvalorCofreRegiaos { get; set; }
        public virtual DbSet<DispHistBbcalcO> DispHistBbcalcOs { get; set; }
        public virtual DbSet<DistribuicaodeChamadospeloParque> DistribuicaodeChamadospeloParques { get; set; }
        public virtual DbSet<DistribuicaodeChamadospeloParqueMaquina> DistribuicaodeChamadospeloParqueMaquinas { get; set; }
        public virtual DbSet<DistribuicaodeChamadospeloParqueNew> DistribuicaodeChamadospeloParqueNews { get; set; }
        public virtual DbSet<EmailSat> EmailSats { get; set; }
        public virtual DbSet<Embalagem> Embalagems { get; set; }
        public virtual DbSet<Empresa> Empresas { get; set; }
        public virtual DbSet<EmpresaUsuario> EmpresaUsuarios { get; set; }
        public virtual DbSet<EnvioEmailReincidencium> EnvioEmailReincidencia { get; set; }
        public virtual DbSet<EqCcomparacaoNome> EqCcomparacaoNomes { get; set; }
        public virtual DbSet<EquipContratoComparacao> EquipContratoComparacaos { get; set; }
        public virtual DbSet<Equipamento> Equipamentos { get; set; }
        public virtual DbSet<EquipamentoCausa> EquipamentoCausas { get; set; }
        public virtual DbSet<EquipamentoCheckListDefeito> EquipamentoCheckListDefeitos { get; set; }
        public virtual DbSet<EquipamentoComponentePo> EquipamentoComponentePos { get; set; }
        public virtual DbSet<EquipamentoContrato> EquipamentoContratos { get; set; }
        public virtual DbSet<EquipamentoContrato04052020> EquipamentoContrato04052020s { get; set; }
        public virtual DbSet<EquipamentoContratoComparacao> EquipamentoContratoComparacaos { get; set; }
        public virtual DbSet<EquipamentoDeParaPo> EquipamentoDeParaPos { get; set; }
        public virtual DbSet<EquipamentoDefeitoPo> EquipamentoDefeitoPos { get; set; }
        public virtual DbSet<EquipamentoPo> EquipamentoPos { get; set; }
        public virtual DbSet<EquipamentoPoshist> EquipamentoPoshists { get; set; }
        public virtual DbSet<EquipamentoTipoComunicacao> EquipamentoTipoComunicacaos { get; set; }
        public virtual DbSet<EquipamentoVip> EquipamentoVips { get; set; }
        public virtual DbSet<EquipamentoVipBkp> EquipamentoVipBkps { get; set; }
        public virtual DbSet<EstadoPo> EstadoPos { get; set; }
        public virtual DbSet<EstadoPosdePara> EstadoPosdeParas { get; set; }
        public virtual DbSet<FaturamentoContrato> FaturamentoContratos { get; set; }
        public virtual DbSet<FaturamentoContratoControle> FaturamentoContratoControles { get; set; }
        public virtual DbSet<FaturamentoPo> FaturamentoPos { get; set; }
        public virtual DbSet<FaturamentoPosbanrisul> FaturamentoPosbanrisuls { get; set; }
        public virtual DbSet<FaturamentoSerieCnpj> FaturamentoSerieCnpjs { get; set; }
        public virtual DbSet<FaturamentoSerieControle> FaturamentoSerieControles { get; set; }
        public virtual DbSet<FaturamentoSicredi> FaturamentoSicredis { get; set; }
        public virtual DbSet<FaturamentoSicrediMultaSaldo> FaturamentoSicrediMultaSaldos { get; set; }
        public virtual DbSet<FaturamentoSicrediMultaSaldoItemLancado> FaturamentoSicrediMultaSaldoItemLancados { get; set; }
        public virtual DbSet<FaturamentoSicrediMultaSaldoItemMultum> FaturamentoSicrediMultaSaldoItemMulta { get; set; }
        public virtual DbSet<FaturamentoSicrediO> FaturamentoSicrediOs { get; set; }
        public virtual DbSet<FechamentoManualFaturamento> FechamentoManualFaturamentos { get; set; }
        public virtual DbSet<FechamentoOspo> FechamentoOspos { get; set; }
        public virtual DbSet<FecharOspo> FecharOspos { get; set; }
        public virtual DbSet<FecharOspositen> FecharOspositens { get; set; }
        public virtual DbSet<Feriado> Feriados { get; set; }
        public virtual DbSet<FeriadosCobra> FeriadosCobras { get; set; }
        public virtual DbSet<FeriadosNacionai> FeriadosNacionais { get; set; }
        public virtual DbSet<FeriadosParciai> FeriadosParciais { get; set; }
        public virtual DbSet<FeriadosPo> FeriadosPos { get; set; }
        public virtual DbSet<FerramentaTecnico> FerramentaTecnicos { get; set; }
        public virtual DbSet<FerramentaTecnicoHist> FerramentaTecnicoHists { get; set; }
        public virtual DbSet<Filial> Filials { get; set; }
        public virtual DbSet<FilialAnalistum> FilialAnalista { get; set; }
        public virtual DbSet<FilialCoordenada> FilialCoordenadas { get; set; }
        public virtual DbSet<FilialRegiaoDisp> FilialRegiaoDisps { get; set; }
        public virtual DbSet<FilialTecnico> FilialTecnicos { get; set; }
        public virtual DbSet<FinanceiroPosprestadora> FinanceiroPosprestadoras { get; set; }
        public virtual DbSet<FormaPagto> FormaPagtos { get; set; }
        public virtual DbSet<Fornecedor> Fornecedors { get; set; }
        public virtual DbSet<FrotaCobrancaGaragem> FrotaCobrancaGaragems { get; set; }
        public virtual DbSet<FrotaFinalidadeUso> FrotaFinalidadeUsos { get; set; }
        public virtual DbSet<FullTime> FullTimes { get; set; }
        public virtual DbSet<FullTimeAux> FullTimeAuxes { get; set; }
        public virtual DbSet<FusoHorario> FusoHorarios { get; set; }
        public virtual DbSet<FusoHorarioUf> FusoHorarioUfs { get; set; }
        public virtual DbSet<FusoHorarioVerao> FusoHorarioVeraos { get; set; }
        public virtual DbSet<GerenciaTarefasSat> GerenciaTarefasSats { get; set; }
        public virtual DbSet<GoogleApi> GoogleApis { get; set; }
        public virtual DbSet<GoogleApiLog> GoogleApiLogs { get; set; }
        public virtual DbSet<Gp> Gps { get; set; }
        public virtual DbSet<GpsParameter> GpsParameters { get; set; }
        public virtual DbSet<GpsRegion> GpsRegions { get; set; }
        public virtual DbSet<GpscoordenadaTecnico> GpscoordenadaTecnicos { get; set; }
        public virtual DbSet<GrupoCausa> GrupoCausas { get; set; }
        public virtual DbSet<GrupoEquipamento> GrupoEquipamentos { get; set; }
        public virtual DbSet<HistAberturaBanrisul> HistAberturaBanrisuls { get; set; }
        public virtual DbSet<HistAtualizacaoPq> HistAtualizacaoPqs { get; set; }
        public virtual DbSet<HistChamado> HistChamados { get; set; }
        public virtual DbSet<HistDespesaAdiantamento> HistDespesaAdiantamentos { get; set; }
        public virtual DbSet<HistDespesaItem> HistDespesaItems { get; set; }
        public virtual DbSet<HistEquipamento> HistEquipamentos { get; set; }
        public virtual DbSet<HistEquipamentoContrato> HistEquipamentoContratos { get; set; }
        public virtual DbSet<HistFechamentoBanrisul> HistFechamentoBanrisuls { get; set; }
        public virtual DbSet<HistLocalAtendimento> HistLocalAtendimentos { get; set; }
        public virtual DbSet<HistO> HistOs { get; set; }
        public virtual DbSet<HistOrcamento> HistOrcamentos { get; set; }
        public virtual DbSet<HistPeca> HistPecas { get; set; }
        public virtual DbSet<HistPecaStn> HistPecaStns { get; set; }
        public virtual DbSet<HistPerfilSeguranca> HistPerfilSegurancas { get; set; }
        public virtual DbSet<HistPonto> HistPontos { get; set; }
        public virtual DbSet<HistPontoMovel> HistPontoMovels { get; set; }
        public virtual DbSet<HistPontoPeriodoUsuario> HistPontoPeriodoUsuarios { get; set; }
        public virtual DbSet<HistPontoUsuario> HistPontoUsuarios { get; set; }
        public virtual DbSet<HistPontoUsuarioDataAdvertencium> HistPontoUsuarioDataAdvertencia { get; set; }
        public virtual DbSet<HistPontoUsuarioDataDivergenciaObservacao> HistPontoUsuarioDataDivergenciaObservacaos { get; set; }
        public virtual DbSet<HistPontoUsuarioDataDivergencium> HistPontoUsuarioDataDivergencia { get; set; }
        public virtual DbSet<HistPontoUsuarioDataValidacao> HistPontoUsuarioDataValidacaos { get; set; }
        public virtual DbSet<HistPontoUsuarioDatum> HistPontoUsuarioData { get; set; }
        public virtual DbSet<HistRat> HistRats { get; set; }
        public virtual DbSet<HistRatdetalhesPeca> HistRatdetalhesPecas { get; set; }
        public virtual DbSet<HistRatnew> HistRatnews { get; set; }
        public virtual DbSet<HistSmartCard> HistSmartCards { get; set; }
        public virtual DbSet<HistTecnico> HistTecnicos { get; set; }
        public virtual DbSet<HistUsuarioSeguranca> HistUsuarioSegurancas { get; set; }
        public virtual DbSet<HistoricoClientePeca> HistoricoClientePecas { get; set; }
        public virtual DbSet<HistoricoIntegracaoBanrisul> HistoricoIntegracaoBanrisuls { get; set; }
        public virtual DbSet<HistoricoRatdetalhe> HistoricoRatdetalhes { get; set; }
        public virtual DbSet<HistoricoSlaMensalCliente> HistoricoSlaMensalClientes { get; set; }
        public virtual DbSet<HistoricoVeiculoCombustivel> HistoricoVeiculoCombustivels { get; set; }
        public virtual DbSet<Hodometro> Hodometros { get; set; }
        public virtual DbSet<HorarioVerao> HorarioVeraos { get; set; }
        public virtual DbSet<Improdutividade> Improdutividades { get; set; }
        public virtual DbSet<IncidenteNaoProcedente> IncidenteNaoProcedentes { get; set; }
        public virtual DbSet<IncidentesAbertosHistIvan> IncidentesAbertosHistIvans { get; set; }
        public virtual DbSet<Indicador> Indicadors { get; set; }
        public virtual DbSet<IndicePecasPend> IndicePecasPends { get; set; }
        public virtual DbSet<IndicePecasPendDet> IndicePecasPendDets { get; set; }
        public virtual DbSet<IndicePecasPendDetTemp> IndicePecasPendDetTemps { get; set; }
        public virtual DbSet<IndicePecasPendIvan> IndicePecasPendIvans { get; set; }
        public virtual DbSet<IndicePecasPendNew> IndicePecasPendNews { get; set; }
        public virtual DbSet<IndicePecasPendPerformance3> IndicePecasPendPerformance3s { get; set; }
        public virtual DbSet<IndicePecasPendPerformance3DadosCongelado> IndicePecasPendPerformance3DadosCongelados { get; set; }
        public virtual DbSet<IndicePecasPendRatdigital> IndicePecasPendRatdigitals { get; set; }
        public virtual DbSet<IndicePecasPendTemp> IndicePecasPendTemps { get; set; }
        public virtual DbSet<IndiceQuebra> IndiceQuebras { get; set; }
        public virtual DbSet<IndiceQuebraPerformance3> IndiceQuebraPerformance3s { get; set; }
        public virtual DbSet<IndiceQuebraPerformance3DadosCongelado> IndiceQuebraPerformance3DadosCongelados { get; set; }
        public virtual DbSet<IndiceQuebraSlide> IndiceQuebraSlides { get; set; }
        public virtual DbSet<IndiceReincidenciaPerformance> IndiceReincidenciaPerformances { get; set; }
        public virtual DbSet<IndiceReincidenciaPerformance3> IndiceReincidenciaPerformance3s { get; set; }
        public virtual DbSet<IndiceReincidenciaPerformance3DadosCongelado> IndiceReincidenciaPerformance3DadosCongelados { get; set; }
        public virtual DbSet<IndiceReincidenciaPerformance7> IndiceReincidenciaPerformance7s { get; set; }
        public virtual DbSet<IndiceReincidenciaPerformance7DadosCongelado> IndiceReincidenciaPerformance7DadosCongelados { get; set; }
        public virtual DbSet<IndiceReincidenciaPerformanceDadosCongelado> IndiceReincidenciaPerformanceDadosCongelados { get; set; }
        public virtual DbSet<IndiceReincidenciaPerformanceFilial> IndiceReincidenciaPerformanceFilials { get; set; }
        public virtual DbSet<IndiceReincidenciaPerformancePag6> IndiceReincidenciaPerformancePag6s { get; set; }
        public virtual DbSet<IndiceReincidencium> IndiceReincidencia { get; set; }
        public virtual DbSet<IndiceSolucao> IndiceSolucaos { get; set; }
        public virtual DbSet<IndiceSolucaoAngeloni> IndiceSolucaoAngelonis { get; set; }
        public virtual DbSet<IndiceSolucaoBanrisul> IndiceSolucaoBanrisuls { get; set; }
        public virtual DbSet<IndiceSolucaoBasa> IndiceSolucaoBasas { get; set; }
        public virtual DbSet<IndiceSolucaoBb> IndiceSolucaoBbs { get; set; }
        public virtual DbSet<IndiceSolucaoBbt> IndiceSolucaoBbts { get; set; }
        public virtual DbSet<IndiceSolucaoBnb> IndiceSolucaoBnbs { get; set; }
        public virtual DbSet<IndiceSolucaoBrMall> IndiceSolucaoBrMalls { get; set; }
        public virtual DbSet<IndiceSolucaoBrb> IndiceSolucaoBrbs { get; set; }
        public virtual DbSet<IndiceSolucaoBrink> IndiceSolucaoBrinks { get; set; }
        public virtual DbSet<IndiceSolucaoCef> IndiceSolucaoCefs { get; set; }
        public virtual DbSet<IndiceSolucaoCorreio> IndiceSolucaoCorreios { get; set; }
        public virtual DbSet<IndiceSolucaoDigicon> IndiceSolucaoDigicons { get; set; }
        public virtual DbSet<IndiceSolucaoEstacenter> IndiceSolucaoEstacenters { get; set; }
        public virtual DbSet<IndiceSolucaoEstapar> IndiceSolucaoEstapars { get; set; }
        public virtual DbSet<IndiceSolucaoGide> IndiceSolucaoGides { get; set; }
        public virtual DbSet<IndiceSolucaoIndigo> IndiceSolucaoIndigos { get; set; }
        public virtual DbSet<IndiceSolucaoLojasAmericana> IndiceSolucaoLojasAmericanas { get; set; }
        public virtual DbSet<IndiceSolucaoMetroBahium> IndiceSolucaoMetroBahia { get; set; }
        public virtual DbSet<IndiceSolucaoMetroSp> IndiceSolucaoMetroSps { get; set; }
        public virtual DbSet<IndiceSolucaoMetrorio> IndiceSolucaoMetrorios { get; set; }
        public virtual DbSet<IndiceSolucaoMultiplan> IndiceSolucaoMultiplans { get; set; }
        public virtual DbSet<IndiceSolucaoNew> IndiceSolucaoNews { get; set; }
        public virtual DbSet<IndiceSolucaoNew24> IndiceSolucaoNew24s { get; set; }
        public virtual DbSet<IndiceSolucaoNew48> IndiceSolucaoNew48s { get; set; }
        public virtual DbSet<IndiceSolucaoNew72> IndiceSolucaoNew72s { get; set; }
        public virtual DbSet<IndiceSolucaoNewBanpara> IndiceSolucaoNewBanparas { get; set; }
        public virtual DbSet<IndiceSolucaoNewBb> IndiceSolucaoNewBbs { get; set; }
        public virtual DbSet<IndiceSolucaoNewBnbGar> IndiceSolucaoNewBnbGars { get; set; }
        public virtual DbSet<IndiceSolucaoNewBnbMan> IndiceSolucaoNewBnbMen { get; set; }
        public virtual DbSet<IndiceSolucaoNewCef1778> IndiceSolucaoNewCef1778s { get; set; }
        public virtual DbSet<IndiceSolucaoNewCef1783> IndiceSolucaoNewCef1783s { get; set; }
        public virtual DbSet<IndiceSolucaoNewCobra> IndiceSolucaoNewCobras { get; set; }
        public virtual DbSet<IndiceSolucaoNewCobraDispBb> IndiceSolucaoNewCobraDispBbs { get; set; }
        public virtual DbSet<IndiceSolucaoNewDispBb> IndiceSolucaoNewDispBbs { get; set; }
        public virtual DbSet<IndiceSolucaoNewGeral> IndiceSolucaoNewGerals { get; set; }
        public virtual DbSet<IndiceSolucaoNewGeralIvan> IndiceSolucaoNewGeralIvans { get; set; }
        public virtual DbSet<IndiceSolucaoNewSaquepague> IndiceSolucaoNewSaquepagues { get; set; }
        public virtual DbSet<IndiceSolucaoParebem> IndiceSolucaoParebems { get; set; }
        public virtual DbSet<IndiceSolucaoParking> IndiceSolucaoParkings { get; set; }
        public virtual DbSet<IndiceSolucaoPerformance> IndiceSolucaoPerformances { get; set; }
        public virtual DbSet<IndiceSolucaoPerformance3> IndiceSolucaoPerformance3s { get; set; }
        public virtual DbSet<IndiceSolucaoPerformance3DadosCongelado> IndiceSolucaoPerformance3DadosCongelados { get; set; }
        public virtual DbSet<IndiceSolucaoPerformance7> IndiceSolucaoPerformance7s { get; set; }
        public virtual DbSet<IndiceSolucaoPerformance7DadosCongelado> IndiceSolucaoPerformance7DadosCongelados { get; set; }
        public virtual DbSet<IndiceSolucaoPerformanceDadosCongelado> IndiceSolucaoPerformanceDadosCongelados { get; set; }
        public virtual DbSet<IndiceSolucaoPerformanceDadosCongeladosNew> IndiceSolucaoPerformanceDadosCongeladosNews { get; set; }
        public virtual DbSet<IndiceSolucaoPerformanceDadosCongeladosNewBkp> IndiceSolucaoPerformanceDadosCongeladosNewBkps { get; set; }
        public virtual DbSet<IndiceSolucaoPerformanceFilial> IndiceSolucaoPerformanceFilials { get; set; }
        public virtual DbSet<IndiceSolucaoPerformancePag6> IndiceSolucaoPerformancePag6s { get; set; }
        public virtual DbSet<IndiceSolucaoProsegur> IndiceSolucaoProsegurs { get; set; }
        public virtual DbSet<IndiceSolucaoProtege> IndiceSolucaoProteges { get; set; }
        public virtual DbSet<IndiceSolucaoRelogio> IndiceSolucaoRelogios { get; set; }
        public virtual DbSet<IndiceSolucaoRiachuelo> IndiceSolucaoRiachuelos { get; set; }
        public virtual DbSet<IndiceSolucaoRiocard> IndiceSolucaoRiocards { get; set; }
        public virtual DbSet<IndiceSolucaoSafePark> IndiceSolucaoSafeParks { get; set; }
        public virtual DbSet<IndiceSolucaoSicoob> IndiceSolucaoSicoobs { get; set; }
        public virtual DbSet<IndiceSolucaoSicredi> IndiceSolucaoSicredis { get; set; }
        public virtual DbSet<IndiceSolucaoSicredi24> IndiceSolucaoSicredi24s { get; set; }
        public virtual DbSet<IndiceSolucaoSicredi48> IndiceSolucaoSicredi48s { get; set; }
        public virtual DbSet<IndiceSolucaoSicredi72> IndiceSolucaoSicredi72s { get; set; }
        public virtual DbSet<IndiceSolucaoStv> IndiceSolucaoStvs { get; set; }
        public virtual DbSet<IndiceSolucaoTemp> IndiceSolucaoTemps { get; set; }
        public virtual DbSet<IndiceSolucaoVarejo> IndiceSolucaoVarejos { get; set; }
        public virtual DbSet<IndiceSolucaoViaParqueShopping> IndiceSolucaoViaParqueShoppings { get; set; }
        public virtual DbSet<IndiceSolucaoViaQuatro> IndiceSolucaoViaQuatros { get; set; }
        public virtual DbSet<IndiceSolucaoVlt> IndiceSolucaoVlts { get; set; }
        public virtual DbSet<IndiceSolucaoWp> IndiceSolucaoWps { get; set; }
        public virtual DbSet<IndiceSolucaoZaffari> IndiceSolucaoZaffaris { get; set; }
        public virtual DbSet<InstalAnexo> InstalAnexos { get; set; }
        public virtual DbSet<InstalCampo> InstalCampos { get; set; }
        public virtual DbSet<InstalGrupoAcesso> InstalGrupoAcessos { get; set; }
        public virtual DbSet<InstalLote> InstalLotes { get; set; }
        public virtual DbSet<InstalMotivoMultum> InstalMotivoMulta { get; set; }
        public virtual DbSet<InstalMotivoRe> InstalMotivoRes { get; set; }
        public virtual DbSet<InstalNfaut> InstalNfauts { get; set; }
        public virtual DbSet<InstalNfvendum> InstalNfvenda { get; set; }
        public virtual DbSet<InstalO> InstalOs { get; set; }
        public virtual DbSet<InstalOb> InstalObs { get; set; }
        public virtual DbSet<InstalOsArqMorto> InstalOsArqMortos { get; set; }
        public virtual DbSet<InstalPagto> InstalPagtos { get; set; }
        public virtual DbSet<InstalPagtoInstal> InstalPagtoInstals { get; set; }
        public virtual DbSet<InstalPleito> InstalPleitos { get; set; }
        public virtual DbSet<InstalPleitoInstal> InstalPleitoInstals { get; set; }
        public virtual DbSet<InstalPleitoOb> InstalPleitoObs { get; set; }
        public virtual DbSet<InstalRefOb> InstalRefObs { get; set; }
        public virtual DbSet<InstalRessalva> InstalRessalvas { get; set; }
        public virtual DbSet<InstalStatus> InstalStatuses { get; set; }
        public virtual DbSet<InstalTipoParcela> InstalTipoParcelas { get; set; }
        public virtual DbSet<InstalTipoPleito> InstalTipoPleitos { get; set; }
        public virtual DbSet<Instalacao> Instalacaos { get; set; }
        public virtual DbSet<InstalacaoImportacao> InstalacaoImportacaos { get; set; }
        public virtual DbSet<InstalacaoImportacaoLog> InstalacaoImportacaoLogs { get; set; }
        public virtual DbSet<InstalacaoInfoBordero> InstalacaoInfoBorderos { get; set; }
        public virtual DbSet<IntegracaoBanrisul> IntegracaoBanrisuls { get; set; }
        public virtual DbSet<IntegracaoBanrisulAtm> IntegracaoBanrisulAtms { get; set; }
        public virtual DbSet<IntegracaoBb> IntegracaoBbs { get; set; }
        public virtual DbSet<IntegracaoCaixa> IntegracaoCaixas { get; set; }
        public virtual DbSet<IntegracaoCaixaAlteracaoStatus> IntegracaoCaixaAlteracaoStatuses { get; set; }
        public virtual DbSet<IntegracaoCaixaArquivo> IntegracaoCaixaArquivos { get; set; }
        public virtual DbSet<IntegracaoCaixaTipoArquivo> IntegracaoCaixaTipoArquivos { get; set; }
        public virtual DbSet<IntegracaoChamado> IntegracaoChamados { get; set; }
        public virtual DbSet<IntegracaoCobra> IntegracaoCobras { get; set; }
        public virtual DbSet<IntegracaoEmail> IntegracaoEmails { get; set; }
        public virtual DbSet<IntegracaoEnvioEmail> IntegracaoEnvioEmails { get; set; }
        public virtual DbSet<IntegracaoFalha> IntegracaoFalhas { get; set; }
        public virtual DbSet<IntegracaoFui> IntegracaoFuis { get; set; }
        public virtual DbSet<IntegracaoSicredi> IntegracaoSicredis { get; set; }
        public virtual DbSet<Intencao> Intencaos { get; set; }
        public virtual DbSet<IntencaoCheckin> IntencaoCheckins { get; set; }
        public virtual DbSet<ItemDefeito> ItemDefeitos { get; set; }
        public virtual DbSet<ItemReparoRede> ItemReparoRedes { get; set; }
        public virtual DbSet<ItemSolucao> ItemSolucaos { get; set; }
        public virtual DbSet<ItemXorcheckList> ItemXorcheckLists { get; set; }
        public virtual DbSet<ItensPendente> ItensPendentes { get; set; }
        public virtual DbSet<KitPadrao> KitPadraos { get; set; }
        public virtual DbSet<KitPadraoPeca> KitPadraoPecas { get; set; }
        public virtual DbSet<KitpadraoTecnico> KitpadraoTecnicos { get; set; }
        public virtual DbSet<LaboratorioPo> LaboratorioPos { get; set; }
        public virtual DbSet<LaboratorioPositem> LaboratorioPositems { get; set; }
        public virtual DbSet<LaboratorioPosreparo> LaboratorioPosreparos { get; set; }
        public virtual DbSet<Laudo> Laudos { get; set; }
        public virtual DbSet<LaudoControle> LaudoControles { get; set; }
        public virtual DbSet<LaudoSituacao> LaudoSituacaos { get; set; }
        public virtual DbSet<LaudoStatus> LaudoStatuses { get; set; }
        public virtual DbSet<Layout> Layouts { get; set; }
        public virtual DbSet<LayoutCampo> LayoutCampos { get; set; }
        public virtual DbSet<LiderTecnico> LiderTecnicos { get; set; }
        public virtual DbSet<Lingua> Linguas { get; set; }
        public virtual DbSet<LoBkpTecnico> LoBkpTecnicos { get; set; }
        public virtual DbSet<LoEmpresa> LoEmpresas { get; set; }
        public virtual DbSet<LoEstoque> LoEstoques { get; set; }
        public virtual DbSet<LoEstoqueLote> LoEstoqueLotes { get; set; }
        public virtual DbSet<LoEstoqueLoteEnder> LoEstoqueLoteEnders { get; set; }
        public virtual DbSet<LoEstrutura> LoEstruturas { get; set; }
        public virtual DbSet<LoFornecedor> LoFornecedors { get; set; }
        public virtual DbSet<LoItem> LoItems { get; set; }
        public virtual DbSet<LoItemEmTerc> LoItemEmTercs { get; set; }
        public virtual DbSet<LoItemRetTerc> LoItemRetTercs { get; set; }
        public virtual DbSet<LoLocal> LoLocals { get; set; }
        public virtual DbSet<LocaisBanrisul> LocaisBanrisuls { get; set; }
        public virtual DbSet<LocaisSlabanrisul> LocaisSlabanrisuls { get; set; }
        public virtual DbSet<LocalAtendimento> LocalAtendimentos { get; set; }
        public virtual DbSet<LocalAtendimentoAnalisador> LocalAtendimentoAnalisadors { get; set; }
        public virtual DbSet<LocalAtendimentoAnalisadorBairro> LocalAtendimentoAnalisadorBairros { get; set; }
        public virtual DbSet<LocalAtendimentoAnalisadorCentro> LocalAtendimentoAnalisadorCentros { get; set; }
        public virtual DbSet<LocalAtendimentoAnalisadorCoordenada> LocalAtendimentoAnalisadorCoordenadas { get; set; }
        public virtual DbSet<LocalAtendimentoFui> LocalAtendimentoFuis { get; set; }
        public virtual DbSet<LocalEnvioNffaturamento> LocalEnvioNffaturamentos { get; set; }
        public virtual DbSet<LocalEnvioNffaturamentoVinculado> LocalEnvioNffaturamentoVinculados { get; set; }
        public virtual DbSet<Localizacao> Localizacaos { get; set; }
        public virtual DbSet<LocalizacaoConf> LocalizacaoConfs { get; set; }
        public virtual DbSet<LogAgendaTecnico> LogAgendaTecnicos { get; set; }
        public virtual DbSet<LogAlertum> LogAlerta { get; set; }
        public virtual DbSet<LogCubeProcess> LogCubeProcesses { get; set; }
        public virtual DbSet<LogEnvioReport> LogEnvioReports { get; set; }
        public virtual DbSet<LogFechamentoBanrisul> LogFechamentoBanrisuls { get; set; }
        public virtual DbSet<LogGp> LogGps { get; set; }
        public virtual DbSet<LogIntegracaoBanrisulAtm> LogIntegracaoBanrisulAtms { get; set; }
        public virtual DbSet<LogIntegracaoBb> LogIntegracaoBbs { get; set; }
        public virtual DbSet<LogIntegracaoBrb> LogIntegracaoBrbs { get; set; }
        public virtual DbSet<LogIntegracaoCaixa> LogIntegracaoCaixas { get; set; }
        public virtual DbSet<LogIntegracaoCobra> LogIntegracaoCobras { get; set; }
        public virtual DbSet<LogIntegracaoLogixDespesa> LogIntegracaoLogixDespesas { get; set; }
        public virtual DbSet<LogIntegracaoMetroSp> LogIntegracaoMetroSps { get; set; }
        public virtual DbSet<LogIntegracaoSicredi> LogIntegracaoSicredis { get; set; }
        public virtual DbSet<LogIntegracaoZaffari> LogIntegracaoZaffaris { get; set; }
        public virtual DbSet<LogServico> LogServicos { get; set; }
        public virtual DbSet<Logerro> Logerros { get; set; }
        public virtual DbSet<LogixEstoque> LogixEstoques { get; set; }
        public virtual DbSet<Maquina> Maquinas { get; set; }
        public virtual DbSet<Mensagem> Mensagems { get; set; }
        public virtual DbSet<MensagemAutomatica> MensagemAutomaticas { get; set; }
        public virtual DbSet<MensagemTecnico> MensagemTecnicos { get; set; }
        public virtual DbSet<MensagemUsuario> MensagemUsuarios { get; set; }
        public virtual DbSet<Menu> Menus { get; set; }
        public virtual DbSet<MenuPo> MenuPos { get; set; }
        public virtual DbSet<MobileAviso> MobileAvisos { get; set; }
        public virtual DbSet<MobileVersao> MobileVersaos { get; set; }
        public virtual DbSet<ModalidadeObsFaturamento> ModalidadeObsFaturamentos { get; set; }
        public virtual DbSet<ModeloArquivo> ModeloArquivos { get; set; }
        public virtual DbSet<Moedum> Moeda { get; set; }
        public virtual DbSet<MotivoAgendamento> MotivoAgendamentos { get; set; }
        public virtual DbSet<MotivoBaixaNaoRealizadum> MotivoBaixaNaoRealizada { get; set; }
        public virtual DbSet<MotivoCancelamento> MotivoCancelamentos { get; set; }
        public virtual DbSet<MotivoCancelamentoBanrisul> MotivoCancelamentoBanrisuls { get; set; }
        public virtual DbSet<MotivoCancelamentoDePara> MotivoCancelamentoDeParas { get; set; }
        public virtual DbSet<MotivoComunicacao> MotivoComunicacaos { get; set; }
        public virtual DbSet<MotivoIncidenteNaoProcedente> MotivoIncidenteNaoProcedentes { get; set; }
        public virtual DbSet<MotivoReaberturaO> MotivoReaberturaOs { get; set; }
        public virtual DbSet<MultaCef> MultaCefs { get; set; }
        public virtual DbSet<MultaCef092016> MultaCef092016s { get; set; }
        public virtual DbSet<MultaCef102016> MultaCef102016s { get; set; }
        public virtual DbSet<Nf> Nfs { get; set; }
        public virtual DbSet<Nfpeca> Nfpecas { get; set; }
        public virtual DbSet<NoPo> NoPos { get; set; }
        public virtual DbSet<NotaFaturamentoSicredi> NotaFaturamentoSicredis { get; set; }
        public virtual DbSet<NumSerieVipBanrisul> NumSerieVipBanrisuls { get; set; }
        public virtual DbSet<NumSerieVipBanrisulTitulo> NumSerieVipBanrisulTitulos { get; set; }
        public virtual DbSet<NumeroSerieControleEquipamento> NumeroSerieControleEquipamentos { get; set; }
        public virtual DbSet<NumeroSerieControleTitulo> NumeroSerieControleTitulos { get; set; }
        public virtual DbSet<O> Os { get; set; }
        public virtual DbSet<ObservacaoFaturamento> ObservacaoFaturamentos { get; set; }
        public virtual DbSet<OperadoraTelefonium> OperadoraTelefonia { get; set; }
        public virtual DbSet<Or> Ors { get; set; }
        public virtual DbSet<Orc> Orcs { get; set; }
        public virtual DbSet<OrcDesconto> OrcDescontos { get; set; }
        public virtual DbSet<OrcDeslocamento> OrcDeslocamentos { get; set; }
        public virtual DbSet<OrcEndereco> OrcEnderecos { get; set; }
        public virtual DbSet<OrcFaturamento> OrcFaturamentos { get; set; }
        public virtual DbSet<OrcIss> OrcIsses { get; set; }
        public virtual DbSet<OrcMaoObra> OrcMaoObras { get; set; }
        public virtual DbSet<OrcMaterial> OrcMaterials { get; set; }
        public virtual DbSet<OrcMotivo> OrcMotivos { get; set; }
        public virtual DbSet<OrcOutroServico> OrcOutroServicos { get; set; }
        public virtual DbSet<OrcStatus> OrcStatuses { get; set; }
        public virtual DbSet<Orcamento> Orcamentos { get; set; }
        public virtual DbSet<Orcamento1> Orcamentos1 { get; set; }
        public virtual DbSet<OrcamentoItem> OrcamentoItems { get; set; }
        public virtual DbSet<OrcamentoNf> OrcamentoNfs { get; set; }
        public virtual DbSet<OrcamentoPecaExportacao> OrcamentoPecaExportacaos { get; set; }
        public virtual DbSet<OrcamentoPecasEspec> OrcamentoPecasEspecs { get; set; }
        public virtual DbSet<OrcamentoSalvoEndereco> OrcamentoSalvoEnderecos { get; set; }
        public virtual DbSet<OrcamentosDesconto> OrcamentosDescontos { get; set; }
        public virtual DbSet<OrcamentosFaturamento> OrcamentosFaturamentos { get; set; }
        public virtual DbSet<OrcamentosFaturamentobkp> OrcamentosFaturamentobkps { get; set; }
        public virtual DbSet<OrcamentosIss> OrcamentosIsses { get; set; }
        public virtual DbSet<OrcamentosOutrosServico> OrcamentosOutrosServicos { get; set; }
        public virtual DbSet<OrcamentosParametro> OrcamentosParametros { get; set; }
        public virtual DbSet<OrcamentosPeca> OrcamentosPecas { get; set; }
        public virtual DbSet<OrcamentosStatus> OrcamentosStatuses { get; set; }
        public virtual DbSet<OrcamentosTipo> OrcamentosTipos { get; set; }
        public virtual DbSet<OrcheckListItem> OrcheckListItems { get; set; }
        public virtual DbSet<Orchecklist> Orchecklists { get; set; }
        public virtual DbSet<Ordefeito> Ordefeitos { get; set; }
        public virtual DbSet<Ordestino> Ordestinos { get; set; }
        public virtual DbSet<Ordivergencium> Ordivergencia { get; set; }
        public virtual DbSet<OrigemCausa> OrigemCausas { get; set; }
        public virtual DbSet<OrigemChamadoStn> OrigemChamadoStns { get; set; }
        public virtual DbSet<Oritem> Oritems { get; set; }
        public virtual DbSet<OritemInsumo> OritemInsumos { get; set; }
        public virtual DbSet<Orlog> Orlogs { get; set; }
        public virtual DbSet<Ormodal> Ormodals { get; set; }
        public virtual DbSet<OrnivelCheckList> OrnivelCheckLists { get; set; }
        public virtual DbSet<Orsolucao> Orsolucaos { get; set; }
        public virtual DbSet<Orstatus> Orstatuses { get; set; }
        public virtual DbSet<OrtempoReparo> OrtempoReparos { get; set; }
        public virtual DbSet<Ortransporte> Ortransportes { get; set; }
        public virtual DbSet<OrtransporteXfilial> OrtransporteXfilials { get; set; }
        public virtual DbSet<OsAberturaEmMassa> OsAberturaEmMassas { get; set; }
        public virtual DbSet<OsArqMorto> OsArqMortos { get; set; }
        public virtual DbSet<OsConsultum> OsConsulta { get; set; }
        public virtual DbSet<OsEquip> OsEquips { get; set; }
        public virtual DbSet<OsSicrediAlteraTipoEcancela> OsSicrediAlteraTipoEcancelas { get; set; }
        public virtual DbSet<OsSuporte> OsSuportes { get; set; }
        public virtual DbSet<OsacompanhamentoForaPrazo> OsacompanhamentoForaPrazos { get; set; }
        public virtual DbSet<Osatendida> Osatendidas { get; set; }
        public virtual DbSet<OsatendidasArqMorto> OsatendidasArqMortos { get; set; }
        public virtual DbSet<OsbancadaPeca> OsbancadaPecas { get; set; }
        public virtual DbSet<OsbancadaPecasAplic> OsbancadaPecasAplics { get; set; }
        public virtual DbSet<OsbancadaPecasNf> OsbancadaPecasNfs { get; set; }
        public virtual DbSet<OsbancadaPecasOrcamento> OsbancadaPecasOrcamentos { get; set; }
        public virtual DbSet<OsbancadaPecasTransf> OsbancadaPecasTransfs { get; set; }
        public virtual DbSet<Osbancadum> Osbancada { get; set; }
        public virtual DbSet<OscanceladaPossicredi> OscanceladaPossicredis { get; set; }
        public virtual DbSet<OscanceladaPossicrediBkp> OscanceladaPossicrediBkps { get; set; }
        public virtual DbSet<OscopiaPo> OscopiaPos { get; set; }
        public virtual DbSet<OscotaBb> OscotaBbs { get; set; }
        public virtual DbSet<OshistPo> OshistPos { get; set; }
        public virtual DbSet<Osintegracao> Osintegracaos { get; set; }
        public virtual DbSet<OsintervencaoEquipamento> OsintervencaoEquipamentos { get; set; }
        public virtual DbSet<Osposimagen> Osposimagens { get; set; }
        public virtual DbSet<OspossicrediCobrancaAtendimento> OspossicrediCobrancaAtendimentos { get; set; }
        public virtual DbSet<OspossicrediCobrancaAtendimentoBkp> OspossicrediCobrancaAtendimentoBkps { get; set; }
        public virtual DbSet<Osreabertura> Osreaberturas { get; set; }
        public virtual DbSet<OsrelatorioInstalacao> OsrelatorioInstalacaos { get; set; }
        public virtual DbSet<OsrelatorioInstalacaoItem> OsrelatorioInstalacaoItems { get; set; }
        public virtual DbSet<OsrelatorioInstalacaoNaoConformidade> OsrelatorioInstalacaoNaoConformidades { get; set; }
        public virtual DbSet<OsrelatorioInstalacaoNaoConformidadeItem> OsrelatorioInstalacaoNaoConformidadeItems { get; set; }
        public virtual DbSet<OsressarcirCobrancaSicrediPo> OsressarcirCobrancaSicrediPos { get; set; }
        public virtual DbSet<OsretiradaPo> OsretiradaPos { get; set; }
        public virtual DbSet<Oss2012> Oss2012s { get; set; }
        public virtual DbSet<Oss56> Oss56s { get; set; }
        public virtual DbSet<OssemRetornoBb> OssemRetornoBbs { get; set; }
        public virtual DbSet<PaLogistica> PaLogisticas { get; set; }
        public virtual DbSet<PagamentosPo> PagamentosPos { get; set; }
        public virtual DbSet<Pai> Pais { get; set; }
        public virtual DbSet<ParametrosPo> ParametrosPos { get; set; }
        public virtual DbSet<ParquePo> ParquePos { get; set; }
        public virtual DbSet<ParquePosBanrisul> ParquePosBanrisuls { get; set; }
        public virtual DbSet<ParqueResumo> ParqueResumos { get; set; }
        public virtual DbSet<ParqueResumo2> ParqueResumo2s { get; set; }
        public virtual DbSet<PatrimonioPo> PatrimonioPos { get; set; }
        public virtual DbSet<Peca> Pecas { get; set; }
        public virtual DbSet<PecaExportacao> PecaExportacaos { get; set; }
        public virtual DbSet<PecaFamilium> PecaFamilia { get; set; }
        public virtual DbSet<PecaKit> PecaKits { get; set; }
        public virtual DbSet<PecaListaPeca> PecaListaPecas { get; set; }
        public virtual DbSet<PecaListum> PecaLista { get; set; }
        public virtual DbSet<PecaRe5114> PecaRe5114s { get; set; }
        public virtual DbSet<PecaStatus> PecaStatuses { get; set; }
        public virtual DbSet<PecaTeste> PecaTestes { get; set; }
        public virtual DbSet<PecasChecklist> PecasChecklists { get; set; }
        public virtual DbSet<PecasLaboratorio> PecasLaboratorios { get; set; }
        public virtual DbSet<Pedido> Pedidos { get; set; }
        public virtual DbSet<PedidoInvoice> PedidoInvoices { get; set; }
        public virtual DbSet<PedidoInvoiceCc> PedidoInvoiceCcs { get; set; }
        public virtual DbSet<PedidoInvoiceEmbalagem> PedidoInvoiceEmbalagems { get; set; }
        public virtual DbSet<PedidoInvoicePeca> PedidoInvoicePecas { get; set; }
        public virtual DbSet<PedidoInvoiceStatus> PedidoInvoiceStatuses { get; set; }
        public virtual DbSet<PedidoNfpeca> PedidoNfpecas { get; set; }
        public virtual DbSet<PedidoPeca> PedidoPecas { get; set; }
        public virtual DbSet<PedidoPecaLote> PedidoPecaLotes { get; set; }
        public virtual DbSet<PedidoPecaOb> PedidoPecaObs { get; set; }
        public virtual DbSet<PedidoPecaPcp> PedidoPecaPcps { get; set; }
        public virtual DbSet<PedidoPecaStatus> PedidoPecaStatuses { get; set; }
        public virtual DbSet<PedidoStatus> PedidoStatuses { get; set; }
        public virtual DbSet<Perfil> Perfils { get; set; }
        public virtual DbSet<PerfilMenu> PerfilMenus { get; set; }
        public virtual DbSet<PerfilSeguranca> PerfilSegurancas { get; set; }
        public virtual DbSet<PerformanceCliente> PerformanceClientes { get; set; }
        public virtual DbSet<PerformanceClienteEquipamento> PerformanceClienteEquipamentos { get; set; }
        public virtual DbSet<PerformanceDistribuicaoChamadosCausaExtraMaquina> PerformanceDistribuicaoChamadosCausaExtraMaquinas { get; set; }
        public virtual DbSet<PerformanceDistribuicaoChamadosCausaExtraMaquinaBbgarantia2> PerformanceDistribuicaoChamadosCausaExtraMaquinaBbgarantia2s { get; set; }
        public virtual DbSet<PerformanceDistribuicaoChamadosCausaExtraMaquinaBbgarantium> PerformanceDistribuicaoChamadosCausaExtraMaquinaBbgarantia { get; set; }
        public virtual DbSet<PerformanceDistribuicaoChamadosCausaExtraMaquinaBbtecno> PerformanceDistribuicaoChamadosCausaExtraMaquinaBbtecnos { get; set; }
        public virtual DbSet<PerformanceDistribuicaoChamadosCausaExtraMaquinaBbtecno2> PerformanceDistribuicaoChamadosCausaExtraMaquinaBbtecno2s { get; set; }
        public virtual DbSet<PerformanceDistribuicaoChamadosCausaGeral> PerformanceDistribuicaoChamadosCausaGerals { get; set; }
        public virtual DbSet<PerformanceDistribuicaoChamadosCausaGeralBbgarantia2> PerformanceDistribuicaoChamadosCausaGeralBbgarantia2s { get; set; }
        public virtual DbSet<PerformanceDistribuicaoChamadosCausaGeralBbgarantium> PerformanceDistribuicaoChamadosCausaGeralBbgarantia { get; set; }
        public virtual DbSet<PerformanceDistribuicaoChamadosCausaGeralBbtecno> PerformanceDistribuicaoChamadosCausaGeralBbtecnos { get; set; }
        public virtual DbSet<PerformanceDistribuicaoChamadosCausaGeralBbtecno2> PerformanceDistribuicaoChamadosCausaGeralBbtecno2s { get; set; }
        public virtual DbSet<PerformanceDistribuicaoChamadosCausaMaquina> PerformanceDistribuicaoChamadosCausaMaquinas { get; set; }
        public virtual DbSet<PerformanceDistribuicaoChamadosCausaMaquinaBbgarantia2> PerformanceDistribuicaoChamadosCausaMaquinaBbgarantia2s { get; set; }
        public virtual DbSet<PerformanceDistribuicaoChamadosCausaMaquinaBbgarantium> PerformanceDistribuicaoChamadosCausaMaquinaBbgarantia { get; set; }
        public virtual DbSet<PerformanceDistribuicaoChamadosCausaMaquinaBbtecno> PerformanceDistribuicaoChamadosCausaMaquinaBbtecnos { get; set; }
        public virtual DbSet<PerformanceDistribuicaoChamadosCausaMaquinaBbtecno2> PerformanceDistribuicaoChamadosCausaMaquinaBbtecno2s { get; set; }
        public virtual DbSet<PerformanceEvolucaodoParque> PerformanceEvolucaodoParques { get; set; }
        public virtual DbSet<PerformanceEvolucaodoParqueBbgarantiaT> PerformanceEvolucaodoParqueBbgarantiaTs { get; set; }
        public virtual DbSet<PerformanceEvolucaodoParqueBbgarantium> PerformanceEvolucaodoParqueBbgarantia { get; set; }
        public virtual DbSet<PerformanceEvolucaodoParqueBbtecno> PerformanceEvolucaodoParqueBbtecnos { get; set; }
        public virtual DbSet<PerformanceHistoricoSlaMensal> PerformanceHistoricoSlaMensals { get; set; }
        public virtual DbSet<PerformanceHistoricoSlaMensalBbgarantium> PerformanceHistoricoSlaMensalBbgarantia { get; set; }
        public virtual DbSet<PerformanceHistoricoSlaMensalBbtecno> PerformanceHistoricoSlaMensalBbtecnos { get; set; }
        public virtual DbSet<PerformanceIndiceDeSolucao> PerformanceIndiceDeSolucaos { get; set; }
        public virtual DbSet<PerformanceIndiceDeSolucaoBbgarantium> PerformanceIndiceDeSolucaoBbgarantia { get; set; }
        public virtual DbSet<PerformanceIndiceDeSolucaoBbtecno> PerformanceIndiceDeSolucaoBbtecnos { get; set; }
        public virtual DbSet<PerformanceIndiceParqueQuebraEquipamento> PerformanceIndiceParqueQuebraEquipamentos { get; set; }
        public virtual DbSet<PerformanceIndiceParqueQuebraEquipamentoBbgarantiaT> PerformanceIndiceParqueQuebraEquipamentoBbgarantiaTs { get; set; }
        public virtual DbSet<PerformanceIndiceParqueQuebraEquipamentoBbgarantium> PerformanceIndiceParqueQuebraEquipamentoBbgarantia { get; set; }
        public virtual DbSet<PerformanceIndiceParqueQuebraEquipamentoBbtecno> PerformanceIndiceParqueQuebraEquipamentoBbtecnos { get; set; }
        public virtual DbSet<PerformanceIndiceQuebra> PerformanceIndiceQuebras { get; set; }
        public virtual DbSet<PerformanceIndiceQuebraBbgarantium> PerformanceIndiceQuebraBbgarantia { get; set; }
        public virtual DbSet<PerformanceIndiceQuebraBbtecno> PerformanceIndiceQuebraBbtecnos { get; set; }
        public virtual DbSet<PerformanceIndiceQuebraBbtecno2> PerformanceIndiceQuebraBbtecno2s { get; set; }
        public virtual DbSet<PerformanceIndiceQuebraEquipamento> PerformanceIndiceQuebraEquipamentos { get; set; }
        public virtual DbSet<PerformanceIndiceQuebraEquipamentoBbgarantiaT> PerformanceIndiceQuebraEquipamentoBbgarantiaTs { get; set; }
        public virtual DbSet<PerformanceIndiceQuebraEquipamentoBbgarantium> PerformanceIndiceQuebraEquipamentoBbgarantia { get; set; }
        public virtual DbSet<PerformanceIndiceQuebraEquipamentoBbtecno> PerformanceIndiceQuebraEquipamentoBbtecnos { get; set; }
        public virtual DbSet<PerformanceOfensore> PerformanceOfensores { get; set; }
        public virtual DbSet<PerformanceOfensoresBbgarantiaT> PerformanceOfensoresBbgarantiaTs { get; set; }
        public virtual DbSet<PerformanceOfensoresBbgarantium> PerformanceOfensoresBbgarantia { get; set; }
        public virtual DbSet<PerformanceOfensoresBbtecno> PerformanceOfensoresBbtecnos { get; set; }
        public virtual DbSet<PlanejamentoFuturo> PlanejamentoFuturos { get; set; }
        public virtual DbSet<PlantaoTecnico> PlantaoTecnicos { get; set; }
        public virtual DbSet<PlantaoTecnicoCliente> PlantaoTecnicoClientes { get; set; }
        public virtual DbSet<PlantaoTecnicoRegiao> PlantaoTecnicoRegiaos { get; set; }
        public virtual DbSet<Ponto> Pontos { get; set; }
        public virtual DbSet<PontoColaborador> PontoColaboradors { get; set; }
        public virtual DbSet<PontoMovel> PontoMovels { get; set; }
        public virtual DbSet<PontoMovelTipoHorario> PontoMovelTipoHorarios { get; set; }
        public virtual DbSet<PontoPeriodo> PontoPeriodos { get; set; }
        public virtual DbSet<PontoPeriodoIntervaloAcessoDatum> PontoPeriodoIntervaloAcessoData { get; set; }
        public virtual DbSet<PontoPeriodoModoAprovacao> PontoPeriodoModoAprovacaos { get; set; }
        public virtual DbSet<PontoPeriodoStatus> PontoPeriodoStatuses { get; set; }
        public virtual DbSet<PontoPeriodoUsuario> PontoPeriodoUsuarios { get; set; }
        public virtual DbSet<PontoPeriodoUsuarioStatus> PontoPeriodoUsuarioStatuses { get; set; }
        public virtual DbSet<PontoSobreAviso> PontoSobreAvisos { get; set; }
        public virtual DbSet<PontoTipoHora> PontoTipoHoras { get; set; }
        public virtual DbSet<PontoUsuario> PontoUsuarios { get; set; }
        public virtual DbSet<PontoUsuarioDataAdvertencium> PontoUsuarioDataAdvertencia { get; set; }
        public virtual DbSet<PontoUsuarioDataControleAlteracaoAcesso> PontoUsuarioDataControleAlteracaoAcessos { get; set; }
        public virtual DbSet<PontoUsuarioDataDivergenciaObservacao> PontoUsuarioDataDivergenciaObservacaos { get; set; }
        public virtual DbSet<PontoUsuarioDataDivergenciaRat> PontoUsuarioDataDivergenciaRats { get; set; }
        public virtual DbSet<PontoUsuarioDataDivergencium> PontoUsuarioDataDivergencia { get; set; }
        public virtual DbSet<PontoUsuarioDataJustificativaAlteracaoAcesso> PontoUsuarioDataJustificativaAlteracaoAcessos { get; set; }
        public virtual DbSet<PontoUsuarioDataJustificativaValidacao> PontoUsuarioDataJustificativaValidacaos { get; set; }
        public virtual DbSet<PontoUsuarioDataModoAlteracaoAcesso> PontoUsuarioDataModoAlteracaoAcessos { get; set; }
        public virtual DbSet<PontoUsuarioDataModoDivergencium> PontoUsuarioDataModoDivergencia { get; set; }
        public virtual DbSet<PontoUsuarioDataMotivoDivergencium> PontoUsuarioDataMotivoDivergencia { get; set; }
        public virtual DbSet<PontoUsuarioDataStatus> PontoUsuarioDataStatuses { get; set; }
        public virtual DbSet<PontoUsuarioDataStatusAcesso> PontoUsuarioDataStatusAcessos { get; set; }
        public virtual DbSet<PontoUsuarioDataTipoAdvertencium> PontoUsuarioDataTipoAdvertencia { get; set; }
        public virtual DbSet<PontoUsuarioDataValidacao> PontoUsuarioDataValidacaos { get; set; }
        public virtual DbSet<PontoUsuarioDatum> PontoUsuarioData { get; set; }
        public virtual DbSet<PontoUsuarioRejeicao> PontoUsuarioRejeicaos { get; set; }
        public virtual DbSet<Pos2000> Pos2000s { get; set; }
        public virtual DbSet<PosCpfcnpj> PosCpfcnpjs { get; set; }
        public virtual DbSet<PosCre> PosCres { get; set; }
        public virtual DbSet<PosDev> PosDevs { get; set; }
        public virtual DbSet<PosFatGeral> PosFatGerals { get; set; }
        public virtual DbSet<PosFatGeral1> PosFatGerals1 { get; set; }
        public virtual DbSet<PosFatGeral2> PosFatGeral2s { get; set; }
        public virtual DbSet<Poscre1> Poscres1 { get; set; }
        public virtual DbSet<Poscrenew> Poscrenews { get; set; }
        public virtual DbSet<PosdadosLogix> PosdadosLogixes { get; set; }
        public virtual DbSet<Poslogix> Poslogixes { get; set; }
        public virtual DbSet<Posrec> Posrecs { get; set; }
        public virtual DbSet<PosretornoFinanceiro> PosretornoFinanceiros { get; set; }
        public virtual DbSet<PosretornoIntegracao> PosretornoIntegracaos { get; set; }
        public virtual DbSet<Posteste> Postestes { get; set; }
        public virtual DbSet<PosvendaBanrisul> PosvendaBanrisuls { get; set; }
        public virtual DbSet<PqfaturamentoPo> PqfaturamentoPos { get; set; }
        public virtual DbSet<Preventiva> Preventivas { get; set; }
        public virtual DbSet<PreventivaImportacao> PreventivaImportacaos { get; set; }
        public virtual DbSet<ProducaoPo> ProducaoPos { get; set; }
        public virtual DbSet<ProducaoPositem> ProducaoPositems { get; set; }
        public virtual DbSet<ProducaoVeloh3> ProducaoVeloh3s { get; set; }
        public virtual DbSet<Produto> Produtos { get; set; }
        public virtual DbSet<ProdutoCliente> ProdutoClientes { get; set; }
        public virtual DbSet<ProdutoRede> ProdutoRedes { get; set; }
        public virtual DbSet<ProtocoloChamadoStn> ProtocoloChamadoStns { get; set; }
        public virtual DbSet<ProtocoloStn> ProtocoloStns { get; set; }
        public virtual DbSet<Rat> Rats { get; set; }
        public virtual DbSet<RatArqMorto> RatArqMortos { get; set; }
        public virtual DbSet<RatFotoSmartphoneInconsistente> RatFotoSmartphoneInconsistentes { get; set; }
        public virtual DbSet<Ratbanrisul> Ratbanrisuls { get; set; }
        public virtual DbSet<RatbanrisulArqMorto> RatbanrisulArqMortos { get; set; }
        public virtual DbSet<Ratdetalhe> Ratdetalhes { get; set; }
        public virtual DbSet<RatdetalhesArqMorto> RatdetalhesArqMortos { get; set; }
        public virtual DbSet<RatdetalhesPeca> RatdetalhesPecas { get; set; }
        public virtual DbSet<RatdetalhesPecasStatus> RatdetalhesPecasStatuses { get; set; }
        public virtual DbSet<Ratdigitalizadum> Ratdigitalizada { get; set; }
        public virtual DbSet<Ratfoto> Ratfotos { get; set; }
        public virtual DbSet<RatfotoSmartphone> RatfotoSmartphones { get; set; }
        public virtual DbSet<RatpecasStatus> RatpecasStatuses { get; set; }
        public virtual DbSet<Rebate> Rebates { get; set; }
        public virtual DbSet<RebateRedutor> RebateRedutors { get; set; }
        public virtual DbSet<RedeBanrisul> RedeBanrisuls { get; set; }
        public virtual DbSet<Redutor> Redutors { get; set; }
        public virtual DbSet<Regiao> Regiaos { get; set; }
        public virtual DbSet<RegiaoAutorizadaNew> RegiaoAutorizadaNews { get; set; }
        public virtual DbSet<RegiaoAutorizadum> RegiaoAutorizada { get; set; }
        public virtual DbSet<RegiaoBb> RegiaoBbs { get; set; }
        public virtual DbSet<RegiaoEstadoPo> RegiaoEstadoPos { get; set; }
        public virtual DbSet<RegiaoPo> RegiaoPos { get; set; }
        public virtual DbSet<Regional> Regionals { get; set; }
        public virtual DbSet<RegistroReconfiguracao> RegistroReconfiguracaos { get; set; }
        public virtual DbSet<Relatorio> Relatorios { get; set; }
        public virtual DbSet<RelatorioApresentacao> RelatorioApresentacaos { get; set; }
        public virtual DbSet<RelatorioApresentacaoSlide> RelatorioApresentacaoSlides { get; set; }
        public virtual DbSet<RelatorioApresentacaoSlideVisao> RelatorioApresentacaoSlideVisaos { get; set; }
        public virtual DbSet<RelatorioDescricao> RelatorioDescricaos { get; set; }
        public virtual DbSet<RelatorioPerfil> RelatorioPerfils { get; set; }
        public virtual DbSet<RelatorioReporting> RelatorioReportings { get; set; }
        public virtual DbSet<RelatorioReportingUsuario> RelatorioReportingUsuarios { get; set; }
        public virtual DbSet<RelatorioUsuario> RelatorioUsuarios { get; set; }
        public virtual DbSet<RelatorioVisao> RelatorioVisaos { get; set; }
        public virtual DbSet<RelatorioVisaoUsuario> RelatorioVisaoUsuarios { get; set; }
        public virtual DbSet<Report> Reports { get; set; }
        public virtual DbSet<ReportAgendamento> ReportAgendamentos { get; set; }
        public virtual DbSet<ReportCatalogoEmail> ReportCatalogoEmails { get; set; }
        public virtual DbSet<ReportParametro> ReportParametros { get; set; }
        public virtual DbSet<ReportPerfil> ReportPerfils { get; set; }
        public virtual DbSet<ReportRecorrencium> ReportRecorrencia { get; set; }
        public virtual DbSet<ReportReincidenciaSicredi> ReportReincidenciaSicredis { get; set; }
        public virtual DbSet<ReportRelacao> ReportRelacaos { get; set; }
        public virtual DbSet<ReportScript> ReportScripts { get; set; }
        public virtual DbSet<ReportingImagen> ReportingImagens { get; set; }
        public virtual DbSet<ReportingIndiceDePecasPendentesGeovane> ReportingIndiceDePecasPendentesGeovanes { get; set; }
        public virtual DbSet<Representante> Representantes { get; set; }
        public virtual DbSet<Retroativo> Retroativos { get; set; }
        public virtual DbSet<Retrofit> Retrofits { get; set; }
        public virtual DbSet<RoboGoogleLocal> RoboGoogleLocals { get; set; }
        public virtual DbSet<SatMobileAppUso> SatMobileAppUsos { get; set; }
        public virtual DbSet<SatMobileAppVersao> SatMobileAppVersaos { get; set; }
        public virtual DbSet<SatMobileAppVersaoLog> SatMobileAppVersaoLogs { get; set; }
        public virtual DbSet<Sequencium> Sequencia { get; set; }
        public virtual DbSet<Servico> Servicos { get; set; }
        public virtual DbSet<SessaoUsuario> SessaoUsuarios { get; set; }
        public virtual DbSet<Severidade> Severidades { get; set; }
        public virtual DbSet<SimCard> SimCards { get; set; }
        public virtual DbSet<Sistema> Sistemas { get; set; }
        public virtual DbSet<Sla> Slas { get; set; }
        public virtual DbSet<SlaNew> SlaNews { get; set; }
        public virtual DbSet<SladistanciaTempo> SladistanciaTempos { get; set; }
        public virtual DbSet<Slaferiado> Slaferiados { get; set; }
        public virtual DbSet<SlaparametroAdicional> SlaparametroAdicionals { get; set; }
        public virtual DbSet<SlasicrediPo> SlasicrediPos { get; set; }
        public virtual DbSet<SlideContrato12mese> SlideContrato12meses { get; set; }
        public virtual DbSet<SlideContratoDeclinado> SlideContratoDeclinados { get; set; }
        public virtual DbSet<SlideContratoDetalhamento> SlideContratoDetalhamentos { get; set; }
        public virtual DbSet<SlideContratoDetalhamento12Mese> SlideContratoDetalhamento12Meses { get; set; }
        public virtual DbSet<SlideContratoEquipamentosAtvInativo> SlideContratoEquipamentosAtvInativos { get; set; }
        public virtual DbSet<SlideContratoNovosContrato> SlideContratoNovosContratos { get; set; }
        public virtual DbSet<SlideHe> SlideHes { get; set; }
        public virtual DbSet<SlidechamadosAntigo> SlidechamadosAntigos { get; set; }
        public virtual DbSet<SmartCard> SmartCards { get; set; }
        public virtual DbSet<SolicPeca> SolicPecas { get; set; }
        public virtual DbSet<SolicPecaItem> SolicPecaItems { get; set; }
        public virtual DbSet<SolicPecaNf> SolicPecaNfs { get; set; }
        public virtual DbSet<SolicitacaoNf> SolicitacaoNfs { get; set; }
        public virtual DbSet<SolicitantePatrimonio> SolicitantePatrimonios { get; set; }
        public virtual DbSet<Spa> Spas { get; set; }
        public virtual DbSet<SpaKpi> SpaKpis { get; set; }
        public virtual DbSet<Sqlmapoutput> Sqlmapoutputs { get; set; }
        public virtual DbSet<SsisConfiguration> SsisConfigurations { get; set; }
        public virtual DbSet<StatusChamado> StatusChamados { get; set; }
        public virtual DbSet<StatusChecklistStn> StatusChecklistStns { get; set; }
        public virtual DbSet<StatusDocumentacao> StatusDocumentacaos { get; set; }
        public virtual DbSet<StatusEquipamentoPo> StatusEquipamentoPos { get; set; }
        public virtual DbSet<StatusFaturamento> StatusFaturamentos { get; set; }
        public virtual DbSet<StatusFaturamentoSicredi> StatusFaturamentoSicredis { get; set; }
        public virtual DbSet<StatusInstalacao> StatusInstalacaos { get; set; }
        public virtual DbSet<StatusLaboratorioPo> StatusLaboratorioPos { get; set; }
        public virtual DbSet<StatusLaboratorioPositem> StatusLaboratorioPositems { get; set; }
        public virtual DbSet<StatusProducaoPo> StatusProducaoPos { get; set; }
        public virtual DbSet<StatusProducaoPositem> StatusProducaoPositems { get; set; }
        public virtual DbSet<StatusServico> StatusServicos { get; set; }
        public virtual DbSet<StatusServicoStn> StatusServicoStns { get; set; }
        public virtual DbSet<StatusSlaosabertaInst> StatusSlaosabertaInsts { get; set; }
        public virtual DbSet<StatusSlaosabertum> StatusSlaosaberta { get; set; }
        public virtual DbSet<StatusSlaosfechadaInst> StatusSlaosfechadaInsts { get; set; }
        public virtual DbSet<StatusSlaosfechadum> StatusSlaosfechada { get; set; }
        public virtual DbSet<TabelaErrosHitachi> TabelaErrosHitachis { get; set; }
        public virtual DbSet<TabelaFiliai> TabelaFiliais { get; set; }
        public virtual DbSet<TabelaInconsistencia> TabelaInconsistencias { get; set; }
        public virtual DbSet<TabelaMotivosInconsistencia> TabelaMotivosInconsistencias { get; set; }
        public virtual DbSet<Table1> Table1s { get; set; }
        public virtual DbSet<TamanhoBaseHistorico> TamanhoBaseHistoricos { get; set; }
        public virtual DbSet<TamanhoBaseHistoricoObjeto> TamanhoBaseHistoricoObjetos { get; set; }
        public virtual DbSet<Tarefa> Tarefas { get; set; }
        public virtual DbSet<TarefaImpacto> TarefaImpactos { get; set; }
        public virtual DbSet<TarefaImpactoGrupo> TarefaImpactoGrupos { get; set; }
        public virtual DbSet<TarefaNotificacao> TarefaNotificacaos { get; set; }
        public virtual DbSet<TarefasAnalista> TarefasAnalistas { get; set; }
        public virtual DbSet<TarefasAnexo> TarefasAnexos { get; set; }
        public virtual DbSet<TarefasModulo> TarefasModulos { get; set; }
        public virtual DbSet<TarefasObjetosAlterado> TarefasObjetosAlterados { get; set; }
        public virtual DbSet<TarefasOcorrencia> TarefasOcorrencias { get; set; }
        public virtual DbSet<TarefasPausa> TarefasPausas { get; set; }
        public virtual DbSet<TarefasStatus> TarefasStatuses { get; set; }
        public virtual DbSet<TarefasTipo> TarefasTipos { get; set; }
        public virtual DbSet<TbLogisticaBackUpTecnico> TbLogisticaBackUpTecnicos { get; set; }
        public virtual DbSet<TbLogisticaBackUpfilial> TbLogisticaBackUpfilials { get; set; }
        public virtual DbSet<TbLogisticaBackupMinimoPadrao> TbLogisticaBackupMinimoPadraos { get; set; }
        public virtual DbSet<Tecnico> Tecnicos { get; set; }
        public virtual DbSet<TecnicoAnalisador> TecnicoAnalisadors { get; set; }
        public virtual DbSet<TecnicoCliente> TecnicoClientes { get; set; }
        public virtual DbSet<TecnicoContum> TecnicoConta { get; set; }
        public virtual DbSet<TecnicoDeslocamento> TecnicoDeslocamentos { get; set; }
        public virtual DbSet<TecnicoDeslocamentoAnalise> TecnicoDeslocamentoAnalises { get; set; }
        public virtual DbSet<TecnicoEquipamento> TecnicoEquipamentos { get; set; }
        public virtual DbSet<TecnicoProdutividade> TecnicoProdutividades { get; set; }
        public virtual DbSet<TecnicoReincidencium> TecnicoReincidencia { get; set; }
        public virtual DbSet<TecnicoVeiculo> TecnicoVeiculos { get; set; }
        public virtual DbSet<TecnicoXlider> TecnicoXliders { get; set; }
        public virtual DbSet<TecnicosFilial> TecnicosFilials { get; set; }
        public virtual DbSet<Temp> Temps { get; set; }
        public virtual DbSet<TempGraficoTarefa> TempGraficoTarefas { get; set; }
        public virtual DbSet<TempGraficoTarefas2> TempGraficoTarefas2s { get; set; }
        public virtual DbSet<TempMediaAnualReincidencia2> TempMediaAnualReincidencia2s { get; set; }
        public virtual DbSet<TempMediaAnualReincidencium> TempMediaAnualReincidencia { get; set; }
        public virtual DbSet<TempO> TempOs { get; set; }
        public virtual DbSet<TempOs2> TempOs2s { get; set; }
        public virtual DbSet<TempOs3> TempOs3s { get; set; }
        public virtual DbSet<TempOsPonto> TempOsPontos { get; set; }
        public virtual DbSet<TempPecasConsolidado> TempPecasConsolidados { get; set; }
        public virtual DbSet<TempPecasLogix> TempPecasLogixes { get; set; }
        public virtual DbSet<TempPecasRat> TempPecasRats { get; set; }
        public virtual DbSet<TempPos4> TempPos4s { get; set; }
        public virtual DbSet<TempRelElefante> TempRelElefantes { get; set; }
        public virtual DbSet<TempSlabancoob> TempSlabancoobs { get; set; }
        public virtual DbSet<TempSlabanrisul> TempSlabanrisuls { get; set; }
        public virtual DbSet<TempSlabanrisulpo> TempSlabanrisulpos { get; set; }
        public virtual DbSet<TempSlabasa> TempSlabasas { get; set; }
        public virtual DbSet<TempSlabb> TempSlabbs { get; set; }
        public virtual DbSet<TempSlabbd> TempSlabbds { get; set; }
        public virtual DbSet<TempSlabbdfilial> TempSlabbdfilials { get; set; }
        public virtual DbSet<TempSlabnb> TempSlabnbs { get; set; }
        public virtual DbSet<TempSlabnbfilial> TempSlabnbfilials { get; set; }
        public virtual DbSet<TempSlabrb> TempSlabrbs { get; set; }
        public virtual DbSet<TempSlacef> TempSlacefs { get; set; }
        public virtual DbSet<TempSlacef5853> TempSlacef5853s { get; set; }
        public virtual DbSet<TempSlacef5855> TempSlacef5855s { get; set; }
        public virtual DbSet<TempSlacefcontrato> TempSlacefcontratos { get; set; }
        public virtual DbSet<TempSlaceffilial> TempSlaceffilials { get; set; }
        public virtual DbSet<TempSlaceffilialEc> TempSlaceffilialEcs { get; set; }
        public virtual DbSet<TempSlacobra> TempSlacobras { get; set; }
        public virtual DbSet<TempSlacobraDispBb> TempSlacobraDispBbs { get; set; }
        public virtual DbSet<TempSlacobraFilial> TempSlacobraFilials { get; set; }
        public virtual DbSet<TempSlacobraFilial2> TempSlacobraFilial2s { get; set; }
        public virtual DbSet<TempSlacobraFilial3> TempSlacobraFilial3s { get; set; }
        public virtual DbSet<TempSlacorreio> TempSlacorreios { get; set; }
        public virtual DbSet<TempSladicico> TempSladicicos { get; set; }
        public virtual DbSet<TempSladigicon> TempSladigicons { get; set; }
        public virtual DbSet<TempSlageral> TempSlagerals { get; set; }
        public virtual DbSet<TempSlageralFilial> TempSlageralFilials { get; set; }
        public virtual DbSet<TempSlahering> TempSlaherings { get; set; }
        public virtual DbSet<TempSlahsbc> TempSlahsbcs { get; set; }
        public virtual DbSet<TempSlasicredi24> TempSlasicredi24s { get; set; }
        public virtual DbSet<TempSlasicredi48> TempSlasicredi48s { get; set; }
        public virtual DbSet<TempSlasicredi72> TempSlasicredi72s { get; set; }
        public virtual DbSet<TempSlatendtudo> TempSlatendtudos { get; set; }
        public virtual DbSet<TempSlideReinc7Dia> TempSlideReinc7Dias { get; set; }
        public virtual DbSet<TempoAtendimentoPo> TempoAtendimentoPos { get; set; }
        public virtual DbSet<Teste> Testes { get; set; }
        public virtual DbSet<Testeinterop> Testeinterops { get; set; }
        public virtual DbSet<TextoArqBanri> TextoArqBanris { get; set; }
        public virtual DbSet<TicketLogCredito> TicketLogCreditos { get; set; }
        public virtual DbSet<TicketLogFaturamento> TicketLogFaturamentos { get; set; }
        public virtual DbSet<TicketLogPedidoCredito> TicketLogPedidoCreditos { get; set; }
        public virtual DbSet<TicketLogTransacao> TicketLogTransacaos { get; set; }
        public virtual DbSet<TicketLogUsuarioCartaoPlaca> TicketLogUsuarioCartaoPlacas { get; set; }
        public virtual DbSet<TipoCausa> TipoCausas { get; set; }
        public virtual DbSet<TipoChamadoStn> TipoChamadoStns { get; set; }
        public virtual DbSet<TipoComunicacao> TipoComunicacaos { get; set; }
        public virtual DbSet<TipoComunicacaoDePara> TipoComunicacaoDeParas { get; set; }
        public virtual DbSet<TipoContrato> TipoContratos { get; set; }
        public virtual DbSet<TipoDeParaEquipamentoPo> TipoDeParaEquipamentoPos { get; set; }
        public virtual DbSet<TipoDesconto> TipoDescontos { get; set; }
        public virtual DbSet<TipoEquipamento> TipoEquipamentos { get; set; }
        public virtual DbSet<TipoFrete> TipoFretes { get; set; }
        public virtual DbSet<TipoGarantium> TipoGarantia { get; set; }
        public virtual DbSet<TipoHistoricoEquipamentoPo> TipoHistoricoEquipamentoPos { get; set; }
        public virtual DbSet<TipoIndiceReajuste> TipoIndiceReajustes { get; set; }
        public virtual DbSet<TipoIntervencao> TipoIntervencaos { get; set; }
        public virtual DbSet<TipoLocalAtendimento> TipoLocalAtendimentos { get; set; }
        public virtual DbSet<TipoMercado> TipoMercados { get; set; }
        public virtual DbSet<TipoMidiaPo> TipoMidiaPos { get; set; }
        public virtual DbSet<TipoMultum> TipoMulta { get; set; }
        public virtual DbSet<TipoOr> TipoOrs { get; set; }
        public virtual DbSet<TipoOsgeracao> TipoOsgeracaos { get; set; }
        public virtual DbSet<TipoPercMultum> TipoPercMulta { get; set; }
        public virtual DbSet<TipoReinc> TipoReincs { get; set; }
        public virtual DbSet<TipoRetencao> TipoRetencaos { get; set; }
        public virtual DbSet<TipoRotum> TipoRota { get; set; }
        public virtual DbSet<TipoServico> TipoServicos { get; set; }
        public virtual DbSet<TipoTecnicoLaboratorio> TipoTecnicoLaboratorios { get; set; }
        public virtual DbSet<TipoUsuario> TipoUsuarios { get; set; }
        public virtual DbSet<TipoUsuarioMenuPo> TipoUsuarioMenuPos { get; set; }
        public virtual DbSet<TipoVeloh3> TipoVeloh3s { get; set; }
        public virtual DbSet<TmpCalculaIndiceQuebra> TmpCalculaIndiceQuebras { get; set; }
        public virtual DbSet<TmpCalculaIndiceQuebraPorCliente> TmpCalculaIndiceQuebraPorClientes { get; set; }
        public virtual DbSet<TmpCalculaParque> TmpCalculaParques { get; set; }
        public virtual DbSet<TmpCalculaParqueMese> TmpCalculaParqueMeses { get; set; }
        public virtual DbSet<TmpCalculaParqueTotal> TmpCalculaParqueTotals { get; set; }
        public virtual DbSet<TmpMonitoramento> TmpMonitoramentos { get; set; }
        public virtual DbSet<TmpPecasPendente> TmpPecasPendentes { get; set; }
        public virtual DbSet<TmpPecasPendentes2> TmpPecasPendentes2s { get; set; }
        public virtual DbSet<TmpPecasPendentes2Filial> TmpPecasPendentes2Filials { get; set; }
        public virtual DbSet<TmpVeloh> TmpVelohs { get; set; }
        public virtual DbSet<Tmpbb> Tmpbbs { get; set; }
        public virtual DbSet<Traducao> Traducaos { get; set; }
        public virtual DbSet<TraducaoInterface> TraducaoInterfaces { get; set; }
        public virtual DbSet<Transportadora> Transportadoras { get; set; }
        public virtual DbSet<TudoPerto> TudoPertos { get; set; }
        public virtual DbSet<Turno> Turnos { get; set; }
        public virtual DbSet<Uf> Ufs { get; set; }
        public virtual DbSet<Ufregiao> Ufregiaos { get; set; }
        public virtual DbSet<Usuario> Usuarios { get; set; }
        public virtual DbSet<UsuarioDashboard> UsuarioDashboards { get; set; }
        public virtual DbSet<UsuarioFoto> UsuarioFotos { get; set; }
        public virtual DbSet<UsuarioMenu> UsuarioMenus { get; set; }
        public virtual DbSet<UsuarioNovaSenha> UsuarioNovaSenhas { get; set; }
        public virtual DbSet<UsuarioPermissaoEspecial> UsuarioPermissaoEspecials { get; set; }
        public virtual DbSet<UsuarioSeguranca> UsuarioSegurancas { get; set; }
        public virtual DbSet<UsuarioTipoUsuario> UsuarioTipoUsuarios { get; set; }
        public virtual DbSet<ValorServico> ValorServicos { get; set; }
        public virtual DbSet<ValoresAutorizadaPo> ValoresAutorizadaPos { get; set; }
        public virtual DbSet<VariacaoEquipamento> VariacaoEquipamentos { get; set; }
        public virtual DbSet<VeiculoCombustivel> VeiculoCombustivels { get; set; }
        public virtual DbSet<Veloh> Velohs { get; set; }
        public virtual DbSet<View2> View2s { get; set; }
        public virtual DbSet<ViewRelatorio> ViewRelatorios { get; set; }
        public virtual DbSet<ViewReportOsDia01> ViewReportOsDia01s { get; set; }
        public virtual DbSet<ViewReportOsDia02> ViewReportOsDia02s { get; set; }
        public virtual DbSet<ViewReportOsDia03> ViewReportOsDia03s { get; set; }
        public virtual DbSet<ViewReportOsDia04> ViewReportOsDia04s { get; set; }
        public virtual DbSet<ViewReportOsDium> ViewReportOsDia { get; set; }
        public virtual DbSet<VioladosPosbanrisul> VioladosPosbanrisuls { get; set; }
        public virtual DbSet<VioladosPosbanrisulDesconsiderado> VioladosPosbanrisulDesconsiderados { get; set; }
        public virtual DbSet<VwCausa> VwCausas { get; set; }
        public virtual DbSet<VwChamadosUploadRatDigitalizadum> VwChamadosUploadRatDigitalizada { get; set; }
        public virtual DbSet<VwCodLogixContratoAtivo> VwCodLogixContratoAtivos { get; set; }
        public virtual DbSet<VwColaboradoresPonto> VwColaboradoresPontos { get; set; }
        public virtual DbSet<VwConsumo> VwConsumos { get; set; }
        public virtual DbSet<VwEstruturaPeca> VwEstruturaPecas { get; set; }
        public virtual DbSet<VwExportaChamado> VwExportaChamados { get; set; }
        public virtual DbSet<VwExportaChamadosArquivoMorto> VwExportaChamadosArquivoMortos { get; set; }
        public virtual DbSet<VwExportaEquipamento> VwExportaEquipamentos { get; set; }
        public virtual DbSet<VwExportacaoChamado> VwExportacaoChamados { get; set; }
        public virtual DbSet<VwExportacaoInstalaco> VwExportacaoInstalacoes { get; set; }
        public virtual DbSet<VwFechamentoBanrisul> VwFechamentoBanrisuls { get; set; }
        public virtual DbSet<VwForeignKey> VwForeignKeys { get; set; }
        public virtual DbSet<VwListaFilialComEquipamento> VwListaFilialComEquipamentos { get; set; }
        public virtual DbSet<VwListaUfComEquipamento> VwListaUfComEquipamentos { get; set; }
        public virtual DbSet<VwLocaisListagem> VwLocaisListagems { get; set; }
        public virtual DbSet<VwLogixEstoque> VwLogixEstoques { get; set; }
        public virtual DbSet<VwMtbfRegis1> VwMtbfRegis1s { get; set; }
        public virtual DbSet<VwMtbfRegis2> VwMtbfRegis2s { get; set; }
        public virtual DbSet<VwMtbfRegis3> VwMtbfRegis3s { get; set; }
        public virtual DbSet<VwOsPeca> VwOsPecas { get; set; }
        public virtual DbSet<VwPaisUfcidade> VwPaisUfcidades { get; set; }
        public virtual DbSet<VwPecaNailton2006> VwPecaNailton2006s { get; set; }
        public virtual DbSet<VwPedidoPeca> VwPedidoPecas { get; set; }
        public virtual DbSet<VwPedidoPecaComDesconto> VwPedidoPecaComDescontos { get; set; }
        public virtual DbSet<VwPedidoPecaComDescontoOld> VwPedidoPecaComDescontoOlds { get; set; }
        public virtual DbSet<VwPedidoPecaOld> VwPedidoPecaOlds { get; set; }
        public virtual DbSet<VwRelatorioGenerico> VwRelatorioGenericos { get; set; }
        public virtual DbSet<VwRelatorioGenericoAline> VwRelatorioGenericoAlines { get; set; }
        public virtual DbSet<VwRelatorioGenericoDadosDeConfiabilidadeComExtraMaquina> VwRelatorioGenericoDadosDeConfiabilidadeComExtraMaquinas { get; set; }
        public virtual DbSet<VwRelatorioGenericoEquipamentoContrato> VwRelatorioGenericoEquipamentoContratos { get; set; }
        public virtual DbSet<VwRelatorioGenericoPecasPendente> VwRelatorioGenericoPecasPendentes { get; set; }
        public virtual DbSet<VwRelatorioGenericoPendenciaPeca> VwRelatorioGenericoPendenciaPecas { get; set; }
        public virtual DbSet<VwRelatorioVandalismo> VwRelatorioVandalismos { get; set; }
        public virtual DbSet<VwRepasseAutorizadum> VwRepasseAutorizada { get; set; }
        public virtual DbSet<VwSarmento> VwSarmentos { get; set; }
        public virtual DbSet<VwSarmentoExportacaoChamado> VwSarmentoExportacaoChamados { get; set; }
        public virtual DbSet<VwSarmentoExportacaoEquipamento> VwSarmentoExportacaoEquipamentos { get; set; }
        public virtual DbSet<VwTarefa> VwTarefas { get; set; }
        public virtual DbSet<VwTarefasAberta> VwTarefasAbertas { get; set; }
        public virtual DbSet<VwTarefasFull> VwTarefasFulls { get; set; }
        public virtual DbSet<VwTarefasSla> VwTarefasSlas { get; set; }
        public virtual DbSet<VwTarefasSlaAux> VwTarefasSlaAuxes { get; set; }
        public virtual DbSet<VwTarefasSlaDesenvolvimento> VwTarefasSlaDesenvolvimentos { get; set; }
        public virtual DbSet<VwTarefasSlaDesenvolvimentoMonitoramento> VwTarefasSlaDesenvolvimentoMonitoramentos { get; set; }
        public virtual DbSet<VwTarefasSlaDesenvolvimentoOrdenado> VwTarefasSlaDesenvolvimentoOrdenados { get; set; }
        public virtual DbSet<VwTarefasSlaGraficoAberta> VwTarefasSlaGraficoAbertas { get; set; }
        public virtual DbSet<VwTarefasSlaGraficoConsolidado> VwTarefasSlaGraficoConsolidados { get; set; }
        public virtual DbSet<VwTarefasSlaGraficoDiario> VwTarefasSlaGraficoDiarios { get; set; }
        public virtual DbSet<VwTarefasSlaGraficoDiasRetorno> VwTarefasSlaGraficoDiasRetornos { get; set; }
        public virtual DbSet<VwTarefasSlaGraficoMensal> VwTarefasSlaGraficoMensals { get; set; }
        public virtual DbSet<VwTarefasSlaGraficoSemanal> VwTarefasSlaGraficoSemanals { get; set; }
        public virtual DbSet<VwTarefasStatusDium> VwTarefasStatusDia { get; set; }
        public virtual DbSet<VwcAlexandre> VwcAlexandres { get; set; }
        public virtual DbSet<VwcAline> VwcAlines { get; set; }
        public virtual DbSet<VwcAnalisadorEndereco> VwcAnalisadorEnderecos { get; set; }
        public virtual DbSet<VwcAnaliseBasa> VwcAnaliseBasas { get; set; }
        public virtual DbSet<VwcAnaliseBasa2> VwcAnaliseBasa2s { get; set; }
        public virtual DbSet<VwcAnaliseCaixa> VwcAnaliseCaixas { get; set; }
        public virtual DbSet<VwcAnaliseCaixa20062009> VwcAnaliseCaixa20062009s { get; set; }
        public virtual DbSet<VwcAnaliseCaixaCofre> VwcAnaliseCaixaCofres { get; set; }
        public virtual DbSet<VwcAnaliseCaixaContrato0077> VwcAnaliseCaixaContrato0077s { get; set; }
        public virtual DbSet<VwcAtendimento> VwcAtendimentos { get; set; }
        public virtual DbSet<VwcAuditoria> VwcAuditorias { get; set; }
        public virtual DbSet<VwcBuscaCodMagnu> VwcBuscaCodMagnus { get; set; }
        public virtual DbSet<VwcCaixa> VwcCaixas { get; set; }
        public virtual DbSet<VwcCalculaIndiceQuebra> VwcCalculaIndiceQuebras { get; set; }
        public virtual DbSet<VwcCalculaIndiceQuebra2> VwcCalculaIndiceQuebra2s { get; set; }
        public virtual DbSet<VwcCalculaParque> VwcCalculaParques { get; set; }
        public virtual DbSet<VwcCaminhoRatfoto> VwcCaminhoRatfotos { get; set; }
        public virtual DbSet<VwcCesarBessaExpChamado> VwcCesarBessaExpChamados { get; set; }
        public virtual DbSet<VwcCesarBessaExpEquipamento> VwcCesarBessaExpEquipamentos { get; set; }
        public virtual DbSet<VwcCesarBessaExportacaoChamados20152018> VwcCesarBessaExportacaoChamados20152018s { get; set; }
        public virtual DbSet<VwcChamadosAnual> VwcChamadosAnuals { get; set; }
        public virtual DbSet<VwcChamadosAnual2011> VwcChamadosAnual2011s { get; set; }
        public virtual DbSet<VwcChamadosPorDataHoraFechamento> VwcChamadosPorDataHoraFechamentos { get; set; }
        public virtual DbSet<VwcClienteLocalAtendimento> VwcClienteLocalAtendimentos { get; set; }
        public virtual DbSet<VwcCodTecnico> VwcCodTecnicos { get; set; }
        public virtual DbSet<VwcComparacaoPo> VwcComparacaoPos { get; set; }
        public virtual DbSet<VwcConsAdiantMediaDespesa> VwcConsAdiantMediaDespesas { get; set; }
        public virtual DbSet<VwcConsAdiantRd> VwcConsAdiantRds { get; set; }
        public virtual DbSet<VwcConsAdiantRdsPendente> VwcConsAdiantRdsPendentes { get; set; }
        public virtual DbSet<VwcConsumo> VwcConsumos { get; set; }
        public virtual DbSet<VwcContratoLogistica> VwcContratoLogisticas { get; set; }
        public virtual DbSet<VwcContratoModelo> VwcContratoModelos { get; set; }
        public virtual DbSet<VwcContratoSla> VwcContratoSlas { get; set; }
        public virtual DbSet<VwcDadosConfiabilidade> VwcDadosConfiabilidades { get; set; }
        public virtual DbSet<VwcDadosConfiabilidade2> VwcDadosConfiabilidade2s { get; set; }
        public virtual DbSet<VwcDadosConfiabilidade2Backup> VwcDadosConfiabilidade2Backups { get; set; }
        public virtual DbSet<VwcDadosConfiabilidade2Old2> VwcDadosConfiabilidade2Old2s { get; set; }
        public virtual DbSet<VwcDadosConfiabilidadeBackup> VwcDadosConfiabilidadeBackups { get; set; }
        public virtual DbSet<VwcDadosConfiabilidadeRetrofit> VwcDadosConfiabilidadeRetrofits { get; set; }
        public virtual DbSet<VwcDadosDashboard> VwcDadosDashboards { get; set; }
        public virtual DbSet<VwcDadosDashboardBackup> VwcDadosDashboardBackups { get; set; }
        public virtual DbSet<VwcDadosDashboardCliente> VwcDadosDashboardClientes { get; set; }
        public virtual DbSet<VwcDadosDashboardDisponibilidadeTechApp> VwcDadosDashboardDisponibilidadeTechApps { get; set; }
        public virtual DbSet<VwcDashboardChamadosAntigo> VwcDashboardChamadosAntigos { get; set; }
        public virtual DbSet<VwcDashboardLiderTecnico> VwcDashboardLiderTecnicos { get; set; }
        public virtual DbSet<VwcDashboardPerformance> VwcDashboardPerformances { get; set; }
        public virtual DbSet<VwcDashboardPerformanceGeral> VwcDashboardPerformanceGerals { get; set; }
        public virtual DbSet<VwcDashboardSpadado> VwcDashboardSpadados { get; set; }
        public virtual DbSet<VwcDefeito> VwcDefeitos { get; set; }
        public virtual DbSet<VwcDefeitoPeca> VwcDefeitoPecas { get; set; }
        public virtual DbSet<VwcDespesaItem> VwcDespesaItems { get; set; }
        public virtual DbSet<VwcDespesasFrotaTecnico> VwcDespesasFrotaTecnicos { get; set; }
        public virtual DbSet<VwcDespesasFrotaTecnicosPagamento> VwcDespesasFrotaTecnicosPagamentos { get; set; }
        public virtual DbSet<VwcDespesasTecnico> VwcDespesasTecnicos { get; set; }
        public virtual DbSet<VwcEmailReincidencium> VwcEmailReincidencia { get; set; }
        public virtual DbSet<VwcEnderecoSatCoordenadum> VwcEnderecoSatCoordenada { get; set; }
        public virtual DbSet<VwcEnderecosDespesa> VwcEnderecosDespesas { get; set; }
        public virtual DbSet<VwcEquipamentoContrato> VwcEquipamentoContratos { get; set; }
        public virtual DbSet<VwcEquipamentoContratoComSla> VwcEquipamentoContratoComSlas { get; set; }
        public virtual DbSet<VwcEquipamentoContratoComSladispBb> VwcEquipamentoContratoComSladispBbs { get; set; }
        public virtual DbSet<VwcEquipamentoContratoComSlaroselei> VwcEquipamentoContratoComSlaroseleis { get; set; }
        public virtual DbSet<VwcEquipamentosPo> VwcEquipamentosPos { get; set; }
        public virtual DbSet<VwcEstoqueTecnico> VwcEstoqueTecnicos { get; set; }
        public virtual DbSet<VwcEstoqueTecnico2> VwcEstoqueTecnico2s { get; set; }
        public virtual DbSet<VwcExportacaoChamadosCobra> VwcExportacaoChamadosCobras { get; set; }
        public virtual DbSet<VwcFilial> VwcFilials { get; set; }
        public virtual DbSet<VwcFinanceiroBanrisulPo> VwcFinanceiroBanrisulPos { get; set; }
        public virtual DbSet<VwcFrotaTecnico> VwcFrotaTecnicos { get; set; }
        public virtual DbSet<VwcFullTime1> VwcFullTime1s { get; set; }
        public virtual DbSet<VwcFullTime2> VwcFullTime2s { get; set; }
        public virtual DbSet<VwcGiane> VwcGianes { get; set; }
        public virtual DbSet<VwcGiane2> VwcGiane2s { get; set; }
        public virtual DbSet<VwcHistEquipamentoContrato> VwcHistEquipamentoContratos { get; set; }
        public virtual DbSet<VwcHistPeca> VwcHistPecas { get; set; }
        public virtual DbSet<VwcIndAtivo> VwcIndAtivos { get; set; }
        public virtual DbSet<VwcIndGarantium> VwcIndGarantia { get; set; }
        public virtual DbSet<VwcIndReceitum> VwcIndReceita { get; set; }
        public virtual DbSet<VwcIndRepasse> VwcIndRepasses { get; set; }
        public virtual DbSet<VwcIndicadoresLogisticaProgramadorFilial> VwcIndicadoresLogisticaProgramadorFilials { get; set; }
        public virtual DbSet<VwcInstalacao> VwcInstalacaos { get; set; }
        public virtual DbSet<VwcInstalacaoArqMorto> VwcInstalacaoArqMortos { get; set; }
        public virtual DbSet<VwcIntegracaoBb> VwcIntegracaoBbs { get; set; }
        public virtual DbSet<VwcIntegracaoBrbv2> VwcIntegracaoBrbv2s { get; set; }
        public virtual DbSet<VwcKitPadrao> VwcKitPadraos { get; set; }
        public virtual DbSet<VwcListaCodEquipPo> VwcListaCodEquipPos { get; set; }
        public virtual DbSet<VwcListaOssBloqueio> VwcListaOssBloqueios { get; set; }
        public virtual DbSet<VwcListaOssHistorico> VwcListaOssHistoricos { get; set; }
        public virtual DbSet<VwcListaRatdetalhesBloqueio> VwcListaRatdetalhesBloqueios { get; set; }
        public virtual DbSet<VwcListaRatdetalhesPecasBloqueio> VwcListaRatdetalhesPecasBloqueios { get; set; }
        public virtual DbSet<VwcListaRatsBloqueio> VwcListaRatsBloqueios { get; set; }
        public virtual DbSet<VwcLogAlertum> VwcLogAlerta { get; set; }
        public virtual DbSet<VwcLogServico> VwcLogServicos { get; set; }
        public virtual DbSet<VwcLogisticaBackUpTecnico> VwcLogisticaBackUpTecnicos { get; set; }
        public virtual DbSet<VwcLogisticaEstrutura> VwcLogisticaEstruturas { get; set; }
        public virtual DbSet<VwcLogisticaItemBackup> VwcLogisticaItemBackups { get; set; }
        public virtual DbSet<VwcLogisticaItemParque> VwcLogisticaItemParques { get; set; }
        public virtual DbSet<VwcLogisticaListaTecnico> VwcLogisticaListaTecnicos { get; set; }
        public virtual DbSet<VwcLogisticaTecnico> VwcLogisticaTecnicos { get; set; }
        public virtual DbSet<VwcLogixBackUpTecnico> VwcLogixBackUpTecnicos { get; set; }
        public virtual DbSet<VwcLogixConsumo> VwcLogixConsumos { get; set; }
        public virtual DbSet<VwcLogixConsumoTotal> VwcLogixConsumoTotals { get; set; }
        public virtual DbSet<VwcLogixEstoque> VwcLogixEstoques { get; set; }
        public virtual DbSet<VwcLogixEstoqueGeral> VwcLogixEstoqueGerals { get; set; }
        public virtual DbSet<VwcLogixEstoqueMinimoTecnico> VwcLogixEstoqueMinimoTecnicos { get; set; }
        public virtual DbSet<VwcLogixEstoqueTecnico> VwcLogixEstoqueTecnicos { get; set; }
        public virtual DbSet<VwcLogixEstoqueTecnicoFull> VwcLogixEstoqueTecnicoFulls { get; set; }
        public virtual DbSet<VwcLogixEstoqueTecnicoOld> VwcLogixEstoqueTecnicoOlds { get; set; }
        public virtual DbSet<VwcLogixEstoqueTecnicoOld2> VwcLogixEstoqueTecnicoOld2s { get; set; }
        public virtual DbSet<VwcLogixEstoqueTecnicoTotal> VwcLogixEstoqueTecnicoTotals { get; set; }
        public virtual DbSet<VwcMaicon> VwcMaicons { get; set; }
        public virtual DbSet<VwcModeloPosBanrisul> VwcModeloPosBanrisuls { get; set; }
        public virtual DbSet<VwcMonitoramentoTempoAberturaChamadoCliente> VwcMonitoramentoTempoAberturaChamadoClientes { get; set; }
        public virtual DbSet<VwcMtbf1> VwcMtbf1s { get; set; }
        public virtual DbSet<VwcMtbf11> VwcMtbf1s1 { get; set; }
        public virtual DbSet<VwcMtbf2> VwcMtbf2s { get; set; }
        public virtual DbSet<VwcMultaCef> VwcMultaCefs { get; set; }
        public virtual DbSet<VwcMultaCef2> VwcMultaCef2s { get; set; }
        public virtual DbSet<VwcMultaCefMaio> VwcMultaCefMaios { get; set; }
        public virtual DbSet<VwcO> VwcOs { get; set; }
        public virtual DbSet<VwcOrdemServico> VwcOrdemServicos { get; set; }
        public virtual DbSet<VwcOrdemServicoAtendidum> VwcOrdemServicoAtendida { get; set; }
        public virtual DbSet<VwcOsClienteCoordenadorContrato> VwcOsClienteCoordenadorContratos { get; set; }
        public virtual DbSet<VwcOsFechadasNetbookMesAtual> VwcOsFechadasNetbookMesAtuals { get; set; }
        public virtual DbSet<VwcOsNew> VwcOsNews { get; set; }
        public virtual DbSet<VwcOsreincidenciaNew> VwcOsreincidenciaNews { get; set; }
        public virtual DbSet<VwcOsreincidencium> VwcOsreincidencia { get; set; }
        public virtual DbSet<VwcOsrencidencium> VwcOsrencidencia { get; set; }
        public virtual DbSet<VwcParqueO> VwcParqueOs { get; set; }
        public virtual DbSet<VwcParqueOs2> VwcParqueOs2s { get; set; }
        public virtual DbSet<VwcParqueOsperformance> VwcParqueOsperformances { get; set; }
        public virtual DbSet<VwcParqueOsperformance2> VwcParqueOsperformance2s { get; set; }
        public virtual DbSet<VwcParqueOsperformanceAnual> VwcParqueOsperformanceAnuals { get; set; }
        public virtual DbSet<VwcParqueResumo> VwcParqueResumos { get; set; }
        public virtual DbSet<VwcParqueResumoPerformance> VwcParqueResumoPerformances { get; set; }
        public virtual DbSet<VwcParqueResumoPerformance2> VwcParqueResumoPerformance2s { get; set; }
        public virtual DbSet<VwcParqueResumoPerformanceAnual> VwcParqueResumoPerformanceAnuals { get; set; }
        public virtual DbSet<VwcPatRegiao> VwcPatRegiaos { get; set; }
        public virtual DbSet<VwcPeca> VwcPecas { get; set; }
        public virtual DbSet<VwcPendenciaFiliaisDashboard> VwcPendenciaFiliaisDashboards { get; set; }
        public virtual DbSet<VwcPendenciaFiliaisDashboardBackup> VwcPendenciaFiliaisDashboardBackups { get; set; }
        public virtual DbSet<VwcPendenciasIvanKatium> VwcPendenciasIvanKatia { get; set; }
        public virtual DbSet<VwcPendenciasTecnicoFrotum> VwcPendenciasTecnicoFrota { get; set; }
        public virtual DbSet<VwcPercentualQuebraParque> VwcPercentualQuebraParques { get; set; }
        public virtual DbSet<VwcPercentualQuebraParqueIndicador> VwcPercentualQuebraParqueIndicadors { get; set; }
        public virtual DbSet<VwcPercentualQuebraParqueIndicadorNew> VwcPercentualQuebraParqueIndicadorNews { get; set; }
        public virtual DbSet<VwcPerformance10indicesRegiao> VwcPerformance10indicesRegiaos { get; set; }
        public virtual DbSet<VwcPerformance10indicesRegiaoDadosCongelado> VwcPerformance10indicesRegiaoDadosCongelados { get; set; }
        public virtual DbSet<VwcPerformance10indicesRegiaoFilial> VwcPerformance10indicesRegiaoFilials { get; set; }
        public virtual DbSet<VwcPerformance10indicesRegiaoReincidenciaFilial> VwcPerformance10indicesRegiaoReincidenciaFilials { get; set; }
        public virtual DbSet<VwcPerformance10indicesRegiaoReincidencium> VwcPerformance10indicesRegiaoReincidencia { get; set; }
        public virtual DbSet<VwcPerformanceMtbf1> VwcPerformanceMtbf1s { get; set; }
        public virtual DbSet<VwcPonto> VwcPontos { get; set; }
        public virtual DbSet<VwcPrevisaoFaturamento> VwcPrevisaoFaturamentos { get; set; }
        public virtual DbSet<VwcProdutividadeTecnico> VwcProdutividadeTecnicos { get; set; }
        public virtual DbSet<VwcProdutividadeTecnicosMesAtual> VwcProdutividadeTecnicosMesAtuals { get; set; }
        public virtual DbSet<VwcProdutividadeTecnicosTodoPeriodo> VwcProdutividadeTecnicosTodoPeriodos { get; set; }
        public virtual DbSet<VwcRat> VwcRats { get; set; }
        public virtual DbSet<VwcRatOtimizadum> VwcRatOtimizada { get; set; }
        public virtual DbSet<VwcRatbrb> VwcRatbrbs { get; set; }
        public virtual DbSet<VwcRebateRedutor> VwcRebateRedutors { get; set; }
        public virtual DbSet<VwcReenvioCef> VwcReenvioCefs { get; set; }
        public virtual DbSet<VwcReincidenciaFiliaisDashboard> VwcReincidenciaFiliaisDashboards { get; set; }
        public virtual DbSet<VwcReincidenciaFiliaisDashboardBackup> VwcReincidenciaFiliaisDashboardBackups { get; set; }
        public virtual DbSet<VwcReincidenciaLab> VwcReincidenciaLabs { get; set; }
        public virtual DbSet<VwcReincidenciaTecnicosTop20> VwcReincidenciaTecnicosTop20s { get; set; }
        public virtual DbSet<VwcRelAline> VwcRelAlines { get; set; }
        public virtual DbSet<VwcRelAnaliseBasa> VwcRelAnaliseBasas { get; set; }
        public virtual DbSet<VwcRelAnaliseBasa2> VwcRelAnaliseBasa2s { get; set; }
        public virtual DbSet<VwcRelAnaliseCaixa> VwcRelAnaliseCaixas { get; set; }
        public virtual DbSet<VwcRelAnaliseCaixaCofre> VwcRelAnaliseCaixaCofres { get; set; }
        public virtual DbSet<VwcRelAnaliseCaixaContrato0077> VwcRelAnaliseCaixaContrato0077s { get; set; }
        public virtual DbSet<VwcRelAugusto> VwcRelAugustos { get; set; }
        public virtual DbSet<VwcRelDaniela> VwcRelDanielas { get; set; }
        public virtual DbSet<VwcRelDefeitoPo> VwcRelDefeitoPos { get; set; }
        public virtual DbSet<VwcRelDefeitoPosHelp> VwcRelDefeitoPosHelps { get; set; }
        public virtual DbSet<VwcRelDefeitoPosHelp60> VwcRelDefeitoPosHelp60s { get; set; }
        public virtual DbSet<VwcRelDefeitoPosHelpRelVolnei> VwcRelDefeitoPosHelpRelVolneis { get; set; }
        public virtual DbSet<VwcRelDefeitoPosVeloh3> VwcRelDefeitoPosVeloh3s { get; set; }
        public virtual DbSet<VwcRelDefeitoPosVeloh3Help> VwcRelDefeitoPosVeloh3Helps { get; set; }
        public virtual DbSet<VwcRelDefeitoPosVeloh3Help60> VwcRelDefeitoPosVeloh3Help60s { get; set; }
        public virtual DbSet<VwcRelDefeitoPosVelohC> VwcRelDefeitoPosVelohCs { get; set; }
        public virtual DbSet<VwcRelDefeitoPosVelohCHelp> VwcRelDefeitoPosVelohCHelps { get; set; }
        public virtual DbSet<VwcRelDefeitoPosVelohCHelp60> VwcRelDefeitoPosVelohCHelp60s { get; set; }
        public virtual DbSet<VwcRelDefeitoPosVelohW> VwcRelDefeitoPosVelohWs { get; set; }
        public virtual DbSet<VwcRelDefeitoPosVelohWHelp> VwcRelDefeitoPosVelohWHelps { get; set; }
        public virtual DbSet<VwcRelDefeitoPosVelohWHelp60> VwcRelDefeitoPosVelohWHelp60s { get; set; }
        public virtual DbSet<VwcRelEder> VwcRelEders { get; set; }
        public virtual DbSet<VwcRelElaine> VwcRelElaines { get; set; }
        public virtual DbSet<VwcRelFilialPr> VwcRelFilialPrs { get; set; }
        public virtual DbSet<VwcRelGv> VwcRelGvs { get; set; }
        public virtual DbSet<VwcRelMultaCef> VwcRelMultaCefs { get; set; }
        public virtual DbSet<VwcRelMultaCef2> VwcRelMultaCef2s { get; set; }
        public virtual DbSet<VwcRelRegi> VwcRelRegis { get; set; }
        public virtual DbSet<VwcRelRegisBanrisul> VwcRelRegisBanrisuls { get; set; }
        public virtual DbSet<VwcRelRegisBb> VwcRelRegisBbs { get; set; }
        public virtual DbSet<VwcRelSilmara> VwcRelSilmaras { get; set; }
        public virtual DbSet<VwcRelSlaCefMesAnterior> VwcRelSlaCefMesAnteriors { get; set; }
        public virtual DbSet<VwcRelVwcAnaliseCaixa20062009> VwcRelVwcAnaliseCaixa20062009s { get; set; }
        public virtual DbSet<VwcRelVwcMultaCefMaio> VwcRelVwcMultaCefMaios { get; set; }
        public virtual DbSet<VwcRelatorioDescricao> VwcRelatorioDescricaos { get; set; }
        public virtual DbSet<VwcRelatorioDetalhadoChamado> VwcRelatorioDetalhadoChamados { get; set; }
        public virtual DbSet<VwcRelatorioFalhasAlexandre> VwcRelatorioFalhasAlexandres { get; set; }
        public virtual DbSet<VwcRelatorioFalhasAlexandreSintetico> VwcRelatorioFalhasAlexandreSinteticos { get; set; }
        public virtual DbSet<VwcRelatorioLocaisPo> VwcRelatorioLocaisPos { get; set; }
        public virtual DbSet<VwcRelatorioLocaisPostotal> VwcRelatorioLocaisPostotals { get; set; }
        public virtual DbSet<VwcRelatorioRatsTensaoTerraNeutro> VwcRelatorioRatsTensaoTerraNeutros { get; set; }
        public virtual DbSet<VwcReportingAtendimentosBrb> VwcReportingAtendimentosBrbs { get; set; }
        public virtual DbSet<VwcReportingBanrisulChamadosOrcamento> VwcReportingBanrisulChamadosOrcamentos { get; set; }
        public virtual DbSet<VwcReportingBanrisulContrato> VwcReportingBanrisulContratos { get; set; }
        public virtual DbSet<VwcReportingBanrisulSla> VwcReportingBanrisulSlas { get; set; }
        public virtual DbSet<VwcReportingBanrisulSla52> VwcReportingBanrisulSla52s { get; set; }
        public virtual DbSet<VwcReportingBanrisulSla52PosVeloh> VwcReportingBanrisulSla52PosVelohs { get; set; }
        public virtual DbSet<VwcReportingBasaSla> VwcReportingBasaSlas { get; set; }
        public virtual DbSet<VwcReportingBbSla> VwcReportingBbSlas { get; set; }
        public virtual DbSet<VwcReportingBbdSla> VwcReportingBbdSlas { get; set; }
        public virtual DbSet<VwcReportingBnbGraficoSla> VwcReportingBnbGraficoSlas { get; set; }
        public virtual DbSet<VwcReportingBnbSla> VwcReportingBnbSlas { get; set; }
        public virtual DbSet<VwcReportingBrbSla> VwcReportingBrbSlas { get; set; }
        public virtual DbSet<VwcReportingCefGrafico5853> VwcReportingCefGrafico5853s { get; set; }
        public virtual DbSet<VwcReportingCefGrafico5855> VwcReportingCefGrafico5855s { get; set; }
        public virtual DbSet<VwcReportingCefGraficoSla> VwcReportingCefGraficoSlas { get; set; }
        public virtual DbSet<VwcReportingCefSla> VwcReportingCefSlas { get; set; }
        public virtual DbSet<VwcReportingCefSla58535855> VwcReportingCefSla58535855s { get; set; }
        public virtual DbSet<VwcReportingCefSlaContrato1> VwcReportingCefSlaContrato1s { get; set; }
        public virtual DbSet<VwcReportingCefSlaContrato3> VwcReportingCefSlaContrato3s { get; set; }
        public virtual DbSet<VwcReportingCobraDispBbSla> VwcReportingCobraDispBbSlas { get; set; }
        public virtual DbSet<VwcReportingCobraGraficoSla> VwcReportingCobraGraficoSlas { get; set; }
        public virtual DbSet<VwcReportingCobraGraficoSla2> VwcReportingCobraGraficoSla2s { get; set; }
        public virtual DbSet<VwcReportingCobraRelatorioComparacao> VwcReportingCobraRelatorioComparacaos { get; set; }
        public virtual DbSet<VwcReportingCobraSla> VwcReportingCobraSlas { get; set; }
        public virtual DbSet<VwcReportingCobraSlaComparacao> VwcReportingCobraSlaComparacaos { get; set; }
        public virtual DbSet<VwcReportingCobraSlaComparacao2> VwcReportingCobraSlaComparacao2s { get; set; }
        public virtual DbSet<VwcReportingCobraSlaComparacao2MesAnterior> VwcReportingCobraSlaComparacao2MesAnteriors { get; set; }
        public virtual DbSet<VwcReportingCobraSlaComparacao2Old> VwcReportingCobraSlaComparacao2Olds { get; set; }
        public virtual DbSet<VwcReportingCobraSlaComparacao2ParqueResumo> VwcReportingCobraSlaComparacao2ParqueResumos { get; set; }
        public virtual DbSet<VwcReportingCobraSlaComparacao3> VwcReportingCobraSlaComparacao3s { get; set; }
        public virtual DbSet<VwcReportingCobraSlaComparacaoAut> VwcReportingCobraSlaComparacaoAuts { get; set; }
        public virtual DbSet<VwcReportingCobraSlaComparacaoAutOld> VwcReportingCobraSlaComparacaoAutOlds { get; set; }
        public virtual DbSet<VwcReportingCorreiosSla> VwcReportingCorreiosSlas { get; set; }
        public virtual DbSet<VwcReportingDigiconSla> VwcReportingDigiconSlas { get; set; }
        public virtual DbSet<VwcReportingHsbcSla> VwcReportingHsbcSlas { get; set; }
        public virtual DbSet<VwcReportingIndiceDeAtendimento> VwcReportingIndiceDeAtendimentos { get; set; }
        public virtual DbSet<VwcReportingIndiceDeAtendimento2> VwcReportingIndiceDeAtendimento2s { get; set; }
        public virtual DbSet<VwcReportingIndiceDePecasPendente> VwcReportingIndiceDePecasPendentes { get; set; }
        public virtual DbSet<VwcReportingIndiceDePecasPendentesGeovane> VwcReportingIndiceDePecasPendentesGeovanes { get; set; }
        public virtual DbSet<VwcReportingIndiceDePecasPendentesSlide> VwcReportingIndiceDePecasPendentesSlides { get; set; }
        public virtual DbSet<VwcReportingIndiceDePecasPendentesSlideOld> VwcReportingIndiceDePecasPendentesSlideOlds { get; set; }
        public virtual DbSet<VwcReportingIndiceDeQuebra> VwcReportingIndiceDeQuebras { get; set; }
        public virtual DbSet<VwcReportingIndiceDeReincidencia2> VwcReportingIndiceDeReincidencia2s { get; set; }
        public virtual DbSet<VwcReportingIndiceDeReincidenciaIndicador> VwcReportingIndiceDeReincidenciaIndicadors { get; set; }
        public virtual DbSet<VwcReportingIndiceDeReincidenciaMarco> VwcReportingIndiceDeReincidenciaMarcos { get; set; }
        public virtual DbSet<VwcReportingIndiceDeReincidenciaMesAnterior> VwcReportingIndiceDeReincidenciaMesAnteriors { get; set; }
        public virtual DbSet<VwcReportingIndiceDeReincidenciaSlide> VwcReportingIndiceDeReincidenciaSlides { get; set; }
        public virtual DbSet<VwcReportingIndiceDeReincidenciaSlide7dia> VwcReportingIndiceDeReincidenciaSlide7dias { get; set; }
        public virtual DbSet<VwcReportingIndiceDeReincidenciaSlideNew> VwcReportingIndiceDeReincidenciaSlideNews { get; set; }
        public virtual DbSet<VwcReportingIndiceDeReincidenciaTecnico> VwcReportingIndiceDeReincidenciaTecnicos { get; set; }
        public virtual DbSet<VwcReportingIndiceDeReincidencium> VwcReportingIndiceDeReincidencia { get; set; }
        public virtual DbSet<VwcReportingIndiceDeSolucao> VwcReportingIndiceDeSolucaos { get; set; }
        public virtual DbSet<VwcReportingOlavo> VwcReportingOlavos { get; set; }
        public virtual DbSet<VwcReportingParqueResumo> VwcReportingParqueResumos { get; set; }
        public virtual DbSet<VwcReportingParqueResumo2> VwcReportingParqueResumo2s { get; set; }
        public virtual DbSet<VwcReportingParqueResumoChamadosPeriodo> VwcReportingParqueResumoChamadosPeriodos { get; set; }
        public virtual DbSet<VwcReportingParqueResumoIten> VwcReportingParqueResumoItens { get; set; }
        public virtual DbSet<VwcReportingSaquePagueContrato> VwcReportingSaquePagueContratos { get; set; }
        public virtual DbSet<VwcReportingSicrediSla24> VwcReportingSicrediSla24s { get; set; }
        public virtual DbSet<VwcReportingSicrediSla48> VwcReportingSicrediSla48s { get; set; }
        public virtual DbSet<VwcReportingSicrediSla72> VwcReportingSicrediSla72s { get; set; }
        public virtual DbSet<VwcReportingSicrediSlaNãoUsado> VwcReportingSicrediSlaNãoUsados { get; set; }
        public virtual DbSet<VwcReportingSilmara> VwcReportingSilmaras { get; set; }
        public virtual DbSet<VwcReportingSla17Bancoob> VwcReportingSla17Bancoobs { get; set; }
        public virtual DbSet<VwcReportingSla17Dicico> VwcReportingSla17Dicicos { get; set; }
        public virtual DbSet<VwcReportingSla17Hering> VwcReportingSla17Herings { get; set; }
        public virtual DbSet<VwcReportingSla17Tendtudo> VwcReportingSla17Tendtudos { get; set; }
        public virtual DbSet<VwcRoboGoogleBuscaEnderecosAleatorio> VwcRoboGoogleBuscaEnderecosAleatorios { get; set; }
        public virtual DbSet<VwcRoboGoogleBuscaEnderecosSemCoordenada> VwcRoboGoogleBuscaEnderecosSemCoordenadas { get; set; }
        public virtual DbSet<VwcSatMobileAppVersao> VwcSatMobileAppVersaos { get; set; }
        public virtual DbSet<VwcSilmara> VwcSilmaras { get; set; }
        public virtual DbSet<VwcSilmaraErro> VwcSilmaraErros { get; set; }
        public virtual DbSet<VwcSimCardLivre> VwcSimCardLivres { get; set; }
        public virtual DbSet<VwcSla> VwcSlas { get; set; }
        public virtual DbSet<VwcSla1> VwcSla1s { get; set; }
        public virtual DbSet<VwcSla2> VwcSla2s { get; set; }
        public virtual DbSet<VwcSla3> VwcSla3s { get; set; }
        public virtual DbSet<VwcSlaCefMesAnterior> VwcSlaCefMesAnteriors { get; set; }
        public virtual DbSet<VwcSlaCefMêsAnterior> VwcSlaCefMêsAnteriors { get; set; }
        public virtual DbSet<VwcSqlMaribelStn> VwcSqlMaribelStns { get; set; }
        public virtual DbSet<VwcTarefa> VwcTarefas { get; set; }
        public virtual DbSet<VwcTarefasCristiano> VwcTarefasCristianos { get; set; }
        public virtual DbSet<VwcTecnico> VwcTecnicos { get; set; }
        public virtual DbSet<VwcTecnicoComDetalhe> VwcTecnicoComDetalhes { get; set; }
        public virtual DbSet<VwcTecnicoMediaAtend> VwcTecnicoMediaAtends { get; set; }
        public virtual DbSet<VwcTecnicoReincidencia2> VwcTecnicoReincidencia2s { get; set; }
        public virtual DbSet<VwcTecnicoReincidenciaNew> VwcTecnicoReincidenciaNews { get; set; }
        public virtual DbSet<VwcTecnicoReincidenciaTeste> VwcTecnicoReincidenciaTestes { get; set; }
        public virtual DbSet<VwcTecnicoReincidenciaTeste1> VwcTecnicoReincidenciaTestes1 { get; set; }
        public virtual DbSet<VwcTecnicoReincidencium> VwcTecnicoReincidencia { get; set; }
        public virtual DbSet<VwcTecnicosDisponibilidade> VwcTecnicosDisponibilidades { get; set; }
        public virtual DbSet<VwcTecnicosSat> VwcTecnicosSats { get; set; }
        public virtual DbSet<VwcTeste> VwcTestes { get; set; }
        public virtual DbSet<VwcTipoCausaEstrutura> VwcTipoCausaEstruturas { get; set; }
        public virtual DbSet<VwcTmpMonitoramento22> VwcTmpMonitoramento22s { get; set; }
        public virtual DbSet<VwcTmpMonitoramento23> VwcTmpMonitoramento23s { get; set; }
        public virtual DbSet<VwcTmpMonitoramento25> VwcTmpMonitoramento25s { get; set; }
        public virtual DbSet<VwcTmpMonitoramento26> VwcTmpMonitoramento26s { get; set; }
        public virtual DbSet<VwcTmpMonitoramento27> VwcTmpMonitoramento27s { get; set; }
        public virtual DbSet<VwcTmpMonitoramento28> VwcTmpMonitoramento28s { get; set; }
        public virtual DbSet<VwcTmpMonitoramento29> VwcTmpMonitoramento29s { get; set; }
        public virtual DbSet<VwcTmpMonitoramento30> VwcTmpMonitoramento30s { get; set; }
        public virtual DbSet<VwcTmpMonitoramento31> VwcTmpMonitoramento31s { get; set; }
        public virtual DbSet<VwcTmpMonitoramento33> VwcTmpMonitoramento33s { get; set; }
        public virtual DbSet<VwcTmpMonitoramento34> VwcTmpMonitoramento34s { get; set; }
        public virtual DbSet<VwcTmpMonitoramento35> VwcTmpMonitoramento35s { get; set; }
        public virtual DbSet<VwcTmpMonitoramento36> VwcTmpMonitoramento36s { get; set; }
        public virtual DbSet<VwcTmpMonitoramento37> VwcTmpMonitoramento37s { get; set; }
        public virtual DbSet<VwcTmpMonitoramento38> VwcTmpMonitoramento38s { get; set; }
        public virtual DbSet<VwcTmpMonitoramento39> VwcTmpMonitoramento39s { get; set; }
        public virtual DbSet<VwcTmpMonitoramento40> VwcTmpMonitoramento40s { get; set; }
        public virtual DbSet<VwcTmpMonitoramento41> VwcTmpMonitoramento41s { get; set; }
        public virtual DbSet<VwcTmpMonitoramento42> VwcTmpMonitoramento42s { get; set; }
        public virtual DbSet<VwcTmpMonitoramento43> VwcTmpMonitoramento43s { get; set; }
        public virtual DbSet<VwcTmpMonitoramento44> VwcTmpMonitoramento44s { get; set; }
        public virtual DbSet<VwcTmpMonitoramento45> VwcTmpMonitoramento45s { get; set; }
        public virtual DbSet<VwcTmpMonitoramentoCaminho22> VwcTmpMonitoramentoCaminho22s { get; set; }
        public virtual DbSet<VwcTmpMonitoramentoCaminho23> VwcTmpMonitoramentoCaminho23s { get; set; }
        public virtual DbSet<VwcTmpMonitoramentoCaminho25> VwcTmpMonitoramentoCaminho25s { get; set; }
        public virtual DbSet<VwcTmpMonitoramentoCaminho26> VwcTmpMonitoramentoCaminho26s { get; set; }
        public virtual DbSet<VwcTmpMonitoramentoCaminho27> VwcTmpMonitoramentoCaminho27s { get; set; }
        public virtual DbSet<VwcTmpMonitoramentoCaminho28> VwcTmpMonitoramentoCaminho28s { get; set; }
        public virtual DbSet<VwcTmpMonitoramentoCaminho29> VwcTmpMonitoramentoCaminho29s { get; set; }
        public virtual DbSet<VwcTmpMonitoramentoCaminho30> VwcTmpMonitoramentoCaminho30s { get; set; }
        public virtual DbSet<VwcTmpMonitoramentoCaminho31> VwcTmpMonitoramentoCaminho31s { get; set; }
        public virtual DbSet<VwcTmpMonitoramentoCaminho33> VwcTmpMonitoramentoCaminho33s { get; set; }
        public virtual DbSet<VwcTmpMonitoramentoCaminho34> VwcTmpMonitoramentoCaminho34s { get; set; }
        public virtual DbSet<VwcTmpMonitoramentoCaminho35> VwcTmpMonitoramentoCaminho35s { get; set; }
        public virtual DbSet<VwcTmpMonitoramentoCaminho36> VwcTmpMonitoramentoCaminho36s { get; set; }
        public virtual DbSet<VwcTmpMonitoramentoCaminho37> VwcTmpMonitoramentoCaminho37s { get; set; }
        public virtual DbSet<VwcTmpMonitoramentoCaminho38> VwcTmpMonitoramentoCaminho38s { get; set; }
        public virtual DbSet<VwcTmpMonitoramentoCaminho39> VwcTmpMonitoramentoCaminho39s { get; set; }
        public virtual DbSet<VwcTmpMonitoramentoCaminho40> VwcTmpMonitoramentoCaminho40s { get; set; }
        public virtual DbSet<VwcTmpMonitoramentoCaminho41> VwcTmpMonitoramentoCaminho41s { get; set; }
        public virtual DbSet<VwcTmpMonitoramentoCaminho42> VwcTmpMonitoramentoCaminho42s { get; set; }
        public virtual DbSet<VwcTmpMonitoramentoCaminho43> VwcTmpMonitoramentoCaminho43s { get; set; }
        public virtual DbSet<VwcTmpMonitoramentoCaminho44> VwcTmpMonitoramentoCaminho44s { get; set; }
        public virtual DbSet<VwcTmpMonitoramentoCaminho45> VwcTmpMonitoramentoCaminho45s { get; set; }
        public virtual DbSet<VwcTotalSlaBancoob> VwcTotalSlaBancoobs { get; set; }
        public virtual DbSet<VwcTotalSlaBancoobFilial> VwcTotalSlaBancoobFilials { get; set; }
        public virtual DbSet<VwcTotalSlaBanestesFilial> VwcTotalSlaBanestesFilials { get; set; }
        public virtual DbSet<VwcTotalSlaBanrisul> VwcTotalSlaBanrisuls { get; set; }
        public virtual DbSet<VwcTotalSlaBanrisulFilial> VwcTotalSlaBanrisulFilials { get; set; }
        public virtual DbSet<VwcTotalSlaBasa> VwcTotalSlaBasas { get; set; }
        public virtual DbSet<VwcTotalSlaBasaFilial> VwcTotalSlaBasaFilials { get; set; }
        public virtual DbSet<VwcTotalSlaBb> VwcTotalSlaBbs { get; set; }
        public virtual DbSet<VwcTotalSlaBbFilial> VwcTotalSlaBbFilials { get; set; }
        public virtual DbSet<VwcTotalSlaBbd> VwcTotalSlaBbds { get; set; }
        public virtual DbSet<VwcTotalSlaBbdFilial> VwcTotalSlaBbdFilials { get; set; }
        public virtual DbSet<VwcTotalSlaBnb> VwcTotalSlaBnbs { get; set; }
        public virtual DbSet<VwcTotalSlaBnbFilial> VwcTotalSlaBnbFilials { get; set; }
        public virtual DbSet<VwcTotalSlaBrb> VwcTotalSlaBrbs { get; set; }
        public virtual DbSet<VwcTotalSlaBrbFilial> VwcTotalSlaBrbFilials { get; set; }
        public virtual DbSet<VwcTotalSlaBrinksFilial> VwcTotalSlaBrinksFilials { get; set; }
        public virtual DbSet<VwcTotalSlaBrmallsFilial> VwcTotalSlaBrmallsFilials { get; set; }
        public virtual DbSet<VwcTotalSlaCef> VwcTotalSlaCefs { get; set; }
        public virtual DbSet<VwcTotalSlaCefFilial> VwcTotalSlaCefFilials { get; set; }
        public virtual DbSet<VwcTotalSlaCobra> VwcTotalSlaCobras { get; set; }
        public virtual DbSet<VwcTotalSlaCobraFilial> VwcTotalSlaCobraFilials { get; set; }
        public virtual DbSet<VwcTotalSlaCorreio> VwcTotalSlaCorreios { get; set; }
        public virtual DbSet<VwcTotalSlaCorreiosFilial> VwcTotalSlaCorreiosFilials { get; set; }
        public virtual DbSet<VwcTotalSlaDdtotalFilial> VwcTotalSlaDdtotalFilials { get; set; }
        public virtual DbSet<VwcTotalSlaDicico> VwcTotalSlaDicicos { get; set; }
        public virtual DbSet<VwcTotalSlaDicicoFilial> VwcTotalSlaDicicoFilials { get; set; }
        public virtual DbSet<VwcTotalSlaDigicon> VwcTotalSlaDigicons { get; set; }
        public virtual DbSet<VwcTotalSlaDigiconFilial> VwcTotalSlaDigiconFilials { get; set; }
        public virtual DbSet<VwcTotalSlaGideFilial> VwcTotalSlaGideFilials { get; set; }
        public virtual DbSet<VwcTotalSlaHering> VwcTotalSlaHerings { get; set; }
        public virtual DbSet<VwcTotalSlaHeringFilial> VwcTotalSlaHeringFilials { get; set; }
        public virtual DbSet<VwcTotalSlaHsbcFilial> VwcTotalSlaHsbcFilials { get; set; }
        public virtual DbSet<VwcTotalSlaMetrorioFilial> VwcTotalSlaMetrorioFilials { get; set; }
        public virtual DbSet<VwcTotalSlaMetrospFilial> VwcTotalSlaMetrospFilials { get; set; }
        public virtual DbSet<VwcTotalSlaMultiplanFilial> VwcTotalSlaMultiplanFilials { get; set; }
        public virtual DbSet<VwcTotalSlaNeposFilial> VwcTotalSlaNeposFilials { get; set; }
        public virtual DbSet<VwcTotalSlaProsegurFilial> VwcTotalSlaProsegurFilials { get; set; }
        public virtual DbSet<VwcTotalSlaRiachueloFilial> VwcTotalSlaRiachueloFilials { get; set; }
        public virtual DbSet<VwcTotalSlaRiocardFilial> VwcTotalSlaRiocardFilials { get; set; }
        public virtual DbSet<VwcTotalSlaSetranspFilial> VwcTotalSlaSetranspFilials { get; set; }
        public virtual DbSet<VwcTotalSlaSicredi> VwcTotalSlaSicredis { get; set; }
        public virtual DbSet<VwcTotalSlaSicrediFilial> VwcTotalSlaSicrediFilials { get; set; }
        public virtual DbSet<VwcTotalSlaStvFilial> VwcTotalSlaStvFilials { get; set; }
        public virtual DbSet<VwcTotalSlaTendtudo> VwcTotalSlaTendtudos { get; set; }
        public virtual DbSet<VwcTotalSlaTendtudoFilial> VwcTotalSlaTendtudoFilials { get; set; }
        public virtual DbSet<VwcTotalSlaVarejoFilial> VwcTotalSlaVarejoFilials { get; set; }
        public virtual DbSet<VwcTotalSlaWpsFilial> VwcTotalSlaWpsFilials { get; set; }
        public virtual DbSet<VwcTotalSlaZaffariFilial> VwcTotalSlaZaffariFilials { get; set; }
        public virtual DbSet<VwcTrocaSubstituicaoPeca> VwcTrocaSubstituicaoPecas { get; set; }
        public virtual DbSet<VwcUsuarioAtivo> VwcUsuarioAtivos { get; set; }
        public virtual DbSet<VwcVwcEquipamentosPo> VwcVwcEquipamentosPos { get; set; }
        public virtual DbSet<VwmRelDefeitoPos2> VwmRelDefeitoPos2s { get; set; }
        public virtual DbSet<VwmRelDefeitoPos2Veloh3> VwmRelDefeitoPos2Veloh3s { get; set; }
        public virtual DbSet<VwmRelDefeitoPos2VelohC> VwmRelDefeitoPos2VelohCs { get; set; }
        public virtual DbSet<VwmRelDefeitoPos2VelohW> VwmRelDefeitoPos2VelohWs { get; set; }
        public virtual DbSet<VwmRelDefeitoPos3> VwmRelDefeitoPos3s { get; set; }
        public virtual DbSet<VwmRelDefeitoPos3Help> VwmRelDefeitoPos3Helps { get; set; }
        public virtual DbSet<VwmRelDefeitoPos3Help60> VwmRelDefeitoPos3Help60s { get; set; }
        public virtual DbSet<VwmRelDefeitoPos3HelpRelVolnei> VwmRelDefeitoPos3HelpRelVolneis { get; set; }
        public virtual DbSet<VwmRelDefeitoPos3Veloh3> VwmRelDefeitoPos3Veloh3s { get; set; }
        public virtual DbSet<VwmRelDefeitoPos3Veloh3Help> VwmRelDefeitoPos3Veloh3Helps { get; set; }
        public virtual DbSet<VwmRelDefeitoPos3Veloh3Help60> VwmRelDefeitoPos3Veloh3Help60s { get; set; }
        public virtual DbSet<VwmRelDefeitoPos3VelohC> VwmRelDefeitoPos3VelohCs { get; set; }
        public virtual DbSet<VwmRelDefeitoPos3VelohCHelp> VwmRelDefeitoPos3VelohCHelps { get; set; }
        public virtual DbSet<VwmRelDefeitoPos3VelohCHelp60> VwmRelDefeitoPos3VelohCHelp60s { get; set; }
        public virtual DbSet<VwmRelDefeitoPos3VelohW> VwmRelDefeitoPos3VelohWs { get; set; }
        public virtual DbSet<VwmRelDefeitoPos3VelohWHelp> VwmRelDefeitoPos3VelohWHelps { get; set; }
        public virtual DbSet<VwmRelDefeitoPos3VelohWHelp60> VwmRelDefeitoPos3VelohWHelp60s { get; set; }
        public virtual DbSet<VwmRelDefeitoPos4> VwmRelDefeitoPos4s { get; set; }
        public virtual DbSet<VwmRelDefeitoPos4RelVolnei> VwmRelDefeitoPos4RelVolneis { get; set; }
        public virtual DbSet<VwmRelDefeitoPos4Veloh3> VwmRelDefeitoPos4Veloh3s { get; set; }
        public virtual DbSet<VwmRelDefeitoPos4VelohC> VwmRelDefeitoPos4VelohCs { get; set; }
        public virtual DbSet<VwmRelDefeitoPos4VelohW> VwmRelDefeitoPos4VelohWs { get; set; }
        public virtual DbSet<VwmRelDefeitoPosRelVolnei> VwmRelDefeitoPosRelVolneis { get; set; }
        public virtual DbSet<VwtAcao> VwtAcaos { get; set; }
        public virtual DbSet<VwtCausaTipoCausa> VwtCausaTipoCausas { get; set; }
        public virtual DbSet<VwtDefeito> VwtDefeitos { get; set; }
        public virtual DbSet<VwtMenu> VwtMenus { get; set; }
        public virtual DbSet<VwtMotivoAgendamento> VwtMotivoAgendamentos { get; set; }
        public virtual DbSet<VwtPeca> VwtPecas { get; set; }
        public virtual DbSet<VwtPecaStatus> VwtPecaStatuses { get; set; }
        public virtual DbSet<VwtPedidoPecaStatus> VwtPedidoPecaStatuses { get; set; }
        public virtual DbSet<VwtPedidoStatus> VwtPedidoStatuses { get; set; }
        public virtual DbSet<VwtStatusServico> VwtStatusServicos { get; set; }
        public virtual DbSet<VwtTipoCausa> VwtTipoCausas { get; set; }
        public virtual DbSet<VwtTipoIntervencao> VwtTipoIntervencaos { get; set; }
        public virtual DbSet<VwtTipoServico> VwtTipoServicos { get; set; }
        public virtual DbSet<VwvEMailsReincidencium1> VwvEMailsReincidencia1 { get; set; }
        public virtual DbSet<VwvEmailsReincidencium> VwvEmailsReincidencia { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=satbdhomolog.perto.com.br;Initial Catalog=SAT;User Id=satweb;Password=LxGyFMUzhP5xGgryx");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<Acao>(entity =>
            {
                entity.Property(e => e.CodAcao).ValueGeneratedNever();

                entity.Property(e => e.CodEacao).IsUnicode(false);

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("(1)");

                entity.Property(e => e.NomeAcao).IsUnicode(false);
            });

            modelBuilder.Entity<AcaoChamado>(entity =>
            {
                entity.Property(e => e.Cor).IsUnicode(false);

                entity.Property(e => e.Descricao).IsUnicode(false);

                entity.Property(e => e.Icon).IsUnicode(false);
            });

            modelBuilder.Entity<AcaoComponente>(entity =>
            {
                entity.Property(e => e.CodAcaoComponente).ValueGeneratedOnAdd();

                entity.Property(e => e.CodEcausa).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.Selecionado).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<AcaoO>(entity =>
            {
                entity.Property(e => e.Cor).IsUnicode(false);

                entity.Property(e => e.Descricao).IsUnicode(false);

                entity.Property(e => e.Icon).IsUnicode(false);
            });

            modelBuilder.Entity<AcaoPo>(entity =>
            {
                entity.HasIndex(e => e.Descricao, "IX_AcaoPOS")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodUsuarioCadastro, "IX_AcaoPOS_1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodUsuarioManutencao, "IX_AcaoPOS_2")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManutencao).IsUnicode(false);

                entity.Property(e => e.Cor).IsUnicode(false);

                entity.Property(e => e.Descricao).IsUnicode(false);

                entity.Property(e => e.Icon).IsUnicode(false);

                entity.HasOne(d => d.CodUsuarioCadastroNavigation)
                    .WithMany(p => p.AcaoPoCodUsuarioCadastroNavigations)
                    .HasForeignKey(d => d.CodUsuarioCadastro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AcaoPOS_Usuario");

                entity.HasOne(d => d.CodUsuarioManutencaoNavigation)
                    .WithMany(p => p.AcaoPoCodUsuarioManutencaoNavigations)
                    .HasForeignKey(d => d.CodUsuarioManutencao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AcaoPOS_Usuario1");
            });

            modelBuilder.Entity<AcessoInstal>(entity =>
            {
                entity.HasIndex(e => new { e.Codigo, e.IndTipoAcesso }, "IX_ACESSOINSTALCODINDTIPACESS")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodAcessoInstal).ValueGeneratedOnAdd();

                entity.Property(e => e.Codigo).IsUnicode(false);

                entity.Property(e => e.DtCadastro).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IndAcesso).IsUnicode(false);
            });

            modelBuilder.Entity<AcompanhamentoTecnico>(entity =>
            {
                entity.Property(e => e.CodTecnico).IsUnicode(false);

                entity.Property(e => e.CodTipoIntervencao).IsUnicode(false);

                entity.Property(e => e.CodUsuario).IsUnicode(false);
            });

            modelBuilder.Entity<AdminBuscarTabela>(entity =>
            {
                entity.ToView("ADMIN_Buscar_Tabelas");

                entity.Property(e => e.IsNullable).IsUnicode(false);
            });

            modelBuilder.Entity<AgendaTecnico>(entity =>
            {
                entity.HasIndex(e => new { e.CodTecnico, e.CodOs }, "IDX_AGENDATECNICO_ADV00")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.CodAgendaTecnico).ValueGeneratedOnAdd();

                entity.Property(e => e.CodOs).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.Cor).IsUnicode(false);

                entity.Property(e => e.LocalAtendimento).IsUnicode(false);

                entity.Property(e => e.Municipio).IsUnicode(false);

                entity.Property(e => e.NumBanco).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<AgendamentoO>(entity =>
            {
                entity.HasKey(e => e.CodAgendamento)
                    .HasName("PK__AgendamentoOS__10566F31");

                entity.HasIndex(e => e.CodOs, "AgendamentoOS28")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodOs, "_dta_index_AgendamentoOS_7_1157579162__K3_1_4")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodOs, e.CodAgendamento }, "_dta_index_AgendamentoOS_7_1157579162__K3_K1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodOs, e.CodAgendamento }, "_dta_index_AgendamentoOS_7_1157579162__K3_K1_4")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodOs, e.CodAgendamento, e.DataHoraUsuAgendamento }, "_dta_index_AgendamentoOS_7_1157579162__K3_K1_K6_2_4")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodOs, e.DataHoraUsuAgendamento, e.CodAgendamento }, "_dta_index_AgendamentoOS_7_1157579162__K3_K6_K1_2_4")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodAgendamento).ValueGeneratedNever();

                entity.Property(e => e.CodUsuarioAgendamento).IsUnicode(false);

                entity.HasOne(d => d.CodMotivoNavigation)
                    .WithMany(p => p.AgendamentoOs)
                    .HasForeignKey(d => d.CodMotivo)
                    .HasConstraintName("FK_AgendamentoOS_MotivoAgendamento");
            });

            modelBuilder.Entity<AgendamentoOsArqMorto>(entity =>
            {
                entity.HasKey(e => e.CodAgendamento)
                    .HasName("PK__AgendamentoOS_AR__584A4D94");

                entity.HasIndex(e => e.CodOs, "in_AgendamentoOS_arq_morto_os")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodAgendamento).ValueGeneratedNever();

                entity.Property(e => e.CodUsuarioAgendamento).IsUnicode(false);
            });

            modelBuilder.Entity<AgendamentoOslog>(entity =>
            {
                entity.Property(e => e.CodUsuarioAgendamento).IsUnicode(false);

                entity.Property(e => e.CodUsuarioExclusao).IsUnicode(false);
            });

            modelBuilder.Entity<AgendamentoPreventiva>(entity =>
            {
                entity.HasKey(e => e.CodAgendamentoPreventiva)
                    .HasName("PK__Agendame__980FF3AEEBB72FCE");

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);
            });

            modelBuilder.Entity<AguardandoClientePo>(entity =>
            {
                entity.HasIndex(e => e.CodUsuarioCadastro, "IX_AguardandoClientePOS_Usuario")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.Descricao).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.HasOne(d => d.CodUsuarioCadastroNavigation)
                    .WithMany(p => p.AguardandoClientePos)
                    .HasForeignKey(d => d.CodUsuarioCadastro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AguardandoClientePOS_Usuario");
            });

            modelBuilder.Entity<AjudaTopico>(entity =>
            {
                entity.Property(e => e.Enunciado).IsUnicode(false);

                entity.Property(e => e.Texto).IsUnicode(false);

                entity.Property(e => e.Titulo).IsUnicode(false);
            });

            modelBuilder.Entity<AnaliseCaixaContrato0077>(entity =>
            {
                entity.Property(e => e.CoChamado).IsUnicode(false);

                entity.Property(e => e.CoChamado1).IsUnicode(false);
            });

            modelBuilder.Entity<AnaliseDisponibilidadeBb>(entity =>
            {
                entity.Property(e => e.Anomes).IsUnicode(false);

                entity.Property(e => e.Criticidade).IsUnicode(false);

                entity.Property(e => e.Dentrodoprazo).IsUnicode(false);

                entity.Property(e => e.Motivo).IsUnicode(false);

                entity.Property(e => e.Numerobem).IsUnicode(false);

                entity.Property(e => e.Numeroos).IsUnicode(false);
            });

            modelBuilder.Entity<ArquivoFaturamento>(entity =>
            {
                entity.HasKey(e => e.CodArquivoFaturamento)
                    .HasName("PK__ArquivoF__6ACB1128601BCC35");

                entity.Property(e => e.Caminho).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.NomeArquivo).IsUnicode(false);

                entity.Property(e => e.NumNf).IsUnicode(false);

                entity.Property(e => e.TipoArquivo).IsUnicode(false);
            });

            modelBuilder.Entity<ArquivosChamado>(entity =>
            {
                entity.HasKey(e => new { e.CodArquivo, e.CodArquivoAuto })
                    .HasName("PK__ArquivosChamados__75F77EB0");

                entity.Property(e => e.CodArquivoAuto).ValueGeneratedOnAdd();

                entity.Property(e => e.NomeArquivo).IsUnicode(false);

                entity.Property(e => e.ServicoEmail).IsUnicode(false);
            });

            modelBuilder.Entity<AspNetRole>(entity =>
            {
                entity.HasIndex(e => e.NormalizedName, "RoleNameIndex")
                    .IsUnique()
                    .HasFilter("([NormalizedName] IS NOT NULL)");
            });

            modelBuilder.Entity<AspNetUser>(entity =>
            {
                entity.HasIndex(e => e.NormalizedUserName, "UserNameIndex")
                    .IsUnique()
                    .HasFilter("([NormalizedUserName] IS NOT NULL)");
            });

            modelBuilder.Entity<AspNetUserLogin>(entity =>
            {
                entity.HasKey(e => new { e.LoginProvider, e.ProviderKey });
            });

            modelBuilder.Entity<AspNetUserRole>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.RoleId });
            });

            modelBuilder.Entity<AspNetUserToken>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.LoginProvider, e.Name });
            });

            modelBuilder.Entity<AtendimentoTelefonicoPo>(entity =>
            {
                entity.HasKey(e => e.CodAtendimentoTelefonicoPos)
                    .HasName("PK_AntendimentoTelefonicoPOS");

                entity.HasIndex(e => e.CodOs, "IX_AtendimentoTelefonicoPOS_CodOS")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodUsuarioCadastro, "IX_AtendimentoTelefonicoPOS_Usuario")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BaseUrl).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.Contato).IsUnicode(false);

                entity.Property(e => e.Descricao).IsUnicode(false);

                entity.Property(e => e.Tecnico).IsUnicode(false);

                entity.HasOne(d => d.CodOsNavigation)
                    .WithMany(p => p.AtendimentoTelefonicoPos)
                    .HasForeignKey(d => d.CodOs)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AtendimentoTelefonicoPOS_OS");

                entity.HasOne(d => d.CodUsuarioCadastroNavigation)
                    .WithMany(p => p.AtendimentoTelefonicoPos)
                    .HasForeignKey(d => d.CodUsuarioCadastro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AtendimentoTelefonicoPOS_Usuario");
            });

            modelBuilder.Entity<AtendimentoTelefonicoPosacao>(entity =>
            {
                entity.HasIndex(e => e.CodAtendimentoTelefonicoPos, "IX_AtendimentoTelefonicoPOSAcao")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodAcaoPos, "IX_AtendimentoTelefonicoPOSAcao_1")
                    .HasFillFactor((byte)90);

                entity.HasOne(d => d.CodAcaoPosNavigation)
                    .WithMany(p => p.AtendimentoTelefonicoPosacaos)
                    .HasForeignKey(d => d.CodAcaoPos)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AtendimentoTelefonicoPOSAcao_AcaoPOS");

                entity.HasOne(d => d.CodAtendimentoTelefonicoPosNavigation)
                    .WithMany(p => p.AtendimentoTelefonicoPosacaos)
                    .HasForeignKey(d => d.CodAtendimentoTelefonicoPos)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AtendimentoTelefonicoPOSAcao_AtendimentoTelefonicoPOS");
            });

            modelBuilder.Entity<AtendimentosBrb>(entity =>
            {
                entity.Property(e => e.MesAtendimento).IsUnicode(false);
            });

            modelBuilder.Entity<AtendimentosMetroRj>(entity =>
            {
                entity.Property(e => e.MesAtendimento).IsUnicode(false);
            });

            modelBuilder.Entity<AtendimentosMetroSp>(entity =>
            {
                entity.Property(e => e.MesAtendimento).IsUnicode(false);
            });

            modelBuilder.Entity<AtualizacaoCubo>(entity =>
            {
                entity.Property(e => e.NomeCuboAtualizado).IsUnicode(false);
            });

            modelBuilder.Entity<AtualizacaoSat>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Descricao).IsUnicode(false);

                entity.Property(e => e.NomeArquivo).IsUnicode(false);

                entity.Property(e => e.Titulo).IsUnicode(false);
            });

            modelBuilder.Entity<AtualizacaoUsuarioSat>(entity =>
            {
                entity.HasKey(e => e.CodAtualizacaoUsuarioSat)
                    .HasName("PK_AtualizacaoPerfilSAT");

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.HasOne(d => d.CodAtualizacaoSatNavigation)
                    .WithMany(p => p.AtualizacaoUsuarioSats)
                    .HasForeignKey(d => d.CodAtualizacaoSat)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AtualizacaoUsuarioSAT_AtualizacaoSAT");
            });

            modelBuilder.Entity<AuditoriaFoto>(entity =>
            {
                entity.HasKey(e => e.CodAuditoriaFoto)
                    .HasName("PK_AuditoriaVeiculoFoto");

                entity.Property(e => e.Foto).IsUnicode(false);
            });

            modelBuilder.Entity<AuditoriaStatus>(entity =>
            {
                entity.Property(e => e.Nome).IsUnicode(false);
            });

            modelBuilder.Entity<AuditoriaVeiculo>(entity =>
            {
                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Odometro).IsUnicode(false);

                entity.Property(e => e.Placa).IsUnicode(false);
            });

            modelBuilder.Entity<AuditoriaVeiculoAcessorio>(entity =>
            {
                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Justificativa).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);
            });

            modelBuilder.Entity<AuditoriaVeiculoTanque>(entity =>
            {
                entity.Property(e => e.Nome).IsUnicode(false);
            });

            modelBuilder.Entity<Auditorium>(entity =>
            {
                entity.Property(e => e.CodAuditoriaStatus).HasDefaultValueSql("((1))");

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Observacoes).IsUnicode(false);
            });

            modelBuilder.Entity<AutorizadaEmail>(entity =>
            {
                entity.HasKey(e => e.CodEmail)
                    .HasName("PK__AutorizadaEmail__6C6E1476");

                entity.Property(e => e.CodEmail).ValueGeneratedNever();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.HasOne(d => d.CodAutorizadaNavigation)
                    .WithMany(p => p.AutorizadaEmails)
                    .HasForeignKey(d => d.CodAutorizada)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AutorizadaEmail_Autorizada");

                entity.HasOne(d => d.CodUsuarioCadNavigation)
                    .WithMany(p => p.AutorizadaEmails)
                    .HasForeignKey(d => d.CodUsuarioCad)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AutorizadaEmail_UsuarioCad");
            });

            modelBuilder.Entity<AutorizadaEmailSicredi>(entity =>
            {
                entity.HasKey(e => e.CodEmail)
                    .HasName("PK__AutorizadaEmailSicredi");

                entity.HasIndex(e => e.CodAutorizada, "IX_AutorizadaEmailSicredi")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodFilial, "IX_AutorizadaEmailSicredi_1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodUsuarioCad, "IX_AutorizadaEmailSicredi_2")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodEmail).ValueGeneratedNever();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);
            });

            modelBuilder.Entity<AutorizadaRepasse>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.HasOne(d => d.CodAutorizadaNavigation)
                    .WithMany(p => p.AutorizadaRepasses)
                    .HasForeignKey(d => d.CodAutorizada)
                    .HasConstraintName("FK_AutorizadaRepasse_Autorizada");

                entity.HasOne(d => d.CodClienteNavigation)
                    .WithMany(p => p.AutorizadaRepasses)
                    .HasForeignKey(d => d.CodCliente)
                    .HasConstraintName("FK_AutorizadaRepasse_Cliente");

                entity.HasOne(d => d.CodContratoNavigation)
                    .WithMany(p => p.AutorizadaRepasses)
                    .HasForeignKey(d => d.CodContrato)
                    .HasConstraintName("FK_AutorizadaRepasse_Contrato");

                entity.HasOne(d => d.CodFilialNavigation)
                    .WithMany(p => p.AutorizadaRepasses)
                    .HasForeignKey(d => d.CodFilial)
                    .HasConstraintName("FK_AutorizadaRepasse_Filial");

                entity.HasOne(d => d.CodRegiaoNavigation)
                    .WithMany(p => p.AutorizadaRepasses)
                    .HasForeignKey(d => d.CodRegiao)
                    .HasConstraintName("FK_AutorizadaRepasse_Regiao");

                entity.HasOne(d => d.CodSlaNavigation)
                    .WithMany(p => p.AutorizadaRepasses)
                    .HasForeignKey(d => d.CodSla)
                    .HasConstraintName("FK_AutorizadaRepasse_SLA");
            });

            modelBuilder.Entity<AutorizadaUfcidadePo>(entity =>
            {
                entity.HasIndex(e => e.CodAutorizada, "IX_AutorizadaUFCidadePOS")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodCliente, "IX_AutorizadaUFCidadePOS_1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodUf, "IX_AutorizadaUFCidadePOS_2")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodCidade, "IX_AutorizadaUFCidadePOS_3")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodRegiao, "IX_AutorizadaUFCidadePOS_4")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodRegiao, "IX_AutorizadaUFCidadePOS_5")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodFilial, "IX_AutorizadaUFCidadePOS_6")
                    .HasFillFactor((byte)90);

                entity.HasOne(d => d.CodAutorizadaNavigation)
                    .WithMany(p => p.AutorizadaUfcidadePos)
                    .HasForeignKey(d => d.CodAutorizada)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AutorizadaUFCidadePOS_Autorizada");

                entity.HasOne(d => d.CodCidadeNavigation)
                    .WithMany(p => p.AutorizadaUfcidadePos)
                    .HasForeignKey(d => d.CodCidade)
                    .HasConstraintName("FK_AutorizadaUFCidadePOS_Cidade");

                entity.HasOne(d => d.CodClienteNavigation)
                    .WithMany(p => p.AutorizadaUfcidadePos)
                    .HasForeignKey(d => d.CodCliente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AutorizadaUFCidadePOS_Cliente");

                entity.HasOne(d => d.CodFilialNavigation)
                    .WithMany(p => p.AutorizadaUfcidadePos)
                    .HasForeignKey(d => d.CodFilial)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AutorizadaUFCidadePOS_Filial");

                entity.HasOne(d => d.CodRegiaoNavigation)
                    .WithMany(p => p.AutorizadaUfcidadePos)
                    .HasForeignKey(d => d.CodRegiao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AutorizadaUFCidadePOS_Regiao");

                entity.HasOne(d => d.CodUfNavigation)
                    .WithMany(p => p.AutorizadaUfcidadePos)
                    .HasForeignKey(d => d.CodUf)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AutorizadaUFCidadePOS_UF");
            });

            modelBuilder.Entity<Autorizadum>(entity =>
            {
                entity.HasIndex(e => e.CodAutorizada, "_dta_index_Autorizada_7_1881877871__K1_2")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodAutorizada, "_dta_index_Autorizada_7_1881877871__K1_2_4_14")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodFilial, "_dta_index_Autorizada_7_1881877871__K2_1_4")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodAutorizada).ValueGeneratedNever();

                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.Cnpj).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.Fax).IsUnicode(false);

                entity.Property(e => e.Fone).IsUnicode(false);

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("((1))");

                entity.Property(e => e.InscricaoEstadual).IsUnicode(false);

                entity.Property(e => e.Latitude).IsUnicode(false);

                entity.Property(e => e.Longitude).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.RazaoSocial).IsUnicode(false);

                entity.HasOne(d => d.CodCidadeNavigation)
                    .WithMany(p => p.Autorizada)
                    .HasForeignKey(d => d.CodCidade)
                    .HasConstraintName("FK_Autorizada_Cidade");

                entity.HasOne(d => d.CodFilialNavigation)
                    .WithMany(p => p.Autorizada)
                    .HasForeignKey(d => d.CodFilial)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Autorizada_Filial");

                entity.HasOne(d => d.CodUsuarioCadNavigation)
                    .WithMany(p => p.AutorizadumCodUsuarioCadNavigations)
                    .HasForeignKey(d => d.CodUsuarioCad)
                    .HasConstraintName("FK_Autorizada_UsuarioCad");

                entity.HasOne(d => d.CodUsuarioManutNavigation)
                    .WithMany(p => p.AutorizadumCodUsuarioManutNavigations)
                    .HasForeignKey(d => d.CodUsuarioManut)
                    .HasConstraintName("FK_Autorizada_UsuarioManut");
            });

            modelBuilder.Entity<AvaliacaoAtendimento>(entity =>
            {
                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);
            });

            modelBuilder.Entity<BaixaNaoRealizadum>(entity =>
            {
                entity.HasIndex(e => e.CodOs, "IX_BaixaNaoRealizada_OS")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.UsuarioCadastro, "IX_BaixaNaoRealizada_Usuario")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.UsuarioCadastro).IsUnicode(false);

                entity.HasOne(d => d.CodOsNavigation)
                    .WithMany(p => p.BaixaNaoRealizada)
                    .HasForeignKey(d => d.CodOs)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BaixaNaoRealizada_OS");

                entity.HasOne(d => d.UsuarioCadastroNavigation)
                    .WithMany(p => p.BaixaNaoRealizada)
                    .HasForeignKey(d => d.UsuarioCadastro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BaixaNaoRealizada_Usuario");
            });

            modelBuilder.Entity<BancadaLaboratorio>(entity =>
            {
                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);
            });

            modelBuilder.Entity<BancadaListaPeca>(entity =>
            {
                entity.HasKey(e => new { e.CodPeca, e.CodBancadaLista })
                    .HasName("PK__BancadaListaPeca__17CD73C7");

                entity.Property(e => e.CodUsuarioAlt).IsUnicode(false);

                entity.HasOne(d => d.CodBancadaListaNavigation)
                    .WithMany(p => p.BancadaListaPecas)
                    .HasForeignKey(d => d.CodBancadaLista)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__BancadaLi__CodBa__1AA9E072");

                entity.HasOne(d => d.CodPecaNavigation)
                    .WithMany(p => p.BancadaListaPecas)
                    .HasForeignKey(d => d.CodPeca)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__BancadaLi__CodPe__1B9E04AB");
            });

            modelBuilder.Entity<BancadaListum>(entity =>
            {
                entity.HasKey(e => e.CodBancadaLista)
                    .HasName("PK__BancadaLista__15E52B55");

                entity.Property(e => e.CodBancadaLista).ValueGeneratedNever();

                entity.Property(e => e.NomeBancadaLista).IsUnicode(false);
            });

            modelBuilder.Entity<BanrisulInterface>(entity =>
            {
                entity.Property(e => e.NomeCampo).IsUnicode(false);

                entity.HasOne(d => d.IdtipoArquivoNavigation)
                    .WithMany(p => p.BanrisulInterfaces)
                    .HasForeignKey(d => d.IdtipoArquivo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BanrisulInterface_BanrisulTipoArquivo");

                entity.HasOne(d => d.IdtipoRegistroNavigation)
                    .WithMany(p => p.BanrisulInterfaces)
                    .HasForeignKey(d => d.IdtipoRegistro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BanrisulInterface_BanrisulTipoRegistro");
            });

            modelBuilder.Entity<BanrisulTipoArquivo>(entity =>
            {
                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<BanrisulTipoRegistro>(entity =>
            {
                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<BaseEquipamentoBanrisul>(entity =>
            {
                entity.HasIndex(e => e.CodUsuarioCadastro, "IX_BaseEquipamentoBanrisul")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.HasOne(d => d.CodUsuarioCadastroNavigation)
                    .WithMany(p => p.BaseEquipamentoBanrisuls)
                    .HasForeignKey(d => d.CodUsuarioCadastro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BaseEquipamentoBanrisul_Usuario");
            });

            modelBuilder.Entity<BaseEquipamentoBanrisulItem>(entity =>
            {
                entity.HasIndex(e => e.IdBaseEquipamentoBanrisul, "IX_BaseEquipamentoBanrisulItem")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodEquip, e.CodGrupoEquip, e.CodTipoEquip }, "IX_BaseEquipamentoBanrisulItem_1")
                    .HasFillFactor((byte)90);

                entity.HasOne(d => d.IdBaseEquipamentoBanrisulNavigation)
                    .WithMany(p => p.BaseEquipamentoBanrisulItems)
                    .HasForeignKey(d => d.IdBaseEquipamentoBanrisul)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BaseEquipamentoBanrisulItem_BaseEquipamentoBanrisul");

                entity.HasOne(d => d.Cod)
                    .WithMany(p => p.BaseEquipamentoBanrisulItems)
                    .HasForeignKey(d => new { d.CodEquip, d.CodGrupoEquip, d.CodTipoEquip })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BaseEquipamentoBanrisulItem_Equipamento");
            });

            modelBuilder.Entity<BloqueioReincidencium>(entity =>
            {
                entity.Property(e => e.CodBloqueioReincidencia).ValueGeneratedOnAdd();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<CalculoIndiceQuebra>(entity =>
            {
                entity.Property(e => e.DescricaoPeca).IsUnicode(false);

                entity.Property(e => e.Magnus).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);

                entity.Property(e => e.Pai).IsUnicode(false);
            });

            modelBuilder.Entity<CalculoSla>(entity =>
            {
                entity.Property(e => e.SiglaUf).IsUnicode(false);
            });

            modelBuilder.Entity<CalendarioDiaFeriado>(entity =>
            {
                entity.HasKey(e => e.CodCalendarioDiaFeriado)
                    .HasName("CalendarioDiaFeriado_PK");

                entity.HasIndex(e => new { e.CodCalendarioDia, e.CodPais, e.CodUf, e.CodCidade }, "IX_CalendarioDiaFeriado")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NomeFeriado).IsUnicode(false);

                entity.HasOne(d => d.CodCalendarioDiaNavigation)
                    .WithMany(p => p.CalendarioDiaFeriados)
                    .HasForeignKey(d => d.CodCalendarioDia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CalendarioDia_CalendarioDiaFeriado_FK1");

                entity.HasOne(d => d.CodCidadeNavigation)
                    .WithMany(p => p.CalendarioDiaFeriados)
                    .HasForeignKey(d => d.CodCidade)
                    .HasConstraintName("Cidade_CalendarioDiaFeriado_FK1");

                entity.HasOne(d => d.CodUfNavigation)
                    .WithMany(p => p.CalendarioDiaFeriados)
                    .HasForeignKey(d => d.CodUf)
                    .HasConstraintName("UF_CalendarioDiaFeriado_FK1");
            });

            modelBuilder.Entity<CalendarioDiaSemana>(entity =>
            {
                entity.HasKey(e => e.CodCalendarioDiaSemana)
                    .HasName("CalendarioDiaSemana_PK");

                entity.Property(e => e.NomeDiaSemana).IsUnicode(false);
            });

            modelBuilder.Entity<CalendarioDium>(entity =>
            {
                entity.HasKey(e => e.CodCalendarioDia)
                    .HasName("CalendarioDia_PK");

                entity.HasIndex(e => new { e.NumDia, e.CodCalendarioMes, e.NumAno }, "IX_CalendarioDia")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasOne(d => d.CodCalendarioDiaSemanaNavigation)
                    .WithMany(p => p.CalendarioDia)
                    .HasForeignKey(d => d.CodCalendarioDiaSemana)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CalendarioDiaSemana_CalendarioDia_FK1");

                entity.HasOne(d => d.CodCalendarioMesNavigation)
                    .WithMany(p => p.CalendarioDia)
                    .HasForeignKey(d => d.CodCalendarioMes)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CalendarioMes_CalendarioDia_FK1");
            });

            modelBuilder.Entity<CalendarioMe>(entity =>
            {
                entity.HasKey(e => e.CodCalendarioMes)
                    .HasName("CalendarioMes_PK");

                entity.Property(e => e.NomeMes).IsUnicode(false);
            });

            modelBuilder.Entity<Cargo>(entity =>
            {
                entity.HasKey(e => e.CodCargo)
                    .HasName("PK__Cargo__77A09B57");

                entity.Property(e => e.CodCargo).ValueGeneratedNever();

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("(1)");

                entity.Property(e => e.NomeCargo).IsUnicode(false);
            });

            modelBuilder.Entity<Causa>(entity =>
            {
                entity.HasKey(e => new { e.CodTipoCausa, e.CodGrupoCausa, e.CodCausa })
                    .HasName("PK__Causa__7D439ABD");

                entity.HasIndex(e => new { e.CodTipoCausa, e.CodCausa, e.CodEcausa, e.CodGrupoCausa, e.NomeCausa }, "_dta_index_Causa_7_961542609__K1_K3_K4_K2_K5")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodCausa, e.CodEcausa }, "_dta_index_Causa_7_961542609__K3_K4")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodEcausa).IsUnicode(false);

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("((1))");

                entity.Property(e => e.NomeCausa).IsUnicode(false);

                entity.HasOne(d => d.Cod)
                    .WithMany(p => p.Causas)
                    .HasForeignKey(d => new { d.CodTipoCausa, d.CodGrupoCausa })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Causa__42E1EEFE");
            });

            modelBuilder.Entity<CausaImprodutividade>(entity =>
            {
                entity.HasKey(e => e.CodCausaImprodutividade)
                    .HasName("PK__CausaImp__BFA2D359DDCD4EAF");
            });

            modelBuilder.Entity<CausasSicredi>(entity =>
            {
                entity.Property(e => e.CodEcausa).IsUnicode(false);

                entity.Property(e => e.NomeCausaSat).IsUnicode(false);

                entity.Property(e => e.NomeCausaSicredi).IsUnicode(false);
            });

            modelBuilder.Entity<CedulasMecanismoRat>(entity =>
            {
                entity.HasKey(e => e.CodRatMecanismo)
                    .HasName("PK__CedulasM__89DFA815B7F87F4A");

                entity.Property(e => e.Justificativa).IsUnicode(false);
            });

            modelBuilder.Entity<Chamado>(entity =>
            {
                entity.HasIndex(e => e.CodEquipContrato, "IX_Chamado")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodDefeitoPos, "IX_Chamado_DefeitoPOS")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodEquip, e.CodGrupoEquip, e.CodTipoEquip }, "IX_Chamado_Equipamento")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodPosto, "IX_Chamado_LocalAtendimento")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodChamado, "IX_Chamado_MotivoCancelamento")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NumeroOscliente, "IX_Chamado_NumOSCliente")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodOs, "IX_Chamado_OS")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodOperadoraTelefonia, "IX_Chamado_OperadoraTelefonia")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodStatus, "IX_Chamado_Status")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodUsuarioAtendimento, "IX_Chamado_UsuarioAtendimento")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodUsuarioCadastro, "IX_Chamado_UsuarioCadastro")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodUsuarioOs, "IX_Chamado_UsuarioOS")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Classificacao).IsUnicode(false);

                entity.Property(e => e.CnpjCpf).IsUnicode(false);

                entity.Property(e => e.CodUsuarioAtendimento).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.CodUsuarioOs).IsUnicode(false);

                entity.Property(e => e.ComplementoDefeito).IsUnicode(false);

                entity.Property(e => e.Descricao).IsUnicode(false);

                entity.Property(e => e.DescricaoAtendimento).IsUnicode(false);

                entity.Property(e => e.EnderecoSolicitante).IsUnicode(false);

                entity.Property(e => e.Estabelecimento).IsUnicode(false);

                entity.Property(e => e.FoneContato).IsUnicode(false);

                entity.Property(e => e.FoneOrigem).IsUnicode(false);

                entity.Property(e => e.Linha).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.NomeContato).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NumeroOscliente).IsUnicode(false);

                entity.Property(e => e.NumeroSerie).IsUnicode(false);

                entity.Property(e => e.Rede).IsUnicode(false);

                entity.Property(e => e.Terminal).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);

                entity.Property(e => e.Versao).IsUnicode(false);

                entity.HasOne(d => d.CodDefeitoPosNavigation)
                    .WithMany(p => p.Chamados)
                    .HasForeignKey(d => d.CodDefeitoPos)
                    .HasConstraintName("FK_Chamado_DefeitoPOS");

                entity.HasOne(d => d.CodEquipContratoNavigation)
                    .WithMany(p => p.Chamados)
                    .HasForeignKey(d => d.CodEquipContrato)
                    .HasConstraintName("FK_Chamado_EquipamentoContrato");

                entity.HasOne(d => d.CodMotivoCancelamentoNavigation)
                    .WithMany(p => p.Chamados)
                    .HasForeignKey(d => d.CodMotivoCancelamento)
                    .HasConstraintName("FK_Chamado_MotivoCancelamento");

                entity.HasOne(d => d.CodOperadoraTelefoniaNavigation)
                    .WithMany(p => p.Chamados)
                    .HasForeignKey(d => d.CodOperadoraTelefonia)
                    .HasConstraintName("FK_Chamado_OperadoraTelefonia");

                entity.HasOne(d => d.CodOsNavigation)
                    .WithMany(p => p.Chamados)
                    .HasForeignKey(d => d.CodOs)
                    .HasConstraintName("FK_Chamado_OS");

                entity.HasOne(d => d.CodStatusNavigation)
                    .WithMany(p => p.Chamados)
                    .HasForeignKey(d => d.CodStatus)
                    .HasConstraintName("FK_Chamado_StatusChamado");

                entity.HasOne(d => d.CodUsuarioAtendimentoNavigation)
                    .WithMany(p => p.ChamadoCodUsuarioAtendimentoNavigations)
                    .HasForeignKey(d => d.CodUsuarioAtendimento)
                    .HasConstraintName("FK_Chamado_Usuario_Atendimento");

                entity.HasOne(d => d.CodUsuarioCadastroNavigation)
                    .WithMany(p => p.ChamadoCodUsuarioCadastroNavigations)
                    .HasForeignKey(d => d.CodUsuarioCadastro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chamado_Usuario_Cadastro");

                entity.HasOne(d => d.CodUsuarioOsNavigation)
                    .WithMany(p => p.ChamadoCodUsuarioOsNavigations)
                    .HasForeignKey(d => d.CodUsuarioOs)
                    .HasConstraintName("FK_Chamado_Usuario_OS");

                entity.HasOne(d => d.Cod)
                    .WithMany(p => p.Chamados)
                    .HasForeignKey(d => new { d.CodEquip, d.CodGrupoEquip, d.CodTipoEquip })
                    .HasConstraintName("FK_Chamado_Equipamento");
            });

            modelBuilder.Entity<ChamadoDadosAdicionai>(entity =>
            {
                entity.HasIndex(e => e.CodChamado, "IX_ChamadoDadosAdicionais")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodOperadoraTelefonia, "IX_ChamadoDadosAdicionais_1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodOperadoraTelefoniaHist, "IX_ChamadoDadosAdicionais_2")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodTipoComunicacao, "IX_ChamadoDadosAdicionais_3")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodUsuarioCadastro, "IX_ChamadoDadosAdicionais_4")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.Ddd).IsUnicode(false);

                entity.Property(e => e.Dddhist).IsUnicode(false);

                entity.Property(e => e.ModoEquipamento).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.NumeroHist).IsUnicode(false);

                entity.Property(e => e.OperadoraTelefoniaTela).IsUnicode(false);

                entity.Property(e => e.OperadoraTelefoniaTelaHist).IsUnicode(false);

                entity.Property(e => e.SimCard).IsUnicode(false);

                entity.Property(e => e.SimCardHist).IsUnicode(false);

                entity.Property(e => e.TipoComunicacaoTela).IsUnicode(false);

                entity.HasOne(d => d.CodChamadoNavigation)
                    .WithMany(p => p.ChamadoDadosAdicionais)
                    .HasForeignKey(d => d.CodChamado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChamadoDadosAdicionais_Chamado");

                entity.HasOne(d => d.CodOperadoraTelefoniaNavigation)
                    .WithMany(p => p.ChamadoDadosAdicionaiCodOperadoraTelefoniaNavigations)
                    .HasForeignKey(d => d.CodOperadoraTelefonia)
                    .HasConstraintName("FK_ChamadoDadosAdicionais_OperadoraTelefonia");

                entity.HasOne(d => d.CodOperadoraTelefoniaHistNavigation)
                    .WithMany(p => p.ChamadoDadosAdicionaiCodOperadoraTelefoniaHistNavigations)
                    .HasForeignKey(d => d.CodOperadoraTelefoniaHist)
                    .HasConstraintName("FK_ChamadoDadosAdicionais_OperadoraTelefonia1");

                entity.HasOne(d => d.CodTipoComunicacaoNavigation)
                    .WithMany(p => p.ChamadoDadosAdicionais)
                    .HasForeignKey(d => d.CodTipoComunicacao)
                    .HasConstraintName("FK_ChamadoDadosAdicionais_TipoComunicacao");

                entity.HasOne(d => d.CodUsuarioCadastroNavigation)
                    .WithMany(p => p.ChamadoDadosAdicionais)
                    .HasForeignKey(d => d.CodUsuarioCadastro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChamadoDadosAdicionais_Usuario");
            });

            modelBuilder.Entity<ChamadoHist>(entity =>
            {
                entity.HasIndex(e => e.CodAcaoChamado, "IX_ChamadoHist_Acao")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodChamado, "IX_ChamadoHist_Chamado")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodUsuario, "IX_ChamadoHist_Usuario")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.Descricao).IsUnicode(false);

                entity.HasOne(d => d.CodAcaoChamadoNavigation)
                    .WithMany(p => p.ChamadoHists)
                    .HasForeignKey(d => d.CodAcaoChamado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChamadoHist_AcaoChamado");

                entity.HasOne(d => d.CodChamadoNavigation)
                    .WithMany(p => p.ChamadoHists)
                    .HasForeignKey(d => d.CodChamado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChamadoHist_Chamado");

                entity.HasOne(d => d.CodUsuarioNavigation)
                    .WithMany(p => p.ChamadoHists)
                    .HasForeignKey(d => d.CodUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChamadoHist_Usuario");
            });

            modelBuilder.Entity<ChamadoO>(entity =>
            {
                entity.HasIndex(e => e.CodChamado, "IX_ChamadoOS")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodOs, "IX_ChamadoOS_1")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodTipoOsGeracao, "IX_ChamadoOS_2")
                    .HasFillFactor((byte)90);

                entity.HasOne(d => d.CodChamadoNavigation)
                    .WithMany(p => p.ChamadoOs)
                    .HasForeignKey(d => d.CodChamado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChamadoOS_Chamado");

                entity.HasOne(d => d.CodOsNavigation)
                    .WithOne(p => p.ChamadoO)
                    .HasForeignKey<ChamadoO>(d => d.CodOs)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChamadoOS_OS");

                entity.HasOne(d => d.CodTipoOsGeracaoNavigation)
                    .WithMany(p => p.ChamadoOs)
                    .HasForeignKey(d => d.CodTipoOsGeracao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChamadoOS_TipoOSGeracao");
            });

            modelBuilder.Entity<ChamadosStn>(entity =>
            {
                entity.HasKey(e => e.CodAtendimento)
                    .HasName("PK__Chamados__4F151F40E433B74C");

                entity.Property(e => e.CodCausa).IsUnicode(false);

                entity.Property(e => e.CodDefeito).IsUnicode(false);

                entity.Property(e => e.CodGrupoCausa).IsUnicode(false);

                entity.Property(e => e.CodTecnico).IsUnicode(false);

                entity.Property(e => e.CodTipoCausa).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.NomeSolicitante).IsUnicode(false);

                entity.Property(e => e.ObsSistema).IsUnicode(false);
            });

            modelBuilder.Entity<CheckInCheckOut>(entity =>
            {
                entity.Property(e => e.CodCheckInCheckOut).ValueGeneratedOnAdd();

                entity.Property(e => e.CodUsuarioPa).IsUnicode(false);

                entity.Property(e => e.CodUsuarioTecnico).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DistanciaLocalDescricao).IsUnicode(false);

                entity.Property(e => e.DistanciaLocalMetros).IsUnicode(false);

                entity.Property(e => e.DuracaoLocalDescricao).IsUnicode(false);

                entity.Property(e => e.DuracaoLocalSegundos).IsUnicode(false);

                entity.Property(e => e.Latitude).IsUnicode(false);

                entity.Property(e => e.Longitude).IsUnicode(false);

                entity.Property(e => e.Modalidade).IsUnicode(false);

                entity.Property(e => e.Tipo).IsUnicode(false);
            });

            modelBuilder.Entity<CheckListStn>(entity =>
            {
                entity.HasKey(e => e.CodCheckListStn)
                    .HasName("PK__CheckLis__9E824301A1677B10");

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.Revisao).IsUnicode(false);
            });

            modelBuilder.Entity<CheckinCheckoutRelatorio>(entity =>
            {
                entity.Property(e => e.CheckinDataHoraCadSmartphone).IsUnicode(false);

                entity.Property(e => e.CheckinLatitude).IsUnicode(false);

                entity.Property(e => e.CheckinLongitude).IsUnicode(false);

                entity.Property(e => e.CheckinMenorInicio).IsUnicode(false);

                entity.Property(e => e.CheckoutDataHoraCadSmartphone).IsUnicode(false);

                entity.Property(e => e.CheckoutLatitude).IsUnicode(false);

                entity.Property(e => e.CheckoutLongitude).IsUnicode(false);

                entity.Property(e => e.CheckoutMaiorSolucao).IsUnicode(false);

                entity.Property(e => e.CodOs).IsUnicode(false);

                entity.Property(e => e.DataHoraInicio).IsUnicode(false);

                entity.Property(e => e.DataHoraSolucao).IsUnicode(false);

                entity.Property(e => e.DistanciaCheckinLocal).IsUnicode(false);

                entity.Property(e => e.DistanciaCheckoutLocal).IsUnicode(false);

                entity.Property(e => e.DuracaoCheckinLocal).IsUnicode(false);

                entity.Property(e => e.DuracaoCheckoutLocal).IsUnicode(false);

                entity.Property(e => e.LocalAtendimentoLatitude).IsUnicode(false);

                entity.Property(e => e.LocalAtendimentoLongitude).IsUnicode(false);

                entity.Property(e => e.NomeLocalAtendimento).IsUnicode(false);

                entity.Property(e => e.NomeTecnico).IsUnicode(false);
            });

            modelBuilder.Entity<ChecklistChamadoStn>(entity =>
            {
                entity.HasKey(e => e.CodChecklistChamadoStn)
                    .HasName("PK__Checklis__2739F3E4F0667EC5");

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.DescCausa).IsUnicode(false);
            });

            modelBuilder.Entity<ChecklistPreventiva>(entity =>
            {
                entity.Property(e => e.CodChecklistPreventiva).ValueGeneratedOnAdd();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("((1))");

                entity.Property(e => e.Justificativa).IsUnicode(false);

                entity.Property(e => e.PossuiArCondicionado).HasDefaultValueSql("((0))");

                entity.Property(e => e.PossuiNoBreak).HasDefaultValueSql("((0))");

                entity.Property(e => e.RedeEstabilizada).HasDefaultValueSql("((0))");

                entity.Property(e => e.Temperatura).HasDefaultValueSql("((0))");

                entity.Property(e => e.TensaoComCarga).HasDefaultValueSql("((0))");

                entity.Property(e => e.TensaoEntreTerraEneutro).HasDefaultValueSql("((0))");

                entity.Property(e => e.TensaoSemCarga).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ChecklistPreventivaAcompanhamento>(entity =>
            {
                entity.Property(e => e.CodChecklistPreventivaAcompanhamento).ValueGeneratedOnAdd();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.Contato).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Obs).IsUnicode(false);

                entity.Property(e => e.Proposta).IsUnicode(false);
            });

            modelBuilder.Entity<ChecklistPreventivaItem>(entity =>
            {
                entity.Property(e => e.Checado).HasDefaultValueSql("((0))");

                entity.Property(e => e.CodChecklistPreventivaItem).ValueGeneratedOnAdd();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("((1))");

                entity.Property(e => e.Obs).IsUnicode(false);
            });

            modelBuilder.Entity<ChecklistPreventivaLayout>(entity =>
            {
                entity.Property(e => e.CodChecklistPreventivaLayout).ValueGeneratedOnAdd();

                entity.Property(e => e.Layout).IsUnicode(false);
            });

            modelBuilder.Entity<ChecklistPreventivaLayoutItem>(entity =>
            {
                entity.Property(e => e.CodChecklistPreventivaLayoutItem).ValueGeneratedOnAdd();

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<ChecklistPreventivaLayoutPeriferico>(entity =>
            {
                entity.Property(e => e.CodChecklistPreventivaLayoutPeriferico).ValueGeneratedOnAdd();

                entity.Property(e => e.Periferico).IsUnicode(false);
            });

            modelBuilder.Entity<ChecklistPreventivaLayoutXpai>(entity =>
            {
                entity.Property(e => e.CodChecklistPreventivaLayoutXpai).ValueGeneratedOnAdd();

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);
            });

            modelBuilder.Entity<ChecklistStnalteracao>(entity =>
            {
                entity.HasKey(e => e.CodChecklistStnalteracao)
                    .HasName("PK__Checklis__10890D0597776AAD");

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.DescricaoAlteracao).IsUnicode(false);

                entity.Property(e => e.Revisao).IsUnicode(false);

                entity.HasOne(d => d.CodCheckListStnNavigation)
                    .WithMany(p => p.ChecklistStnalteracaos)
                    .HasForeignKey(d => d.CodCheckListStn)
                    .HasConstraintName("FK__Checklist__CodCh__25625EA3");
            });

            modelBuilder.Entity<ChecklistStnpeca>(entity =>
            {
                entity.HasKey(e => e.CodChecklistStnpecas)
                    .HasName("PK__Checklis__C5875F70EF16D345");

                entity.HasOne(d => d.CodCheckListStnNavigation)
                    .WithMany(p => p.ChecklistStnpecas)
                    .HasForeignKey(d => d.CodCheckListStn)
                    .HasConstraintName("FK__Checklist__CodCh__283ECB4E");
            });

            modelBuilder.Entity<Cidade>(entity =>
            {
                entity.HasKey(e => e.CodCidade)
                    .HasName("PK__Cidade__7ABC33CD");

                entity.HasIndex(e => e.CodRegiaoPos, "IX_Cidade_RegiaoPOS")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodCidade, "_dta_index_Cidade_7_1003970753__K1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodCidade, "_dta_index_Cidade_7_1003970753__K1_2")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodCidade, e.CodUf, e.CodFilial }, "_dta_index_Cidade_7_1003970753__K1_K2_K3_4")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodCidade, e.CodUf, e.NomeCidade }, "_dta_index_Cidade_7_1003970753__K1_K2_K4")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodCidade, e.CodFilial, e.CodUf }, "_dta_index_Cidade_7_1003970753__K1_K3_K2_4")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodCidade, e.NomeCidade }, "_dta_index_Cidade_7_1003970753__K1_K4")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodCidade, e.NomeCidade }, "_dta_index_Cidade_7_1003970753__K1_K4_2")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodUf, "_dta_index_Cidade_7_1003970753__K2")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodFilial, "_dta_index_Cidade_7_1003970753__K3")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodCidade, "_dta_index_Cidade_7_2014070361__K1_2_3_4")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodCidade, "_dta_index_Cidade_7_2014070361__K1_3")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodUf, e.CodCidade }, "_dta_index_Cidade_7_2014070361__K2_K1_4")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("((1))");

                entity.Property(e => e.NomeCidade).IsUnicode(false);

                entity.HasOne(d => d.CodFilialNavigation)
                    .WithMany(p => p.Cidades)
                    .HasForeignKey(d => d.CodFilial)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Cidade_Filial");

                entity.HasOne(d => d.CodRegiaoPosNavigation)
                    .WithMany(p => p.Cidades)
                    .HasForeignKey(d => d.CodRegiaoPos)
                    .HasConstraintName("FK_Cidade_RegiaoPOS");

                entity.HasOne(d => d.CodUfNavigation)
                    .WithMany(p => p.Cidades)
                    .HasForeignKey(d => d.CodUf)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Cidade_UF");

                entity.HasOne(d => d.CodUsuarioCadNavigation)
                    .WithMany(p => p.CidadeCodUsuarioCadNavigations)
                    .HasForeignKey(d => d.CodUsuarioCad)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Cidade_UsuarioCad");

                entity.HasOne(d => d.CodUsuarioManutNavigation)
                    .WithMany(p => p.CidadeCodUsuarioManutNavigations)
                    .HasForeignKey(d => d.CodUsuarioManut)
                    .HasConstraintName("FK_Cidade_UsuarioManut");
            });

            modelBuilder.Entity<CidadeDeParaCliente>(entity =>
            {
                entity.HasIndex(e => e.CodCidade, "IX_CidadeDeParaCliente")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodCliente, "IX_CidadeDeParaCliente_1")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NomeCidade).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.HasOne(d => d.CodCidadeNavigation)
                    .WithMany(p => p.CidadeDeParaClientes)
                    .HasForeignKey(d => d.CodCidade)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CidadeDeParaCliente_Cidade");

                entity.HasOne(d => d.CodClienteNavigation)
                    .WithMany(p => p.CidadeDeParaClientes)
                    .HasForeignKey(d => d.CodCliente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CidadeDeParaCliente_Cliente");
            });

            modelBuilder.Entity<CidadeFonetica>(entity =>
            {
                entity.HasIndex(e => e.CodCidade, "IX_CidadeFonetica_CodCidade")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Fonetica, "IX_CidadeFonetica_Fonetica")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Fonetica).IsUnicode(false);

                entity.HasOne(d => d.CodCidadeNavigation)
                    .WithOne(p => p.CidadeFonetica)
                    .HasForeignKey<CidadeFonetica>(d => d.CodCidade)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CidadeFonetica_Cidade");
            });

            modelBuilder.Entity<CidadeIvan>(entity =>
            {
                entity.Property(e => e.NomeCidade).IsUnicode(false);
            });

            modelBuilder.Entity<CidadePo>(entity =>
            {
                entity.HasIndex(e => e.CodEstado, "IX_CidadePOS")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodIbge).IsUnicode(false);

                entity.Property(e => e.Latitude).IsUnicode(false);

                entity.Property(e => e.Longitude).IsUnicode(false);

                entity.Property(e => e.NomeCidade).IsUnicode(false);

                entity.HasOne(d => d.CodEstadoNavigation)
                    .WithMany(p => p.CidadePos)
                    .HasForeignKey(d => d.CodEstado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CidadePOS_EstadoPOS");
            });

            modelBuilder.Entity<CidadePosdePara>(entity =>
            {
                entity.HasIndex(e => e.CodCidadePos, "IX_CidadePOSDePara")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodCidade, "IX_CidadePOSDePara_1")
                    .HasFillFactor((byte)90);

                entity.HasOne(d => d.CodCidadeNavigation)
                    .WithMany(p => p.CidadePosdeParas)
                    .HasForeignKey(d => d.CodCidade)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CidadePOSDePara_Cidade");

                entity.HasOne(d => d.CodCidadePosNavigation)
                    .WithMany(p => p.CidadePosdeParas)
                    .HasForeignKey(d => d.CodCidadePos)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CidadePOSDePara_CidadePOS");
            });

            modelBuilder.Entity<Cliente>(entity =>
            {
                entity.HasKey(e => e.CodCliente)
                    .HasName("PK__Cliente__44FF419A");

                entity.HasIndex(e => e.CodCliente, "_dta_index_Cliente_7_1953494088__K1_8_10")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodCliente, e.NomeFantasia }, "_dta_index_Cliente_7_245016054__K1_K9")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodCliente).ValueGeneratedNever();

                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.Cidade)
                    .IsUnicode(false)
                    .HasComment("acertar c/ tabela cidade");

                entity.Property(e => e.Cnpj).IsUnicode(false);

                entity.Property(e => e.CodTipoMercado).HasDefaultValueSql("((1))");

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCoordenadorContrato).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManutencao).IsUnicode(false);

                entity.Property(e => e.ComplemEnd).IsUnicode(false);

                entity.Property(e => e.DataCadastro).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DeflacaoObslab).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.Fax).IsUnicode(false);

                entity.Property(e => e.Fone).IsUnicode(false);

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("((1))");

                entity.Property(e => e.IndPecaListaSomente).HasDefaultValueSql("((1))");

                entity.Property(e => e.IndRevisao)
                    .HasDefaultValueSql("((0))")
                    .HasComment("usado para o \"compass\"");

                entity.Property(e => e.InflacaoObslab).IsUnicode(false);

                entity.Property(e => e.InscricaoEstadual).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NumBanco).IsUnicode(false);

                entity.Property(e => e.NumeroEnd).IsUnicode(false);

                entity.Property(e => e.ObsCliente).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.RazaoSocial).IsUnicode(false);

                entity.Property(e => e.SiglaUf)
                    .IsUnicode(false)
                    .HasComment("Deletar campo");

                entity.Property(e => e.Site).IsUnicode(false);

                entity.Property(e => e.Telefone1).IsUnicode(false);

                entity.Property(e => e.Telefone2).IsUnicode(false);

                entity.Property(e => e.TotalEquip).HasComment("deletar campo");

                entity.Property(e => e.TotalEquipAtivos).HasComment("deletar campo");

                entity.Property(e => e.TotalEquipDeastivados).HasComment("deletar campo");

                entity.HasOne(d => d.CodCidadeNavigation)
                    .WithMany(p => p.Clientes)
                    .HasForeignKey(d => d.CodCidade)
                    .HasConstraintName("FK_Cliente_Cidade");

                entity.HasOne(d => d.CodFormaPagtoNavigation)
                    .WithMany(p => p.Clientes)
                    .HasForeignKey(d => d.CodFormaPagto)
                    .HasConstraintName("FK_Cliente_FormaPagto");

                entity.HasOne(d => d.CodMoedaNavigation)
                    .WithMany(p => p.Clientes)
                    .HasForeignKey(d => d.CodMoeda)
                    .HasConstraintName("FK_Cliente_Moeda");

                entity.HasOne(d => d.CodPecaListaNavigation)
                    .WithMany(p => p.Clientes)
                    .HasForeignKey(d => d.CodPecaLista)
                    .HasConstraintName("FK_Cliente_PecaLista");

                entity.HasOne(d => d.CodTipoFreteNavigation)
                    .WithMany(p => p.Clientes)
                    .HasForeignKey(d => d.CodTipoFrete)
                    .HasConstraintName("FK_Cliente_TipoFrete");

                entity.HasOne(d => d.CodTransportadoraNavigation)
                    .WithMany(p => p.Clientes)
                    .HasForeignKey(d => d.CodTransportadora)
                    .HasConstraintName("FK_Cliente_Transportadoras");
            });

            modelBuilder.Entity<ClienteBancadaListum>(entity =>
            {
                entity.HasKey(e => new { e.CodClienteBancada, e.CodBancadaLista })
                    .HasName("PK__ClienteBancadaLi__19B5BC39");

                entity.HasOne(d => d.CodBancadaListaNavigation)
                    .WithMany(p => p.ClienteBancadaLista)
                    .HasForeignKey(d => d.CodBancadaLista)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ClienteBa__CodBa__1C9228E4");

                entity.HasOne(d => d.CodClienteBancadaNavigation)
                    .WithMany(p => p.ClienteBancadaLista)
                    .HasForeignKey(d => d.CodClienteBancada)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ClienteBa__CodCl__1D864D1D");
            });

            modelBuilder.Entity<ClienteBancadum>(entity =>
            {
                entity.HasKey(e => e.CodClienteBancada)
                    .HasName("PK__ClienteBancada__7E0DA1C4");

                entity.HasIndex(e => e.CodClienteBancada, "_dta_index_ClienteBancada_7_1803869493__K1_3_4")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Apelido, "_dta_index_ClienteBancada_7_1803869493__K4_1")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodClienteBancada).ValueGeneratedNever();

                entity.Property(e => e.Apelido).IsUnicode(false);

                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.CnpjCgc).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.Complem).IsUnicode(false);

                entity.Property(e => e.Contato).IsUnicode(false);

                entity.Property(e => e.DataManut).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DeflacaoObs).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.IndOrcamento).HasDefaultValueSql("(0)");

                entity.Property(e => e.InflacaoObs).IsUnicode(false);

                entity.Property(e => e.NomeCliente).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.Telefone).IsUnicode(false);

                entity.HasOne(d => d.CodCidadeNavigation)
                    .WithMany(p => p.ClienteBancada)
                    .HasForeignKey(d => d.CodCidade)
                    .HasConstraintName("FK__ClienteBa__CodCi__03C67B1A");
            });

            modelBuilder.Entity<ClienteIntervPerfil>(entity =>
            {
                entity.Property(e => e.CodClienteIntervPerfil).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<ClientePeca>(entity =>
            {
                entity.HasIndex(e => new { e.CodContrato, e.CodPeca }, "IX_CLIENTEPECA")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.HasOne(d => d.CodClienteNavigation)
                    .WithMany(p => p.ClientePecas)
                    .HasForeignKey(d => d.CodCliente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientePeca_Cliente");

                entity.HasOne(d => d.CodContratoNavigation)
                    .WithMany(p => p.ClientePecas)
                    .HasForeignKey(d => d.CodContrato)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientePeca_Contrato");

                entity.HasOne(d => d.CodPecaNavigation)
                    .WithMany(p => p.ClientePecas)
                    .HasForeignKey(d => d.CodPeca)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientePeca_Peca");
            });

            modelBuilder.Entity<ClientePeca060520>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);
            });

            modelBuilder.Entity<ClientePecaGenerica>(entity =>
            {
                entity.HasIndex(e => e.CodPeca, "IDX_ClientePecaGenerica_cod_peca_adv")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);
            });

            modelBuilder.Entity<ClienteSemListum>(entity =>
            {
                entity.HasOne(d => d.CodClienteNavigation)
                    .WithMany(p => p.ClienteSemLista)
                    .HasForeignKey(d => d.CodCliente)
                    .HasConstraintName("FK_ClienteSemLista_Cliente");

                entity.HasOne(d => d.CodContratoNavigation)
                    .WithMany(p => p.ClienteSemLista)
                    .HasForeignKey(d => d.CodContrato)
                    .HasConstraintName("FK_ClienteSemLista_Contrato");
            });

            modelBuilder.Entity<ClienteUsuario>(entity =>
            {
                entity.HasKey(e => new { e.CodCliente, e.CodUsuario })
                    .HasName("PK__ClienteUsuario__711E8651");

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.CodClienteNavigation)
                    .WithMany(p => p.ClienteUsuarios)
                    .HasForeignKey(d => d.CodCliente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ClienteUs__CodCl__7306CEC3");

                entity.HasOne(d => d.CodUsuarioNavigation)
                    .WithMany(p => p.ClienteUsuarios)
                    .HasForeignKey(d => d.CodUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClienteUsuario_Usuario");
            });

            modelBuilder.Entity<CobrancaSicredi1>(entity =>
            {
                entity.Property(e => e.Cnpj).IsUnicode(false);

                entity.Property(e => e.CnpjCooperativa).IsUnicode(false);

                entity.Property(e => e.Cnpjperto).IsUnicode(false);

                entity.Property(e => e.CodCliente).IsUnicode(false);

                entity.Property(e => e.CodCooperativa).IsUnicode(false);

                entity.Property(e => e.CodigoUa).IsUnicode(false);

                entity.Property(e => e.GrupoEstados).IsUnicode(false);

                entity.Property(e => e.NomTipoIntervencao).IsUnicode(false);

                entity.Property(e => e.NomeCidade).IsUnicode(false);

                entity.Property(e => e.NomeCooperativa).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeReduzidoCooperativa).IsUnicode(false);

                entity.Property(e => e.NomeRepresentante).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumeroLogico).IsUnicode(false);

                entity.Property(e => e.NumeroNf).IsUnicode(false);

                entity.Property(e => e.NumeroOs).IsUnicode(false);

                entity.Property(e => e.RazaoSocial).IsUnicode(false);

                entity.Property(e => e.RazaoSocialCooperativa).IsUnicode(false);

                entity.Property(e => e.Servico).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);
            });

            modelBuilder.Entity<CobrancaSicredi2>(entity =>
            {
                entity.Property(e => e.Cnpj).IsUnicode(false);

                entity.Property(e => e.CnpjCooperativa).IsUnicode(false);

                entity.Property(e => e.Cnpjperto).IsUnicode(false);

                entity.Property(e => e.CodCliente).IsUnicode(false);

                entity.Property(e => e.CodCooperativa).IsUnicode(false);

                entity.Property(e => e.CodigoUa).IsUnicode(false);

                entity.Property(e => e.GrupoEstados).IsUnicode(false);

                entity.Property(e => e.NomTipoIntervencao).IsUnicode(false);

                entity.Property(e => e.NomeCidade).IsUnicode(false);

                entity.Property(e => e.NomeCooperativa).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeReduzidoCooperativa).IsUnicode(false);

                entity.Property(e => e.NomeRepresentante).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumeroLogico).IsUnicode(false);

                entity.Property(e => e.NumeroNf).IsUnicode(false);

                entity.Property(e => e.NumeroOs).IsUnicode(false);

                entity.Property(e => e.RazaoSocial).IsUnicode(false);

                entity.Property(e => e.RazaoSocialCooperativa).IsUnicode(false);

                entity.Property(e => e.Servico).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);
            });

            modelBuilder.Entity<ComparacaoPo>(entity =>
            {
                entity.Property(e => e.Cnpj).IsUnicode(false);

                entity.Property(e => e.RazãoSocial).IsUnicode(false);
            });

            modelBuilder.Entity<ComponentePo>(entity =>
            {
                entity.HasIndex(e => e.NomeComponentePos, "IX_ComponentePOS_NomeComponente")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuarioManutencao).IsUnicode(false);

                entity.Property(e => e.NomeComponentePos).IsUnicode(false);

                entity.HasOne(d => d.CodUsuarioManutencaoNavigation)
                    .WithMany(p => p.ComponentePos)
                    .HasForeignKey(d => d.CodUsuarioManutencao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ComponentePOS_Usuario");
            });

            modelBuilder.Entity<Conexao>(entity =>
            {
                entity.HasKey(e => e.CodConexao)
                    .HasName("Conexao_PK");

                entity.Property(e => e.NomeConexao).IsUnicode(false);

                entity.Property(e => e.StringConexao).IsUnicode(false);
            });

            modelBuilder.Entity<ConfigEquipModulo>(entity =>
            {
                entity.Property(e => e.CodEcausa).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);
            });

            modelBuilder.Entity<Conjunto>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DescConjunto).IsUnicode(false);

                entity.Property(e => e.NomeConjunto).IsUnicode(false);

                entity.HasOne(d => d.CodPecaBaseNavigation)
                    .WithMany(p => p.Conjuntos)
                    .HasForeignKey(d => d.CodPecaBase)
                    .HasConstraintName("FK_Conjunto_Peca");

                entity.HasOne(d => d.CodUsuarioCadNavigation)
                    .WithMany(p => p.ConjuntoCodUsuarioCadNavigations)
                    .HasForeignKey(d => d.CodUsuarioCad)
                    .HasConstraintName("FK_Conjunto_UsuarioCad");

                entity.HasOne(d => d.CodUsuarioManutNavigation)
                    .WithMany(p => p.ConjuntoCodUsuarioManutNavigations)
                    .HasForeignKey(d => d.CodUsuarioManut)
                    .HasConstraintName("FK_Conjunto_UsuarioManut");
            });

            modelBuilder.Entity<ConjuntoConjunto>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.CodConjuntoNavigation)
                    .WithMany(p => p.ConjuntoConjuntoCodConjuntoNavigations)
                    .HasForeignKey(d => d.CodConjunto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ConjuntoConjunto_Conjunto");

                entity.HasOne(d => d.CodConjuntoFilhoNavigation)
                    .WithMany(p => p.ConjuntoConjuntoCodConjuntoFilhoNavigations)
                    .HasForeignKey(d => d.CodConjuntoFilho)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ConjuntoConjunto_Conjunto1");

                entity.HasOne(d => d.CodPecaAssociadaNavigation)
                    .WithMany(p => p.ConjuntoConjuntos)
                    .HasForeignKey(d => d.CodPecaAssociada)
                    .HasConstraintName("FK_ConjuntoConjunto_PecaAssociada");

                entity.HasOne(d => d.CodUsuarioCadNavigation)
                    .WithMany(p => p.ConjuntoConjuntoCodUsuarioCadNavigations)
                    .HasForeignKey(d => d.CodUsuarioCad)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ConjuntoConjunto_UsuarioCad");

                entity.HasOne(d => d.CodUsuarioManutNavigation)
                    .WithMany(p => p.ConjuntoConjuntoCodUsuarioManutNavigations)
                    .HasForeignKey(d => d.CodUsuarioManut)
                    .HasConstraintName("FK_ConjuntoConjunto_UsuarioManut");
            });

            modelBuilder.Entity<ConjuntoPeca>(entity =>
            {
                entity.HasKey(e => new { e.CodConjunto, e.CodPeca });

                entity.HasIndex(e => new { e.CodConjunto, e.CodPeca }, "ix_codconjunto_codpeca")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.CodConjuntoNavigation)
                    .WithMany(p => p.ConjuntoPecas)
                    .HasForeignKey(d => d.CodConjunto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ConjuntoPeca_Conjunto");

                entity.HasOne(d => d.CodPecaNavigation)
                    .WithMany(p => p.ConjuntoPecas)
                    .HasForeignKey(d => d.CodPeca)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ConjuntoPeca_Peca");

                entity.HasOne(d => d.CodUsuarioCadNavigation)
                    .WithMany(p => p.ConjuntoPecaCodUsuarioCadNavigations)
                    .HasForeignKey(d => d.CodUsuarioCad)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ConjuntoPeca_UsuarioCad");

                entity.HasOne(d => d.CodUsuarioManutNavigation)
                    .WithMany(p => p.ConjuntoPecaCodUsuarioManutNavigations)
                    .HasForeignKey(d => d.CodUsuarioManut)
                    .HasConstraintName("FK_ConjuntoPeca_UsuarioManut");
            });

            modelBuilder.Entity<ContaCorrente>(entity =>
            {
                entity.HasKey(e => e.CodContaCorrente)
                    .HasName("PK__ContaCorrente__49508C19");

                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.CodigoRapido).IsUnicode(false);

                entity.Property(e => e.Conta).IsUnicode(false);

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("(1)");

                entity.Property(e => e.NomeBanco).IsUnicode(false);

                entity.HasOne(d => d.CodCidadeNavigation)
                    .WithMany(p => p.ContaCorrentes)
                    .HasForeignKey(d => d.CodCidade)
                    .HasConstraintName("FK__ContaCorr__CodCi__4A44B052");
            });

            modelBuilder.Entity<Contrato>(entity =>
            {
                entity.HasKey(e => e.CodContrato)
                    .HasName("PK__Contrato__2EA5EC27");

                entity.HasIndex(e => e.CodContrato, "_dta_index_Contrato_7_1351116004__K1_5_8")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodContrato, e.CodTipoContrato }, "_dta_index_Contrato_7_1351116004__K1_K4_5_6")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IndAtivo, e.NomeContrato }, "_dta_index_Contrato_7_1351116004__K21_K6_1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodContrato, e.CodCliente }, "_dta_index_Contrato_7_135827696__K1_K3_7")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodContrato, e.CodTipoContrato }, "_dta_index_Contrato_7_135827696__K1_K4_5_7")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodContrato, "_dta_index_Contrato_7_589349264__K1_10")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodContrato, "_dta_index_Contrato_7_589349264__K1_15")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodContrato, "_dta_index_Contrato_7_589349264__K1_8")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodContrato, e.NroContrato }, "_dta_index_Contrato_7_589349264__K1_K5")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodContrato, "_dta_index_Contrato_9_135827696__K1_7_18")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodContrato).ValueGeneratedNever();

                entity.Property(e => e.BairroCobranca).IsUnicode(false);

                entity.Property(e => e.Cepcobranca).IsUnicode(false);

                entity.Property(e => e.CidadeCobranca).IsUnicode(false);

                entity.Property(e => e.Cnpj).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCancelamento).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManutencao).IsUnicode(false);

                entity.Property(e => e.ComplemEnd).IsUnicode(false);

                entity.Property(e => e.EnderecoCobranca).IsUnicode(false);

                entity.Property(e => e.Faxcobranca).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.Mtbfnominal).HasDefaultValueSql("((70))");

                entity.Property(e => e.NomeContrato).IsUnicode(false);

                entity.Property(e => e.NomeResponsavelCliente).IsUnicode(false);

                entity.Property(e => e.NomeResponsavelPerto).IsUnicode(false);

                entity.Property(e => e.NroContrato).IsUnicode(false);

                entity.Property(e => e.NumeroEnd).IsUnicode(false);

                entity.Property(e => e.ObjetoContrato).IsUnicode(false);

                entity.Property(e => e.SemCobertura).IsUnicode(false);

                entity.Property(e => e.SiglaUfcobranca).IsUnicode(false);

                entity.Property(e => e.TelefoneCobranca).IsUnicode(false);

                entity.HasOne(d => d.CodClienteNavigation)
                    .WithMany(p => p.Contratos)
                    .HasForeignKey(d => d.CodCliente)
                    .HasConstraintName("FK__Contrato__CodCli__318258D2");

                entity.HasOne(d => d.CodSlaNavigation)
                    .WithMany(p => p.Contratos)
                    .HasForeignKey(d => d.CodSla)
                    .HasConstraintName("FK__Contrato__CodSLA__2F9A1060");

                entity.HasOne(d => d.CodTipoContratoNavigation)
                    .WithMany(p => p.Contratos)
                    .HasForeignKey(d => d.CodTipoContrato)
                    .HasConstraintName("FK__Contrato__CodTip__32767D0B");
            });

            modelBuilder.Entity<ContratoEquipDatum>(entity =>
            {
                entity.HasKey(e => e.CodContratoEquipData)
                    .HasName("PK__ContratoEquipDat__39444182");

                entity.Property(e => e.CodContratoEquipData).ValueGeneratedNever();

                entity.Property(e => e.DescData).IsUnicode(false);

                entity.Property(e => e.NomeData).IsUnicode(false);
            });

            modelBuilder.Entity<ContratoEquipMultum>(entity =>
            {
                entity.HasKey(e => e.CodContratoEquipMulta)
                    .HasName("PK__ContratoEquipMul__6D031153");

                entity.Property(e => e.CodContratoEquipMulta).ValueGeneratedNever();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("(1)");

                entity.HasOne(d => d.CodTipoMultaNavigation)
                    .WithMany(p => p.ContratoEquipMulta)
                    .HasForeignKey(d => d.CodTipoMulta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ContratoE__CodTi__768C7B8D");

                entity.HasOne(d => d.CodTipoPercMultaNavigation)
                    .WithMany(p => p.ContratoEquipMulta)
                    .HasForeignKey(d => d.CodTipoPercMulta)
                    .HasConstraintName("FK__ContratoE__CodTi__75985754");

                entity.HasOne(d => d.Cod)
                    .WithMany(p => p.ContratoEquipMulta)
                    .HasForeignKey(d => new { d.CodContrato, d.CodTipoEquip, d.CodGrupoEquip, d.CodEquip })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContratoEquipMulta_ContratoEquipamento");
            });

            modelBuilder.Entity<ContratoEquipRetencao>(entity =>
            {
                entity.HasKey(e => e.CodContratoEquipRetencao)
                    .HasName("PK__ContratoEquipRet__73B00EE2");

                entity.Property(e => e.CodContratoEquipRetencao).ValueGeneratedNever();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("(1)");

                entity.HasOne(d => d.CodTipoRetencaoNavigation)
                    .WithMany(p => p.ContratoEquipRetencaos)
                    .HasForeignKey(d => d.CodTipoRetencao)
                    .HasConstraintName("FK__ContratoE__CodTi__77809FC6");

                entity.HasOne(d => d.Cod)
                    .WithMany(p => p.ContratoEquipRetencaos)
                    .HasForeignKey(d => new { d.CodContrato, d.CodTipoEquip, d.CodGrupoEquip, d.CodEquip })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ContratoEquipRet__7874C3FF");
            });

            modelBuilder.Entity<ContratoEquipamento>(entity =>
            {
                entity.HasKey(e => new { e.CodContrato, e.CodTipoEquip, e.CodGrupoEquip, e.CodEquip })
                    .HasName("PK__ContratoEquipame__6D2D2E85");

                entity.HasIndex(e => new { e.CodContrato, e.CodEquip, e.CodMagnus }, "IDX_CONTRATOEQUIPAMENTO_ADV00")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodContrato, "_dta_index_ContratoEquipamento_7_683969613__K1_2_3_4_8_10_11_12_13_14_15_16_17_18_19_20_21_22")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodContrato, e.CodTipoEquip, e.CodGrupoEquip, e.CodEquip }, "_dta_index_ContratoEquipamento_7_683969613__K1_K2_K3_K4_8_10_11_12_13_14_15_16_17_18_19_20_21_22")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodContrato, e.CodTipoEquip, e.CodGrupoEquip, e.CodEquip }, "_dta_index_ContratoEquipamento_7_683969613__K1_K2_K3_K4_8_17_18_20_21")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodContrato, e.CodEquip, e.CodGrupoEquip, e.CodTipoEquip }, "_dta_index_ContratoEquipamento_7_683969613__K1_K4_K3_K2_8_17_18_20_21_2533")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodTipoEquip, e.CodGrupoEquip, e.CodEquip, e.CodContrato }, "_dta_index_ContratoEquipamento_7_683969613__K2_K3_K4_K1_8_10_11_12_13_14_15_16_17_18_19_20_21_22")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodEquip, e.CodContrato }, "_dta_index_ContratoEquipamento_7_683969613__K4_K1_32")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.CodContratoNavigation)
                    .WithMany(p => p.ContratoEquipamentos)
                    .HasForeignKey(d => d.CodContrato)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContratoEquipamento_Contrato");

                entity.HasOne(d => d.CodContratoEquipDataEntNavigation)
                    .WithMany(p => p.ContratoEquipamentoCodContratoEquipDataEntNavigations)
                    .HasForeignKey(d => d.CodContratoEquipDataEnt)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContratoEquipamento_ContratoEquipData1");

                entity.HasOne(d => d.CodContratoEquipDataGarNavigation)
                    .WithMany(p => p.ContratoEquipamentoCodContratoEquipDataGarNavigations)
                    .HasForeignKey(d => d.CodContratoEquipDataGar)
                    .HasConstraintName("FK_ContratoEquipamento_ContratoEquipData");

                entity.HasOne(d => d.CodContratoEquipDataInsNavigation)
                    .WithMany(p => p.ContratoEquipamentoCodContratoEquipDataInsNavigations)
                    .HasForeignKey(d => d.CodContratoEquipDataIns)
                    .HasConstraintName("FK_ContratoEquipamento_ContratoEquipData2");

                entity.HasOne(d => d.CodTipoGarantiaNavigation)
                    .WithMany(p => p.ContratoEquipamentos)
                    .HasForeignKey(d => d.CodTipoGarantia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContratoEquipamento_TipoGarantia");

                entity.HasOne(d => d.CodUsuarioCadNavigation)
                    .WithMany(p => p.ContratoEquipamentoCodUsuarioCadNavigations)
                    .HasForeignKey(d => d.CodUsuarioCad)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContratoEquipamento_UsuarioCad");

                entity.HasOne(d => d.CodUsuarioManutNavigation)
                    .WithMany(p => p.ContratoEquipamentoCodUsuarioManutNavigations)
                    .HasForeignKey(d => d.CodUsuarioManut)
                    .HasConstraintName("FK_ContratoEquipamento_UsuarioManut");
            });

            modelBuilder.Entity<ContratoPeca>(entity =>
            {
                entity.HasKey(e => new { e.CodPeca, e.CodContrato })
                    .HasName("PK__ContratoPeca__741A2336");

                entity.Property(e => e.ValIpi).HasDefaultValueSql("(0)");

                entity.Property(e => e.ValPeca).HasDefaultValueSql("(0)");

                entity.HasOne(d => d.CodContratoNavigation)
                    .WithMany(p => p.ContratoPecas)
                    .HasForeignKey(d => d.CodContrato)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ContratoP__CodCo__76F68FE1");

                entity.HasOne(d => d.CodPecaNavigation)
                    .WithMany(p => p.ContratoPecas)
                    .HasForeignKey(d => d.CodPeca)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ContratoP__CodPe__77EAB41A");
            });

            modelBuilder.Entity<ContratoReajuste>(entity =>
            {
                entity.HasKey(e => e.CodContratoReajuste)
                    .HasName("PK_ContratoRE");

                entity.Property(e => e.CodContratoReajuste).ValueGeneratedNever();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.HasOne(d => d.CodContratoNavigation)
                    .WithMany(p => p.ContratoReajustes)
                    .HasForeignKey(d => d.CodContrato)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContratoRE_ContratoRE");

                entity.HasOne(d => d.CodTipoIndiceReajusteNavigation)
                    .WithMany(p => p.ContratoReajustes)
                    .HasForeignKey(d => d.CodTipoIndiceReajuste)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContratoRE_TipoIndiceReajuste");
            });

            modelBuilder.Entity<ContratoServico>(entity =>
            {
                entity.HasKey(e => e.CodContratoServico)
                    .HasName("PK__ContratoServico__72E607DB");

                entity.HasIndex(e => new { e.CodServico, e.CodContratoServico }, "_dta_index_ContratoServico_7_1199395392__K3_K1_2_4_5_6_7_8")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodContratoServico).ValueGeneratedNever();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCadastroDel).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManutencaoDel).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).IsUnicode(false);

                entity.Property(e => e.DataHoraCadastroDel).IsUnicode(false);

                entity.Property(e => e.DataHoraManut).IsUnicode(false);

                entity.Property(e => e.DataHoraManutencaoDel).IsUnicode(false);
            });

            modelBuilder.Entity<ContratoServicoBkp>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCadastroDel).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManutencaoDel).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).IsUnicode(false);

                entity.Property(e => e.DataHoraCadastroDel).IsUnicode(false);

                entity.Property(e => e.DataHoraManut).IsUnicode(false);

                entity.Property(e => e.DataHoraManutencaoDel).IsUnicode(false);
            });

            modelBuilder.Entity<ContratoServicoBkpold>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCadastroDel).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManutencaoDel).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).IsUnicode(false);

                entity.Property(e => e.DataHoraCadastroDel).IsUnicode(false);

                entity.Property(e => e.DataHoraManut).IsUnicode(false);

                entity.Property(e => e.DataHoraManutencaoDel).IsUnicode(false);
            });

            modelBuilder.Entity<ContratoSla>(entity =>
            {
                entity.HasKey(e => new { e.CodContrato, e.CodSla })
                    .HasName("PK__ContratoSLA__695C9DA1");

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.CodContratoNavigation)
                    .WithMany(p => p.ContratoSlas)
                    .HasForeignKey(d => d.CodContrato)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContratoSLA_Contrato");

                entity.HasOne(d => d.CodSlaNavigation)
                    .WithMany(p => p.ContratoSlas)
                    .HasForeignKey(d => d.CodSla)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContratoSLA_SLA");
            });

            modelBuilder.Entity<ControleConsolidado>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.CodControleConsolidado).ValueGeneratedOnAdd();

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);

                entity.Property(e => e.NomeReporting).IsUnicode(false);
            });

            modelBuilder.Entity<ControleEnvioEmailCd>(entity =>
            {
                entity.HasIndex(e => e.CodOs, "IX_ControleEnvioEmailCDS")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.HasOne(d => d.CodOsNavigation)
                    .WithMany(p => p.ControleEnvioEmailCds)
                    .HasForeignKey(d => d.CodOs)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ControleEnvioEmailCDS_OS");

                entity.HasOne(d => d.CodUsuarioNavigation)
                    .WithMany(p => p.ControleEnvioEmailCds)
                    .HasForeignKey(d => d.CodUsuario)
                    .HasConstraintName("FK_ControleEnvioEmailCDS_Usuario");
            });

            modelBuilder.Entity<ControleEnvioEmailCdserro>(entity =>
            {
                entity.HasIndex(e => e.CodOs, "IX_ControleEnvioEmailCDSErro")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Erro).IsUnicode(false);

                entity.HasOne(d => d.CodOsNavigation)
                    .WithMany(p => p.ControleEnvioEmailCdserros)
                    .HasForeignKey(d => d.CodOs)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ControleEnvioEmailCDSErro_OS");
            });

            modelBuilder.Entity<ControleEnvioEmailCdsreenvio>(entity =>
            {
                entity.HasIndex(e => e.CodOs, "IX_ControleEnvioEmailCDSReenvio")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodUsuario, "IX_ControleEnvioEmailCDSReenvio_1")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.HasOne(d => d.CodOsNavigation)
                    .WithMany(p => p.ControleEnvioEmailCdsreenvios)
                    .HasForeignKey(d => d.CodOs)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ControleEnvioEmailCDSReenvio_OS");

                entity.HasOne(d => d.CodUsuarioNavigation)
                    .WithMany(p => p.ControleEnvioEmailCdsreenvios)
                    .HasForeignKey(d => d.CodUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ControleEnvioEmailCDSReenvio_Usuario");
            });

            modelBuilder.Entity<ControleEnvioEmailVip>(entity =>
            {
                entity.HasIndex(e => e.CodOs, "IX_ControleEnvioEmailVip")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Titulo).IsUnicode(false);

                entity.HasOne(d => d.CodOsNavigation)
                    .WithMany(p => p.ControleEnvioEmailVips)
                    .HasForeignKey(d => d.CodOs)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ControleEnvioEmailVip_OS");
            });

            modelBuilder.Entity<ControleEnvioEmailVipErro>(entity =>
            {
                entity.HasIndex(e => e.CodOs, "IX_ControleEnvioEmailVipErro")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Erro).IsUnicode(false);

                entity.Property(e => e.Titulo).IsUnicode(false);

                entity.HasOne(d => d.CodOsNavigation)
                    .WithMany(p => p.ControleEnvioEmailVipErros)
                    .HasForeignKey(d => d.CodOs)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ControleEnvioEmailVipErro_OS");
            });

            modelBuilder.Entity<ControlePo>(entity =>
            {
                entity.Property(e => e.CnpjestabelecimentoCliente).IsUnicode(false);

                entity.Property(e => e.NumTerminal).IsUnicode(false);
            });

            modelBuilder.Entity<ControlePosserie>(entity =>
            {
                entity.Property(e => e.CodControlePosserie).ValueGeneratedOnAdd();

                entity.Property(e => e.NumSerie).IsUnicode(false);
            });

            modelBuilder.Entity<ControlePosserieTmp>(entity =>
            {
                entity.Property(e => e.Cod).ValueGeneratedOnAdd();

                entity.Property(e => e.NumSerie).IsUnicode(false);
            });

            modelBuilder.Entity<ControleReincidencium>(entity =>
            {
                entity.HasKey(e => e.CodControleReincidencia)
                    .HasName("PK__ControleReincide__76026BA8");

                entity.Property(e => e.CodControleReincidencia).ValueGeneratedNever();

                entity.Property(e => e.Email).IsUnicode(false);

                entity.HasOne(d => d.CodClienteNavigation)
                    .WithMany(p => p.ControleReincidencia)
                    .HasForeignKey(d => d.CodCliente)
                    .HasConstraintName("FK__ControleR__CodCl__78DED853");
            });

            modelBuilder.Entity<CooperativaSicredi>(entity =>
            {
                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.Central).IsUnicode(false);

                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Cnpj).IsUnicode(false);

                entity.Property(e => e.CodCooperativa).IsUnicode(false);

                entity.Property(e => e.Credis).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.NomeCooperativa).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeReduzido).IsUnicode(false);

                entity.Property(e => e.Telefone).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<CorStatusServicoPo>(entity =>
            {
                entity.HasIndex(e => e.CodStatusServico, "IX_CorStatusServicoPos")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Cor).IsUnicode(false);

                entity.HasOne(d => d.CodStatusServicoNavigation)
                    .WithOne(p => p.CorStatusServicoPo)
                    .HasForeignKey<CorStatusServicoPo>(d => d.CodStatusServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CorStatusServicoPos_StatusServico");
            });

            modelBuilder.Entity<DadoImportacao>(entity =>
            {
                entity.HasKey(e => e.CodDadoImportacao)
                    .HasName("PK_Importacao");

                entity.Property(e => e.CaminhoArquivo).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.NomePecaLista).IsUnicode(false);

                entity.HasOne(d => d.CodDadoImportacaoTipoNavigation)
                    .WithMany(p => p.DadoImportacaos)
                    .HasForeignKey(d => d.CodDadoImportacaoTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DadoImportacao_DadoImportacaoTipo");
            });

            modelBuilder.Entity<DadoImportacaoTipo>(entity =>
            {
                entity.HasKey(e => e.CodDadoImportacaoTipo)
                    .HasName("PK_ImportacaoTipo");

                entity.Property(e => e.NomeDadoImportacaoTipo).IsUnicode(false);
            });

            modelBuilder.Entity<DadosDashboard>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<DadosDashboardBackup>(entity =>
            {
                entity.HasIndex(e => e.AnoMes, "<Name of Missing Index, sysname,>")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<DadosDashboardPendenciaBackup>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<DadosDashboardPendencium>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<DadosDashboardReincidenciaBackup>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<DadosDashboardReincidencium>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<Dashboard>(entity =>
            {
                entity.Property(e => e.Action).IsUnicode(false);

                entity.Property(e => e.Controller).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);
            });

            modelBuilder.Entity<DashboardChamadosFaltante>(entity =>
            {
                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.DescStatus).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);
            });

            modelBuilder.Entity<DashboardChamadosPendente>(entity =>
            {
                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.DescStatus).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);
            });

            modelBuilder.Entity<DashboardConfiguracao>(entity =>
            {
                entity.HasKey(e => e.CodConfig)
                    .HasName("PK__Dashboar__5B437CB6017C87E9");

                entity.Property(e => e.CodusuarioCad).IsUnicode(false);

                entity.Property(e => e.CodusuarioCadManut).IsUnicode(false);

                entity.HasOne(d => d.CodPaginaNavigation)
                    .WithMany(p => p.DashboardConfiguracaos)
                    .HasForeignKey(d => d.CodPagina)
                    .HasConstraintName("FK__Dashboard__CodPa__3737CDFF");

                entity.HasOne(d => d.CodmodalidadeNavigation)
                    .WithMany(p => p.DashboardConfiguracaos)
                    .HasForeignKey(d => d.Codmodalidade)
                    .HasConstraintName("FK__Dashboard__Codmo__39201671");

                entity.HasOne(d => d.CodperfilNavigation)
                    .WithMany(p => p.DashboardConfiguracaos)
                    .HasForeignKey(d => d.Codperfil)
                    .HasConstraintName("FK__Dashboard__Codpe__382BF238");
            });

            modelBuilder.Entity<DashboardDisponibilidade>(entity =>
            {
                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);
            });

            modelBuilder.Entity<DashboardModalidade>(entity =>
            {
                entity.HasKey(e => e.CodModalidade)
                    .HasName("PK__Dashboar__159E1F204B7DD1AE");

                entity.Property(e => e.DescModalidade).IsUnicode(false);
            });

            modelBuilder.Entity<DashboardPagina>(entity =>
            {
                entity.HasKey(e => e.CodPagina)
                    .HasName("PK__Dashboar__3B42DE37F4898E4A");

                entity.Property(e => e.Link).IsUnicode(false);

                entity.Property(e => e.NomePagina).IsUnicode(false);

                entity.Property(e => e.NomePaginaAlternativa).IsUnicode(false);

                entity.Property(e => e.PathThumb).IsUnicode(false);

                entity.Property(e => e.PathThumbAlternativo).IsUnicode(false);
            });

            modelBuilder.Entity<DashboardPecasFaltante>(entity =>
            {
                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);
            });

            modelBuilder.Entity<DashboardPerfi>(entity =>
            {
                entity.HasKey(e => e.Codperfil)
                    .HasName("PK__Dashboar__E337D3C3BF990646");

                entity.Property(e => e.Nomeperfil).IsUnicode(false);
            });

            modelBuilder.Entity<DashboardReincidenciaPorEquipamento>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);
            });

            modelBuilder.Entity<DashboardTecnicoDisponibilidade>(entity =>
            {
                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeUsuario).IsUnicode(false);
            });

            modelBuilder.Entity<DashboardTecnicoDisponibilidadeBackup>(entity =>
            {
                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeUsuario).IsUnicode(false);
            });

            modelBuilder.Entity<DashboardTecnicoDisponibilidadeNew>(entity =>
            {
                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeUsuario).IsUnicode(false);
            });

            modelBuilder.Entity<DashboardTecnicoDisponibilidadeNewBackup>(entity =>
            {
                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeUsuario).IsUnicode(false);
            });

            modelBuilder.Entity<DataHoraTrab>(entity =>
            {
                entity.HasKey(e => e.CodDataHoraTrab)
                    .HasName("PK__DataHoraTrab__3592E0D8");

                entity.Property(e => e.CodDataHoraTrab).ValueGeneratedNever();

                entity.HasOne(d => d.Cod)
                    .WithMany(p => p.DataHoraTrabs)
                    .HasForeignKey(d => new { d.CodOsbancada, d.CodPecaRe5114 })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DataHoraTrab_OSBancadaPecas");
            });

            modelBuilder.Entity<Dbadarlan>(entity =>
            {
                entity.Property(e => e.Cod).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);
            });

            modelBuilder.Entity<DboVwTarefa>(entity =>
            {
                entity.ToView("dbo.vw_Tarefas");

                entity.Property(e => e.DescricaoTarefa).IsUnicode(false);

                entity.Property(e => e.NomeTarefaStatus).IsUnicode(false);

                entity.Property(e => e.TituloTarefa).IsUnicode(false);
            });

            modelBuilder.Entity<DboVwcAuditoriaValore>(entity =>
            {
                entity.ToView("dbo.vwc_AuditoriaValores");

                entity.Property(e => e.Autonomia).IsUnicode(false);

                entity.Property(e => e.DespesaOutras).IsUnicode(false);

                entity.Property(e => e.DespesaTotal).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeRegiao).IsUnicode(false);

                entity.Property(e => e.NomeUsuarioCredito).IsUnicode(false);

                entity.Property(e => e.NumeroCartao).IsUnicode(false);

                entity.Property(e => e.Placa).IsUnicode(false);

                entity.Property(e => e.PrecoLitro).IsUnicode(false);
            });

            modelBuilder.Entity<DboVwcCnpjClientesLocai>(entity =>
            {
                entity.ToView("dbo.vwc_CNPJ_Clientes_Locais");

                entity.Property(e => e.CnpjCliente).IsUnicode(false);

                entity.Property(e => e.CnpjLocal).IsUnicode(false);

                entity.Property(e => e.Cnpjfaturamento).IsUnicode(false);

                entity.Property(e => e.NomeContrato).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NomeTipoContrato).IsUnicode(false);

                entity.Property(e => e.NroContrato).IsUnicode(false);
            });

            modelBuilder.Entity<DboVwcExportacaoChamadosTodosDetalhe>(entity =>
            {
                entity.ToView("dbo.vwc_ExportacaoChamadosTodosDetalhes");

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.DescNumSerieNi).IsUnicode(false);

                entity.Property(e => e.DiaAbertura).IsUnicode(false);

                entity.Property(e => e.MesAbertura).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NomTipoIntervencao).IsUnicode(false);

                entity.Property(e => e.NomeContrato).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFantasiaCliente).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NomeRegiao).IsUnicode(false);

                entity.Property(e => e.NomeSla).IsUnicode(false);

                entity.Property(e => e.NomeStatusServico).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumBanco).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.Observ).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.Racesso).IsUnicode(false);

                entity.Property(e => e.Rhorario).IsUnicode(false);

                entity.Property(e => e.Semat).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);
            });

            modelBuilder.Entity<DboVwcHugo>(entity =>
            {
                entity.ToView("dbo.vwc_Hugo");

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.CodMagnusPeca).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.DescNumSerieNi).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NomTipoIntervencao).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.NomeAcao).IsUnicode(false);

                entity.Property(e => e.NomeCausa).IsUnicode(false);

                entity.Property(e => e.NomeContrato).IsUnicode(false);

                entity.Property(e => e.NomeDaPeca).IsUnicode(false);

                entity.Property(e => e.NomeDefeito).IsUnicode(false);

                entity.Property(e => e.NomeDoTecnico).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeEquipSns).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFantasiaCliente).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);

                entity.Property(e => e.NomeRegiao).IsUnicode(false);

                entity.Property(e => e.NomeServico).IsUnicode(false);

                entity.Property(e => e.NomeSla).IsUnicode(false);

                entity.Property(e => e.NomeStatusServico).IsUnicode(false);

                entity.Property(e => e.NomeTipoCausa).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumBanco).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumOsquarteirizada).IsUnicode(false);

                entity.Property(e => e.NumRat).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.ObsRat).IsUnicode(false);

                entity.Property(e => e.Observ).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Rg).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.StatusAtendimentoRat).IsUnicode(false);

                entity.Property(e => e.StatusRat).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.TecnicoOs).IsUnicode(false);

                entity.Property(e => e.TecnicoRat).IsUnicode(false);

                entity.Property(e => e.TipoCausa).IsUnicode(false);

                entity.Property(e => e.TipoMaquina).IsUnicode(false);
            });

            modelBuilder.Entity<DboVwcRelDaniela>(entity =>
            {
                entity.ToView("dbo.vwc_Rel_Daniela");

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.DescNumSerieNi).IsUnicode(false);

                entity.Property(e => e.GarantiaEquipamento).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NomTipoIntervencao).IsUnicode(false);

                entity.Property(e => e.NomeContrato).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeEquipSns).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFantasiaCliente).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NomeRegiao).IsUnicode(false);

                entity.Property(e => e.NomeSla).IsUnicode(false);

                entity.Property(e => e.NomeStatusServico).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumBanco).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumOsquarteirizada).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.Observ).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.Rat).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);
            });

            modelBuilder.Entity<DboVwcRelatorioEliano>(entity =>
            {
                entity.ToView("dbo.vwc_RelatorioEliano");

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.DescNumSerieNi).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NomTipoIntervencao).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.NomeAcao).IsUnicode(false);

                entity.Property(e => e.NomeCausa).IsUnicode(false);

                entity.Property(e => e.NomeContrato).IsUnicode(false);

                entity.Property(e => e.NomeDefeito).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeEquipSns).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFantasiaCliente).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);

                entity.Property(e => e.NomeRegiao).IsUnicode(false);

                entity.Property(e => e.NomeServico).IsUnicode(false);

                entity.Property(e => e.NomeSla).IsUnicode(false);

                entity.Property(e => e.NomeStatusServico).IsUnicode(false);

                entity.Property(e => e.NomeTipoCausa).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumBanco).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumOsquarteirizada).IsUnicode(false);

                entity.Property(e => e.NumRat).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Rg).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.StatusRat).IsUnicode(false);

                entity.Property(e => e.TecnicoOs).IsUnicode(false);

                entity.Property(e => e.TecnicoRat).IsUnicode(false);
            });

            modelBuilder.Entity<DeParaCausaMotivo>(entity =>
            {
                entity.Property(e => e.CodDeParaCausaMotivo).ValueGeneratedOnAdd();

                entity.Property(e => e.CodEcausa).IsUnicode(false);

                entity.Property(e => e.CodMotivo).IsUnicode(false);

                entity.Property(e => e.NomeCausa).IsUnicode(false);
            });

            modelBuilder.Entity<Defeito>(entity =>
            {
                entity.HasKey(e => e.CodDefeito)
                    .HasName("PK_CodDefeito");

                entity.HasIndex(e => e.CodEdefeito, "IX_CodEDefeito")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NomeDefeito, "IX_NomeDefeito")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodDefeito).ValueGeneratedNever();

                entity.Property(e => e.CodEdefeito).IsUnicode(false);

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("(1)");

                entity.Property(e => e.NomeDefeito).IsUnicode(false);
            });

            modelBuilder.Entity<DefeitoComponente>(entity =>
            {
                entity.Property(e => e.CodDefeitoComponente).ValueGeneratedOnAdd();

                entity.Property(e => e.CodEcausa).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);
            });

            modelBuilder.Entity<DefeitoPo>(entity =>
            {
                entity.HasIndex(e => e.CodDefeito, "IX_DefeitoPOS")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodUsuarioCadastro, "IX_DefeitoPOS_Usuario")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DefeitoPos, "UK_DefeitoPOS_Defeito")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.DefeitoPos).IsUnicode(false);

                entity.HasOne(d => d.CodDefeitoNavigation)
                    .WithMany(p => p.DefeitoPos)
                    .HasForeignKey(d => d.CodDefeito)
                    .HasConstraintName("FK_DefeitoPOS_Defeito");

                entity.HasOne(d => d.CodUsuarioCadastroNavigation)
                    .WithMany(p => p.DefeitoPos)
                    .HasForeignKey(d => d.CodUsuarioCadastro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DefeitoPOS_Usuario");
            });

            modelBuilder.Entity<Departamento>(entity =>
            {
                entity.HasKey(e => e.CodDepartamento)
                    .HasName("PK__Departamento__7A47FDD8");

                entity.Property(e => e.CodDepartamento).ValueGeneratedNever();

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("(1)");

                entity.Property(e => e.NomeDepartamento).IsUnicode(false);
            });

            modelBuilder.Entity<Despesa>(entity =>
            {
                entity.HasKey(e => e.CodDespesa)
                    .HasName("Despesa_PK");

                entity.HasIndex(e => new { e.CodDespesaPeriodo, e.CodTecnico, e.CodDespesa, e.CodRat }, "_dta_index_Despesa_7_498920949__K2_K4_K1_K3_5")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodDespesaPeriodo, e.CodTecnico, e.IndAtivo, e.CodDespesa, e.CodRat }, "_dta_index_Despesa_7_498920949__K2_K4_K7_K1_K3")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodRat, e.CodDespesa, e.IndAtivo }, "_dta_index_Despesa_7_498920949__K3_K1_K7_8")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodRat, e.CodTecnico, e.CodDespesa }, "_dta_index_Despesa_7_498920949__K3_K4_K1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodRat, e.IndAtivo, e.CodDespesa }, "_dta_index_Despesa_7_498920949__K3_K7_K1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodRat, e.IndAtivo, e.CodDespesa, e.CodDespesaPeriodo, e.CodTecnico }, "_dta_index_Despesa_7_498920949__K3_K7_K1_K2_K4_8")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodTecnico, e.IndAtivo, e.CodDespesaPeriodo, e.CodDespesa }, "_dta_index_Despesa_7_498920949__K4_K7_K2_K1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IndAtivo, e.CodDespesaPeriodo, e.CodRat, e.CodDespesa }, "_dta_index_Despesa_7_498920949__K7_K2_K3_K1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IndAtivo, e.CodRat, e.CodDespesaPeriodo, e.CodDespesa }, "_dta_index_Despesa_7_498920949__K7_K3_K2_K1")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CentroCusto).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.CodDespesaPeriodoNavigation)
                    .WithMany(p => p.Despesas)
                    .HasForeignKey(d => d.CodDespesaPeriodo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DespesaPeriodo_Despesa_FK1");

                entity.HasOne(d => d.CodFilialNavigation)
                    .WithMany(p => p.Despesas)
                    .HasForeignKey(d => d.CodFilial)
                    .HasConstraintName("FK_Despesa_Filial");

                entity.HasOne(d => d.CodRatNavigation)
                    .WithMany(p => p.Despesas)
                    .HasForeignKey(d => d.CodRat)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("RAT_Despesa_FK1");

                entity.HasOne(d => d.CodTecnicoNavigation)
                    .WithMany(p => p.Despesas)
                    .HasForeignKey(d => d.CodTecnico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Despesa_Tecnico");
            });

            modelBuilder.Entity<DespesaAcompanhamentoDetalhado>(entity =>
            {
                entity.Property(e => e.NomeDespesaPeriodoTecnicoStatus).IsFixedLength(true);

                entity.Property(e => e.NomeTecnico).IsFixedLength(true);
            });

            modelBuilder.Entity<DespesaAdiantamento>(entity =>
            {
                entity.HasKey(e => e.CodDespesaAdiantamento)
                    .HasName("DespesaPeriodoAdiantamento_PK");

                entity.HasIndex(e => new { e.IndAtivo, e.CodDespesaAdiantamentoTipo, e.CodTecnico }, "_dta_index_DespesaAdiantamento_7_16823222__K6_K3_K2")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IndAtivo, e.CodDespesaAdiantamentoTipo, e.CodTecnico, e.CodDespesaAdiantamento }, "_dta_index_DespesaAdiantamento_7_16823222__K6_K3_K2_K1_5")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.CodDespesaAdiantamentoTipoNavigation)
                    .WithMany(p => p.DespesaAdiantamentos)
                    .HasForeignKey(d => d.CodDespesaAdiantamentoTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DespesaAdiantamentoTipo_DespesaAdiantamento_FK1");

                entity.HasOne(d => d.CodTecnicoNavigation)
                    .WithMany(p => p.DespesaAdiantamentos)
                    .HasForeignKey(d => d.CodTecnico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Tecnico_DespesaAdiantamento_FK1");
            });

            modelBuilder.Entity<DespesaAdiantamentoPeriodo>(entity =>
            {
                entity.HasKey(e => e.CodDespesaAdiantamentoPeriodo)
                    .HasName("DespesaAdiantamentoPeriodo_PK");

                entity.HasIndex(e => e.CodDespesaPeriodo, "IX_DESPESAADIANTAMENTOPERIODO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodDespesaAdiantamento, "_dta_index_DespesaAdiantamentoPeriodo_7_2084306585__K2_4")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.CodDespesaAdiantamentoNavigation)
                    .WithMany(p => p.DespesaAdiantamentoPeriodos)
                    .HasForeignKey(d => d.CodDespesaAdiantamento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DespesaAdiantamento_DespesaAdiantamentoPeriodo_FK1");

                entity.HasOne(d => d.CodDespesaPeriodoNavigation)
                    .WithMany(p => p.DespesaAdiantamentoPeriodos)
                    .HasForeignKey(d => d.CodDespesaPeriodo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DespesaPeriodo_DespesaAdiantamentoPeriodo_FK1");

                entity.HasOne(d => d.CodUsuarioCadNavigation)
                    .WithMany(p => p.DespesaAdiantamentoPeriodos)
                    .HasForeignKey(d => d.CodUsuarioCad)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DespesaAdiantamentoPeriodo_UsuarioCad");
            });

            modelBuilder.Entity<DespesaAdiantamentoSolicitacao>(entity =>
            {
                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.Banco).IsUnicode(false);

                entity.Property(e => e.CodDespesaAdiantamentoSolicitacao).ValueGeneratedOnAdd();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.ContaCorrente).IsUnicode(false);

                entity.Property(e => e.Cpf).IsUnicode(false);

                entity.Property(e => e.Emails).IsUnicode(false);

                entity.Property(e => e.Justificativa).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);
            });

            modelBuilder.Entity<DespesaAdiantamentoTipo>(entity =>
            {
                entity.HasKey(e => e.CodDespesaAdiantamentoTipo)
                    .HasName("DespesaAdiantamentoTipo_PK");

                entity.Property(e => e.NomeAdiantamentoTipo).IsUnicode(false);
            });

            modelBuilder.Entity<DespesaAluguelCarro>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.HasOne(d => d.CodTecnicoNavigation)
                    .WithMany(p => p.DespesaAluguelCarros)
                    .HasForeignKey(d => d.CodTecnico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DespesaAluguelCarro_Tecnico");
            });

            modelBuilder.Entity<DespesaArqMorto>(entity =>
            {
                entity.Property(e => e.CentroCusto).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<DespesaCartaoCombustivel>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.Carro).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.Combustivel).IsUnicode(false);

                entity.Property(e => e.Cor).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.Placa).IsUnicode(false);
            });

            modelBuilder.Entity<DespesaCartaoCombustivelControle>(entity =>
            {
                entity.Property(e => e.Lote).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.Placa).IsUnicode(false);

                entity.Property(e => e.Tecnico).IsUnicode(false);
            });

            modelBuilder.Entity<DespesaCartaoCombustivelEmissao>(entity =>
            {
                entity.Property(e => e.DataCadastro).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DataLiberacaoCredito).IsUnicode(false);

                entity.Property(e => e.DataValidade).IsUnicode(false);

                entity.Property(e => e.IdentificadorCartao).IsUnicode(false);

                entity.Property(e => e.NomeCompleto).IsUnicode(false);

                entity.Property(e => e.NumeroCartao).IsUnicode(false);

                entity.Property(e => e.Placa).IsUnicode(false);

                entity.Property(e => e.Situacao).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e.TipoCredito).IsUnicode(false);
            });

            modelBuilder.Entity<DespesaCartaoCombustivelFaturamento>(entity =>
            {
                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<DespesaCartaoCombustivelTecnico>(entity =>
            {
                entity.Property(e => e.CodTecnico).IsFixedLength(true);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);
            });

            modelBuilder.Entity<DespesaConfiguracao>(entity =>
            {
                entity.HasKey(e => e.CodDespesaConfiguracao)
                    .HasName("DespesaConfiguracao_PK");

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<DespesaConfiguracaoCombustivel>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<DespesaItem>(entity =>
            {
                entity.HasKey(e => e.CodDespesaItem)
                    .HasName("DespesaItem_PK");

                entity.HasIndex(e => e.IndAtivo, "<Name of Missing Index, sysname,>")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IndAtivo, "IDX_DespesaItem_1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodDespesa, e.IndAtivo }, "IDX_DespesaItem_2")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BairroDestino).IsUnicode(false);

                entity.Property(e => e.BairroDestinoWebraska).IsUnicode(false);

                entity.Property(e => e.BairroOrigem).IsUnicode(false);

                entity.Property(e => e.BairroOrigemWebraska).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EnderecoDestino).IsUnicode(false);

                entity.Property(e => e.EnderecoDestinoWebraska).IsUnicode(false);

                entity.Property(e => e.EnderecoOrigem).IsUnicode(false);

                entity.Property(e => e.EnderecoOrigemWebraska).IsUnicode(false);

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("((1))");

                entity.Property(e => e.LatitudeHotel).IsUnicode(false);

                entity.Property(e => e.LongitudeHotel).IsUnicode(false);

                entity.Property(e => e.NomeCidadeDestinoWebraska).IsUnicode(false);

                entity.Property(e => e.NomeCidadeOrigemWebraska).IsUnicode(false);

                entity.Property(e => e.NumDestino).IsUnicode(false);

                entity.Property(e => e.NumDestinoWebraska).IsUnicode(false);

                entity.Property(e => e.NumNf).IsUnicode(false);

                entity.Property(e => e.NumOrigem).IsUnicode(false);

                entity.Property(e => e.NumOrigemWebraska).IsUnicode(false);

                entity.Property(e => e.Obs).IsUnicode(false);

                entity.Property(e => e.ObsReprovacao).IsUnicode(false);

                entity.Property(e => e.SiglaPaisDestinoWebraska).IsUnicode(false);

                entity.Property(e => e.SiglaPaisOrigemWebraska).IsUnicode(false);

                entity.Property(e => e.SiglaUfdestinoWebraska).IsUnicode(false);

                entity.Property(e => e.SiglaUforigemWebraska).IsUnicode(false);

                entity.Property(e => e.TentativaKm).IsUnicode(false);

                entity.HasOne(d => d.CodCidadeDestinoNavigation)
                    .WithMany(p => p.DespesaItemCodCidadeDestinoNavigations)
                    .HasForeignKey(d => d.CodCidadeDestino)
                    .HasConstraintName("Cidade_DespesaItem_FK2");

                entity.HasOne(d => d.CodCidadeOrigemNavigation)
                    .WithMany(p => p.DespesaItemCodCidadeOrigemNavigations)
                    .HasForeignKey(d => d.CodCidadeOrigem)
                    .HasConstraintName("CidadeOrigem_DespesaItem_FK1");

                entity.HasOne(d => d.CodDespesaNavigation)
                    .WithMany(p => p.DespesaItems)
                    .HasForeignKey(d => d.CodDespesa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Despesa_DespesaItem_FK1");

                entity.HasOne(d => d.CodDespesaItemAlertaNavigation)
                    .WithMany(p => p.DespesaItems)
                    .HasForeignKey(d => d.CodDespesaItemAlerta)
                    .HasConstraintName("DespesaItemAlerta_DespesaItem_FK1");

                entity.HasOne(d => d.CodDespesaTipoNavigation)
                    .WithMany(p => p.DespesaItems)
                    .HasForeignKey(d => d.CodDespesaTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DespesaTipo_DespesaItem_FK1");
            });

            modelBuilder.Entity<DespesaItemAlertum>(entity =>
            {
                entity.HasKey(e => e.CodDespesaItemAlerta)
                    .HasName("DespesaItemAlerta_PK");

                entity.Property(e => e.DescItemAlerta).IsUnicode(false);
            });

            modelBuilder.Entity<DespesaItemArqMorto>(entity =>
            {
                entity.Property(e => e.BairroDestino).IsUnicode(false);

                entity.Property(e => e.BairroDestinoWebraska).IsUnicode(false);

                entity.Property(e => e.BairroOrigem).IsUnicode(false);

                entity.Property(e => e.BairroOrigemWebraska).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EnderecoDestino).IsUnicode(false);

                entity.Property(e => e.EnderecoDestinoWebraska).IsUnicode(false);

                entity.Property(e => e.EnderecoOrigem).IsUnicode(false);

                entity.Property(e => e.EnderecoOrigemWebraska).IsUnicode(false);

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("((1))");

                entity.Property(e => e.LatitudeHotel).IsUnicode(false);

                entity.Property(e => e.LongitudeHotel).IsUnicode(false);

                entity.Property(e => e.NomeCidadeDestinoWebraska).IsUnicode(false);

                entity.Property(e => e.NomeCidadeOrigemWebraska).IsUnicode(false);

                entity.Property(e => e.NumDestino).IsUnicode(false);

                entity.Property(e => e.NumDestinoWebraska).IsUnicode(false);

                entity.Property(e => e.NumNf).IsUnicode(false);

                entity.Property(e => e.NumOrigem).IsUnicode(false);

                entity.Property(e => e.NumOrigemWebraska).IsUnicode(false);

                entity.Property(e => e.Obs).IsUnicode(false);

                entity.Property(e => e.ObsReprovacao).IsUnicode(false);

                entity.Property(e => e.SiglaPaisDestinoWebraska).IsUnicode(false);

                entity.Property(e => e.SiglaPaisOrigemWebraska).IsUnicode(false);

                entity.Property(e => e.SiglaUfdestinoWebraska).IsUnicode(false);

                entity.Property(e => e.SiglaUforigemWebraska).IsUnicode(false);

                entity.Property(e => e.TentativaKm).IsUnicode(false);
            });

            modelBuilder.Entity<DespesaPeriodo>(entity =>
            {
                entity.HasKey(e => e.CodDespesaPeriodo)
                    .HasName("DespesaPeriodo_PK");

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.CodDespesaConfiguracaoNavigation)
                    .WithMany(p => p.DespesaPeriodos)
                    .HasForeignKey(d => d.CodDespesaConfiguracao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DespesaPeriodo_DespesaConfiguracao");
            });

            modelBuilder.Entity<DespesaPeriodoTecnico>(entity =>
            {
                entity.HasKey(e => e.CodDespesaPeriodoTecnico)
                    .HasName("DespesaPeriodoTecnico_PK");

                entity.HasIndex(e => new { e.CodTecnico, e.CodDespesaPeriodo, e.CodDespesaPeriodoTecnicoStatus }, "_dta_index_DespesaPeriodoTecnico_7_1408828181__K3_K2_K4")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodTecnico, e.CodDespesaPeriodoTecnicoStatus }, "_dta_index_DespesaPeriodoTecnico_7_1408828181__K3_K4")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodDespesaPeriodoTecnicoStatus, e.CodDespesaPeriodo, e.CodTecnico }, "_dta_index_DespesaPeriodoTecnico_7_1408828181__K4_K2_K3")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCompensacao).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCredito).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCreditoCancelado).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.CodUsuarioVerificacao).IsUnicode(false);

                entity.Property(e => e.CodUsuarioVerificacaoCancelado).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.CodDespesaPeriodoNavigation)
                    .WithMany(p => p.DespesaPeriodoTecnicos)
                    .HasForeignKey(d => d.CodDespesaPeriodo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DespesaPeriodo_DespesaPeriodoTecnico_FK1");

                entity.HasOne(d => d.CodDespesaPeriodoTecnicoStatusNavigation)
                    .WithMany(p => p.DespesaPeriodoTecnicos)
                    .HasForeignKey(d => d.CodDespesaPeriodoTecnicoStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DespesaPeriodoTecnicoStatus_DespesaPeriodoTecnico_FK1");

                entity.HasOne(d => d.CodTecnicoNavigation)
                    .WithMany(p => p.DespesaPeriodoTecnicos)
                    .HasForeignKey(d => d.CodTecnico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Tecnico_DespesaPeriodoTecnico_FK1");
            });

            modelBuilder.Entity<DespesaPeriodoTecnicoStatus>(entity =>
            {
                entity.HasKey(e => e.CodDespesaPeriodoTecnicoStatus)
                    .HasName("DespesaPeriodoTecnicoStatus_PK");

                entity.Property(e => e.NomeDespesaPeriodoTecnicoStatus).IsUnicode(false);
            });

            modelBuilder.Entity<DespesaProtocolo>(entity =>
            {
                entity.HasKey(e => e.CodDespesaProtocolo)
                    .HasName("DespesaProtocolo_PK");

                entity.HasIndex(e => e.CodFilial, "IX_DESPESAPROTOCOLO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodDespesaProtocolo, "_dta_index_DespesaProtocolo_7_510065003__K1")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("((1))");

                entity.Property(e => e.IndFechamento).HasDefaultValueSql("((0))");

                entity.Property(e => e.NomeProtocolo).IsUnicode(false);

                entity.Property(e => e.ObsProtocolo).IsUnicode(false);

                entity.HasOne(d => d.CodUsuarioCadNavigation)
                    .WithMany(p => p.DespesaProtocoloCodUsuarioCadNavigations)
                    .HasForeignKey(d => d.CodUsuarioCad)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DespesaProtocolo_UsuarioCad");

                entity.HasOne(d => d.CodUsuarioManutNavigation)
                    .WithMany(p => p.DespesaProtocoloCodUsuarioManutNavigations)
                    .HasForeignKey(d => d.CodUsuarioManut)
                    .HasConstraintName("FK_DespesaProtocolo_UsuarioManut");
            });

            modelBuilder.Entity<DespesaProtocoloPeriodoTecnico>(entity =>
            {
                entity.HasKey(e => new { e.CodDespesaProtocolo, e.CodDespesaPeriodoTecnico })
                    .HasName("DespesaProtocoloPeriodoTecnico_PK");

                entity.HasIndex(e => new { e.CodDespesaPeriodoTecnico, e.IndAtivo }, "IX_DESPESAPROTOCOLOPERIODOTECNICO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodDespesaProtocolo, "_dta_index_DespesaProtocoloPeriodoTecnico_7_1504828523__K1")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCredito).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCreditoCancelado).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<DespesaTentativaKm>(entity =>
            {
                entity.HasKey(e => e.CodDespesaTentativaKm)
                    .HasName("DespesaTentativaKM_PK");

                entity.HasIndex(e => e.CodRat, "IX_DESPTENTKM")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodDespesa, e.IndVisualizado }, "_dta_index_DespesaTentativaKM_7_1451972349__K2_K16")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodTecnico, e.IndVisualizado, e.CodRat }, "_dta_index_DespesaTentativaKM_7_1451972349__K4_K16_K3_2")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BairroDestino).IsUnicode(false);

                entity.Property(e => e.BairroOrigem).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EnderecoDestino).IsUnicode(false);

                entity.Property(e => e.EnderecoOrigem).IsUnicode(false);

                entity.Property(e => e.NumDestino).IsUnicode(false);

                entity.Property(e => e.NumOrigem).IsUnicode(false);

                entity.Property(e => e.TentativaKm).IsUnicode(false);

                entity.HasOne(d => d.CodCidadeDestinoNavigation)
                    .WithMany(p => p.DespesaTentativaKmCodCidadeDestinoNavigations)
                    .HasForeignKey(d => d.CodCidadeDestino)
                    .HasConstraintName("Cidade_DespesaTentativaKM_FK2");

                entity.HasOne(d => d.CodCidadeOrigemNavigation)
                    .WithMany(p => p.DespesaTentativaKmCodCidadeOrigemNavigations)
                    .HasForeignKey(d => d.CodCidadeOrigem)
                    .HasConstraintName("Cidade_DespesaTentativaKM_FK1");

                entity.HasOne(d => d.CodDespesaNavigation)
                    .WithMany(p => p.DespesaTentativaKms)
                    .HasForeignKey(d => d.CodDespesa)
                    .HasConstraintName("Despesa_DespesaTentativaKM_FK1");

                entity.HasOne(d => d.CodDespesaTipoNavigation)
                    .WithMany(p => p.DespesaTentativaKms)
                    .HasForeignKey(d => d.CodDespesaTipo)
                    .HasConstraintName("DespesaTipo_DespesaTentativaKM_FK1");

                entity.HasOne(d => d.CodFilialNavigation)
                    .WithMany(p => p.DespesaTentativaKms)
                    .HasForeignKey(d => d.CodFilial)
                    .HasConstraintName("Filial_DespesaTentativaKM_FK1");

                entity.HasOne(d => d.CodRatNavigation)
                    .WithMany(p => p.DespesaTentativaKms)
                    .HasForeignKey(d => d.CodRat)
                    .HasConstraintName("RAT_DespesaTentativaKM_FK1");

                entity.HasOne(d => d.CodTecnicoNavigation)
                    .WithMany(p => p.DespesaTentativaKms)
                    .HasForeignKey(d => d.CodTecnico)
                    .HasConstraintName("Tecnico_DespesaTentativaKM_FK1");
            });

            modelBuilder.Entity<DespesaTentativaKmArqMorto>(entity =>
            {
                entity.Property(e => e.BairroDestino).IsUnicode(false);

                entity.Property(e => e.BairroOrigem).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EnderecoDestino).IsUnicode(false);

                entity.Property(e => e.EnderecoOrigem).IsUnicode(false);

                entity.Property(e => e.NumDestino).IsUnicode(false);

                entity.Property(e => e.NumOrigem).IsUnicode(false);

                entity.Property(e => e.TentativaKm).IsUnicode(false);
            });

            modelBuilder.Entity<DespesaTipo>(entity =>
            {
                entity.HasKey(e => e.CodDespesaTipo)
                    .HasName("DespesaTipo_PK");

                entity.Property(e => e.CodDespesaTipo).ValueGeneratedNever();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("((1))");

                entity.Property(e => e.NomeTipo).IsUnicode(false);

                entity.Property(e => e.NomeTipoAbreviado).IsUnicode(false);
            });

            modelBuilder.Entity<Dicionario>(entity =>
            {
                entity.Property(e => e.Chave).IsUnicode(false);

                entity.Property(e => e.Espanhol).IsUnicode(false);

                entity.Property(e => e.Ingles).IsUnicode(false);

                entity.Property(e => e.Portugues).IsUnicode(false);
            });

            modelBuilder.Entity<DispBbbloqueioO>(entity =>
            {
                entity.Property(e => e.CodDispBbbloqueioOs).ValueGeneratedOnAdd();

                entity.Property(e => e.TipoBloqueio).IsUnicode(false);
            });

            modelBuilder.Entity<DispBbcalcEquipamentoContrato>(entity =>
            {
                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);
            });

            modelBuilder.Entity<DispBbcalcEquipamentoContratoSemAgend>(entity =>
            {
                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);
            });

            modelBuilder.Entity<DispBbcalcO>(entity =>
            {
                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);
            });

            modelBuilder.Entity<DispBbcalcOsanalise>(entity =>
            {
                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);
            });

            modelBuilder.Entity<DispBbcalcOsexcluido>(entity =>
            {
                entity.Property(e => e.CodDispBbcalcOsexcluidos).ValueGeneratedOnAdd();

                entity.Property(e => e.CodUsuario).IsUnicode(false);
            });

            modelBuilder.Entity<DispBbcalcOssemAgend>(entity =>
            {
                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);
            });

            modelBuilder.Entity<DispBbcalcOstte>(entity =>
            {
                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);
            });

            modelBuilder.Entity<DispBbcriticidade>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Detalhes).IsUnicode(false);

                entity.Property(e => e.NomeDispBbcriticidade).IsUnicode(false);
            });

            modelBuilder.Entity<DispBbdesvio>(entity =>
            {
                entity.Property(e => e.CodDispBbdesvio).ValueGeneratedOnAdd();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);
            });

            modelBuilder.Entity<DispBbdissuasao>(entity =>
            {
                entity.Property(e => e.CodDispBbdissuasao).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<DispBbdistanciaCapital>(entity =>
            {
                entity.Property(e => e.CodDispBbdistanciaCapital).ValueGeneratedOnAdd();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.Municipio).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<DispBbequipamentoContrato>(entity =>
            {
                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.CodBmp).IsUnicode(false);

                entity.Property(e => e.CodEquipCliente).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManutencao).IsUnicode(false);

                entity.Property(e => e.DispBbequipamentoContrato1).ValueGeneratedOnAdd();

                entity.Property(e => e.NumEtiquetaEquip).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.NumSerieCliente).IsUnicode(false);

                entity.Property(e => e.Origem).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.Sequencia).IsUnicode(false);
            });

            modelBuilder.Entity<DispBbhistCalcEquipamentoContrato>(entity =>
            {
                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);
            });

            modelBuilder.Entity<DispBbhistCalcO>(entity =>
            {
                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);
            });

            modelBuilder.Entity<DispBbhistEquipamentoContrato>(entity =>
            {
                entity.Property(e => e.CodBmp).IsUnicode(false);

                entity.Property(e => e.CodEquipCliente).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManutencao).IsUnicode(false);

                entity.Property(e => e.NumEtiquetaEquip).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.NumSerieCliente).IsUnicode(false);

                entity.Property(e => e.Origem).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.Sequencia).IsUnicode(false);
            });

            modelBuilder.Entity<DispBbpalavrasChavesBloqueio>(entity =>
            {
                entity.Property(e => e.CodDispBbpalavrasChavesBloqueio).ValueGeneratedOnAdd();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.Palavra).IsUnicode(false);
            });

            modelBuilder.Entity<DispBbpercRegiao>(entity =>
            {
                entity.Property(e => e.CodDispBbpercRegiao).ValueGeneratedOnAdd();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);
            });

            modelBuilder.Entity<DispBbrebate>(entity =>
            {
                entity.Property(e => e.Criticidade).IsFixedLength(true);

                entity.Property(e => e.Descricaobem).IsUnicode(false);

                entity.Property(e => e.Mantenedor).IsUnicode(false);

                entity.Property(e => e.Motivo).IsUnicode(false);

                entity.Property(e => e.Periodo).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<DispBbregiao>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Nome).IsUnicode(false);
            });

            modelBuilder.Entity<DispBbregiaoFilial>(entity =>
            {
                entity.Property(e => e.CodDispBbregiao).IsFixedLength(true);

                entity.Property(e => e.CodDispBbregiaoFilial).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<DispBbregiaoUf>(entity =>
            {
                entity.Property(e => e.CodDispBbregiao).IsFixedLength(true);

                entity.Property(e => e.CodDispBbregiaoUf).ValueGeneratedOnAdd();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<DispBbvalorCofreRegiao>(entity =>
            {
                entity.Property(e => e.CodDispBbvalorCofreRegiao).ValueGeneratedOnAdd();

                entity.Property(e => e.CodEcausa).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);
            });

            modelBuilder.Entity<DispHistBbcalcO>(entity =>
            {
                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);
            });

            modelBuilder.Entity<EmailSat>(entity =>
            {
                entity.Property(e => e.Body).IsUnicode(false);

                entity.Property(e => e.SendCc).IsUnicode(false);

                entity.Property(e => e.SendFrom).IsUnicode(false);

                entity.Property(e => e.SendTo).IsUnicode(false);

                entity.Property(e => e.Subject).IsUnicode(false);
            });

            modelBuilder.Entity<Embalagem>(entity =>
            {
                entity.HasKey(e => e.CodEmbalagem)
                    .HasName("PK__Embalagem__33614AFA");

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("(1)");

                entity.Property(e => e.NomeEmbalagem).IsUnicode(false);
            });

            modelBuilder.Entity<Empresa>(entity =>
            {
                entity.HasKey(e => e.CodEmpresa)
                    .HasName("PK__Empresa__58BC2184");

                entity.Property(e => e.CodEmpresa).ValueGeneratedNever();

                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Cnpj).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManutencao).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.Fax).IsUnicode(false);

                entity.Property(e => e.InscricaoEstadual).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NumBanco).IsUnicode(false);

                entity.Property(e => e.ObsCliente).IsUnicode(false);

                entity.Property(e => e.RazaoSocial).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.Site).IsUnicode(false);

                entity.Property(e => e.Telefone1).IsUnicode(false);

                entity.Property(e => e.Telefone2).IsUnicode(false);
            });

            modelBuilder.Entity<EmpresaUsuario>(entity =>
            {
                entity.HasKey(e => new { e.CodEmpresa, e.CodUsuario })
                    .HasName("PK__EmpresaUsuario__70DDC3D8");

                entity.Property(e => e.CodUsuario).IsUnicode(false);
            });

            modelBuilder.Entity<EnvioEmailReincidencium>(entity =>
            {
                entity.Property(e => e.DataHoraEnvio).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);
            });

            modelBuilder.Entity<EqCcomparacaoNome>(entity =>
            {
                entity.HasKey(e => e.CodEqCcomparacaoNome)
                    .HasName("PK__EqCComparacaoNom__5832119F");

                entity.Property(e => e.CodEqCcomparacaoNome).ValueGeneratedNever();

                entity.Property(e => e.CodContrato).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.NomeComparacao).IsUnicode(false);
            });

            modelBuilder.Entity<EquipContratoComparacao>(entity =>
            {
                entity.HasKey(e => e.CodEquipContratoComparacao)
                    .HasName("PK__EquipContratoCom__5555A4F4");

                entity.HasIndex(e => e.CodEqCcomparacaoNome, "_dta_index_EquipContratoComparacao_7_1415676091__K11_2")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodEqCcomparacaoNome, e.CodEquipContratoComparacao, e.CodCliente, e.NumSerie, e.CodEquip, e.CodTipoEquip, e.CodGrupoEquip }, "_dta_index_EquipContratoComparacao_7_1415676091__K11_K1_K2_K3_K5_K6_K7")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodEqCcomparacaoNome, e.CodPosto, e.CodCliente, e.CodTipoEquip, e.CodGrupoEquip, e.CodEquip, e.NumSerie }, "_dta_index_EquipContratoComparacao_7_1415676091__K11_K4_K2_K6_K7_K5_K3_1_12")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodEqCcomparacaoNome, e.CodEquip, e.NumSerie }, "_dta_index_EquipContratoComparacao_7_1415676091__K11_K5_K3_1_12_19")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodEqCcomparacaoNome, e.IndEquipComparado, e.CodEquipContratoComparacao, e.CodCliente, e.NumSerie, e.CodSla, e.CodPosto }, "_dta_index_EquipContratoComparacao_7_1415676091__K11_K8_K1_K2_K3_K12_K4_23")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodSla, e.CodCliente, e.CodPosto, e.NumSerie }, "_dta_index_EquipContratoComparacao_7_1415676091__K12_K2_K4_K3_1_23")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodSla, e.CodCliente, e.CodPosto, e.CodGrupoEquip, e.CodTipoEquip, e.CodEquip, e.NumSerie }, "_dta_index_EquipContratoComparacao_7_1415676091__K12_K2_K4_K7_K6_K5_K3_1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.NumSerie, e.CodEquip, e.CodEqCcomparacaoNome }, "_dta_index_EquipContratoComparacao_7_1415676091__K3_K5_K11_1_12_20")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.NumSerie, e.CodEquip, e.CodEqCcomparacaoNome }, "_dta_index_EquipContratoComparacao_7_1415676091__K3_K5_K11_1_12_21")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.NumSerie, e.CodEquip, e.CodEqCcomparacaoNome }, "_dta_index_EquipContratoComparacao_7_1415676091__K3_K5_K11_1_12_22")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodEquip, e.NumSerie, e.CodEqCcomparacaoNome }, "_dta_index_EquipContratoComparacao_7_1415676091__K5_K3_K11_1_12_22")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodEquipContratoComparacao).ValueGeneratedNever();

                entity.Property(e => e.CodUsuarioComp).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);
            });

            modelBuilder.Entity<Equipamento>(entity =>
            {
                entity.HasKey(e => new { e.CodEquip, e.CodGrupoEquip, e.CodTipoEquip });

                entity.Property(e => e.CodEequip).IsUnicode(false);

                entity.Property(e => e.DescEquip).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.HasOne(d => d.Cod)
                    .WithMany(p => p.Equipamentos)
                    .HasForeignKey(d => new { d.CodTipoEquip, d.CodGrupoEquip })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Equipamento__0C85DE4D");
            });

            modelBuilder.Entity<EquipamentoCausa>(entity =>
            {
                entity.Property(e => e.CodEcausa).IsUnicode(false);
            });

            modelBuilder.Entity<EquipamentoCheckListDefeito>(entity =>
            {
                entity.HasIndex(e => new { e.CodEquip, e.CodGrupoEquip, e.CodTipoEquip }, "IX_EquipamentoCheckListDefeito")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodDefeitoPos, "IX_EquipamentoCheckListDefeito_1")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DescricaoItem).IsUnicode(false);

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.HasOne(d => d.CodDefeitoPosNavigation)
                    .WithMany(p => p.EquipamentoCheckListDefeitos)
                    .HasForeignKey(d => d.CodDefeitoPos)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EquipamentoCheckListDefeito_DefeitoPOS");

                entity.HasOne(d => d.Cod)
                    .WithMany(p => p.EquipamentoCheckListDefeitos)
                    .HasForeignKey(d => new { d.CodEquip, d.CodGrupoEquip, d.CodTipoEquip })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EquipamentoCheckListDefeito_Equipamento");
            });

            modelBuilder.Entity<EquipamentoComponentePo>(entity =>
            {
                entity.HasOne(d => d.Cod)
                    .WithMany(p => p.EquipamentoComponentePos)
                    .HasForeignKey(d => new { d.CodEquip, d.CodGrupoEquip, d.CodTipoEquip })
                    .HasConstraintName("FK_EquipamentoComponentePOS_Equipamento");
            });

            modelBuilder.Entity<EquipamentoContrato>(entity =>
            {
                entity.HasIndex(e => new { e.CodFilial, e.CodEquipContrato, e.CodContrato, e.CodEquip, e.CodRegiao }, "IDX_EQUIPAMENTOCONTRATO_ADV00")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodSla, "IDX_EquipamentoContrato_1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodCliente, e.IndAtivo, e.CodSla }, "IDX_EquipamentoContrato_2")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodTipoEquip, e.CodGrupoEquip, e.CodEquip, e.CodAutorizada, e.CodFilial, e.IndRepasseIndividual, e.IndAtivo }, "IDX_EquipamentoContrato_3")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.NumSerie, e.CodCliente }, "IX_EQUIPAMENTOCONTRATO_CODCLIENTE")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodSla, "IX_EQUIPCONTRAT")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodEquip, e.CodCliente, e.IndAtivo }, "IX_EQUIPCONTRATO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodCliente, e.CodRegiao, e.CodAutorizada, e.CodFilial }, "IX_EQUIPCONT_COLUMNS")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodEquipContrato, "_dta_index_EquipamentoContrato_9_1280215811__K1_7_8")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodEquipContrato, e.CodContrato }, "_dta_index_EquipamentoContrato_9_1280215811__K1_K2_7_14_45")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodEquipContrato).ValueGeneratedNever();

                entity.Property(e => e.CodBmp).IsUnicode(false);

                entity.Property(e => e.CodEquipCliente)
                    .IsUnicode(false)
                    .HasComment("deletar campo");

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCadastro)
                    .IsUnicode(false)
                    .HasComment("deletar campo");

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManutencao)
                    .IsUnicode(false)
                    .HasComment("deletar campo");

                entity.Property(e => e.DataCadastro).HasComment("deletar campo");

                entity.Property(e => e.DataManutencao).HasComment("deletar campo");

                entity.Property(e => e.DistanciaPatRes).HasDefaultValueSql("((0))");

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("((1))");

                entity.Property(e => e.IndGarantia).HasDefaultValueSql("((0))");

                entity.Property(e => e.NumEtiquetaEquip).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.NumSerieCliente).IsUnicode(false);

                entity.Property(e => e.Origem)
                    .IsUnicode(false)
                    .HasComment("deletar campo");

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.Sequencia).IsUnicode(false);

                entity.Property(e => e.ValorDespesaInstalacao).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<EquipamentoContrato04052020>(entity =>
            {
                entity.Property(e => e.CodBmp).IsUnicode(false);

                entity.Property(e => e.CodEquipCliente).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManutencao).IsUnicode(false);

                entity.Property(e => e.NumEtiquetaEquip).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.NumSerieCliente).IsUnicode(false);

                entity.Property(e => e.Origem).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.Sequencia).IsUnicode(false);
            });

            modelBuilder.Entity<EquipamentoContratoComparacao>(entity =>
            {
                entity.HasIndex(e => new { e.CodDadoImportacao, e.CodEquipamentoContratoComparacao, e.NumSerieCliente }, "_dta_index_EquipamentoContratoComparacao_7_473924910__K2_K1_K4_5_6_7_8_9_10_11_12_13_14_15_16_17_18_19_20_21_22_23_24_25_26_27_")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodDadoImportacao, e.CodEquipContrato }, "_dta_index_EquipamentoContratoComparacao_7_473924910__K2_K3_1_5_7")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodEquipContrato, e.CodDadoImportacao }, "_dta_index_EquipamentoContratoComparacao_7_473924910__K3_K2_5_7")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DcpostoCliente).IsUnicode(false);

                entity.Property(e => e.DcpostoSat).IsUnicode(false);

                entity.Property(e => e.NomeSlacliente).IsUnicode(false);

                entity.Property(e => e.NomeSlasat).IsUnicode(false);

                entity.Property(e => e.NumAgenciaCliente).IsUnicode(false);

                entity.Property(e => e.NumAgenciaSat).IsUnicode(false);

                entity.Property(e => e.NumSerieCliente).IsUnicode(false);

                entity.Property(e => e.OutrosCliente).IsUnicode(false);
            });

            modelBuilder.Entity<EquipamentoDeParaPo>(entity =>
            {
                entity.HasIndex(e => new { e.CodEquip, e.CodGrupoEquip, e.CodTipoEquip }, "IX_EquipamentoDeParaPOS")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodTipoDeParaEquipamentoPos, "IX_EquipamentoDeParaPOS_1")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodDePara).IsUnicode(false);

                entity.HasOne(d => d.CodTipoDeParaEquipamentoPosNavigation)
                    .WithMany(p => p.EquipamentoDeParaPos)
                    .HasForeignKey(d => d.CodTipoDeParaEquipamentoPos)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EquipamentoDeParaPOS_TipoDeParaEquipamentoPOS");

                entity.HasOne(d => d.Cod)
                    .WithMany(p => p.EquipamentoDeParaPos)
                    .HasForeignKey(d => new { d.CodEquip, d.CodGrupoEquip, d.CodTipoEquip })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EquipamentoDeParaPOS_Equipamento");
            });

            modelBuilder.Entity<EquipamentoDefeitoPo>(entity =>
            {
                entity.HasIndex(e => new { e.CodEquip, e.CodGrupoEquip, e.CodTipoEquip }, "IX_EquipamentoDefeitoPOS")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodDefeitoPos, "IX_EquipamentoDefeitoPOS_1")
                    .HasFillFactor((byte)90);

                entity.HasOne(d => d.CodDefeitoPosNavigation)
                    .WithMany(p => p.EquipamentoDefeitoPos)
                    .HasForeignKey(d => d.CodDefeitoPos)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EquipamentoDefeitoPOS_DefeitoPOS");

                entity.HasOne(d => d.Cod)
                    .WithMany(p => p.EquipamentoDefeitoPos)
                    .HasForeignKey(d => new { d.CodEquip, d.CodGrupoEquip, d.CodTipoEquip })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EquipamentoDefeitoPOS_Equipamento");
            });

            modelBuilder.Entity<EquipamentoPo>(entity =>
            {
                entity.HasIndex(e => e.CodStatusEquipamentoPos, "IX_EquipamentoPOS")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodTipoMidia, "IX_EquipamentoPOS_1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodEquip, e.CodGrupoEquip, e.CodTipoEquip }, "IX_EquipamentoPOS_2")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodEquipPqm).IsUnicode(false);

                entity.Property(e => e.NumeroLogico).IsUnicode(false);

                entity.Property(e => e.NumeroSerie).IsUnicode(false);

                entity.Property(e => e.NumeroSeriePqm).IsUnicode(false);

                entity.HasOne(d => d.CodStatusEquipamentoPosNavigation)
                    .WithMany(p => p.EquipamentoPos)
                    .HasForeignKey(d => d.CodStatusEquipamentoPos)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EquipamentoPOS_StatusEquipamentoPOS");

                entity.HasOne(d => d.CodTipoMidiaNavigation)
                    .WithMany(p => p.EquipamentoPos)
                    .HasForeignKey(d => d.CodTipoMidia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EquipamentoPOS_TipoMidiaPOS");

                entity.HasOne(d => d.Cod)
                    .WithMany(p => p.EquipamentoPos)
                    .HasForeignKey(d => new { d.CodEquip, d.CodGrupoEquip, d.CodTipoEquip })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EquipamentoPOS_Equipamento");
            });

            modelBuilder.Entity<EquipamentoPoshist>(entity =>
            {
                entity.HasIndex(e => e.CodEquipamentoPos, "IX_EquipamentoPOSHist")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodOs, "IX_EquipamentoPOSHist_1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodStatusEquipamentoPos, "IX_EquipamentoPOSHist_2")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodTipoHistoricoEquipamentoPos, "IX_EquipamentoPOSHist_3")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodUsuario, "IX_EquipamentoPOSHist_4")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodStatusEquipamentoPosanterior, "IX_EquipamentoPOSHist_5")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.HasOne(d => d.CodEquipamentoPosNavigation)
                    .WithMany(p => p.EquipamentoPoshists)
                    .HasForeignKey(d => d.CodEquipamentoPos)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EquipamentoPOSHist_EquipamentoPOS");

                entity.HasOne(d => d.CodOsNavigation)
                    .WithMany(p => p.EquipamentoPoshists)
                    .HasForeignKey(d => d.CodOs)
                    .HasConstraintName("FK_EquipamentoPOSHist_OS");

                entity.HasOne(d => d.CodStatusEquipamentoPosNavigation)
                    .WithMany(p => p.EquipamentoPoshistCodStatusEquipamentoPosNavigations)
                    .HasForeignKey(d => d.CodStatusEquipamentoPos)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EquipamentoPOSHist_StatusEquipamentoPOS");

                entity.HasOne(d => d.CodStatusEquipamentoPosanteriorNavigation)
                    .WithMany(p => p.EquipamentoPoshistCodStatusEquipamentoPosanteriorNavigations)
                    .HasForeignKey(d => d.CodStatusEquipamentoPosanterior)
                    .HasConstraintName("FK_EquipamentoPOSHist_StatusEquipamentoPOS1");

                entity.HasOne(d => d.CodTipoHistoricoEquipamentoPosNavigation)
                    .WithMany(p => p.EquipamentoPoshists)
                    .HasForeignKey(d => d.CodTipoHistoricoEquipamentoPos)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EquipamentoPOSHist_TipoHistoricoEquipamentoPOS");

                entity.HasOne(d => d.CodUsuarioNavigation)
                    .WithMany(p => p.EquipamentoPoshists)
                    .HasForeignKey(d => d.CodUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EquipamentoPOSHist_Usuario");
            });

            modelBuilder.Entity<EquipamentoTipoComunicacao>(entity =>
            {
                entity.HasIndex(e => e.CodTipoComunicacao, "IX_EquipamentoTipoComunicacao")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodEquip, e.CodGrupoEquip, e.CodTipoEquip }, "IX_EquipamentoTipoComunicacao_1")
                    .HasFillFactor((byte)90);

                entity.HasOne(d => d.CodTipoComunicacaoNavigation)
                    .WithMany(p => p.EquipamentoTipoComunicacaos)
                    .HasForeignKey(d => d.CodTipoComunicacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EquipamentoTipoComunicacao_TipoComunicacao");

                entity.HasOne(d => d.Cod)
                    .WithMany(p => p.EquipamentoTipoComunicacaos)
                    .HasForeignKey(d => new { d.CodEquip, d.CodGrupoEquip, d.CodTipoEquip })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EquipamentoTipoComunicacao_Equipamento");
            });

            modelBuilder.Entity<EquipamentoVip>(entity =>
            {
                entity.Property(e => e.CodEquipamentoVip).ValueGeneratedOnAdd();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.Emails).IsUnicode(false);
            });

            modelBuilder.Entity<EquipamentoVipBkp>(entity =>
            {
                entity.HasKey(e => e.CodEquipamentoVip)
                    .HasName("PK_EquipamentoVip");

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Emails).IsUnicode(false);

                entity.HasOne(d => d.CodEquipContratoNavigation)
                    .WithMany(p => p.EquipamentoVipBkps)
                    .HasForeignKey(d => d.CodEquipContrato)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EquipamentoVip_EquipamentoContrato");
            });

            modelBuilder.Entity<EstadoPo>(entity =>
            {
                entity.HasIndex(e => e.CodCidadeCapital, "IX_EstadoPOS")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodIbge).IsUnicode(false);

                entity.Property(e => e.NomeEstado).IsUnicode(false);

                entity.Property(e => e.SiglaEstado).IsUnicode(false);

                entity.HasOne(d => d.CodCidadeCapitalNavigation)
                    .WithMany(p => p.EstadoPos)
                    .HasForeignKey(d => d.CodCidadeCapital)
                    .HasConstraintName("FK_EstadoPOS_CidadePOS");
            });

            modelBuilder.Entity<EstadoPosdePara>(entity =>
            {
                entity.HasIndex(e => e.CodEstadoPos, "IX_EstadoPOSDePara")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodUf, "IX_EstadoPOSDePara_1")
                    .HasFillFactor((byte)90);

                entity.HasOne(d => d.CodEstadoPosNavigation)
                    .WithMany(p => p.EstadoPosdeParas)
                    .HasForeignKey(d => d.CodEstadoPos)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EstadoPOSDePara_EstadoPOS");

                entity.HasOne(d => d.CodUfNavigation)
                    .WithMany(p => p.EstadoPosdeParas)
                    .HasForeignKey(d => d.CodUf)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EstadoPOSDePara_UF");
            });

            modelBuilder.Entity<FaturamentoContrato>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);
            });

            modelBuilder.Entity<FaturamentoContratoControle>(entity =>
            {
                entity.HasKey(e => e.CodFaturamento)
                    .HasName("PK__Faturame__795CD7C5243842FF");

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.CaminhoDanfe).IsUnicode(false);

                entity.Property(e => e.Cnpj).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.Contato).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NumNf).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.Telefone).IsUnicode(false);
            });

            modelBuilder.Entity<FaturamentoPo>(entity =>
            {
                entity.Property(e => e.Cnpj).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<FaturamentoPosbanrisul>(entity =>
            {
                entity.HasIndex(e => e.CodUsuario, "IX_FaturamentoPOSBanrisul")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.HasOne(d => d.CodUsuarioNavigation)
                    .WithMany(p => p.FaturamentoPosbanrisuls)
                    .HasForeignKey(d => d.CodUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FaturamentoPOSBanrisul_Usuario");
            });

            modelBuilder.Entity<FaturamentoSerieCnpj>(entity =>
            {
                entity.Property(e => e.Cnpjfaturamento).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);
            });

            modelBuilder.Entity<FaturamentoSerieControle>(entity =>
            {
                entity.HasKey(e => e.CodFaturamentoSerieControle)
                    .HasName("PK__Faturame__EE6709CDC90D84D0");

                entity.Property(e => e.AnoMes).IsUnicode(false);
            });

            modelBuilder.Entity<FaturamentoSicredi>(entity =>
            {
                entity.HasIndex(e => e.CodStatusFaturamentoSicredi, "IX_FaturamentoSicredi")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodUsuario, "IX_FaturamentoSicredi_1")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.Descricao).IsUnicode(false);

                entity.HasOne(d => d.CodStatusFaturamentoSicrediNavigation)
                    .WithMany(p => p.FaturamentoSicredis)
                    .HasForeignKey(d => d.CodStatusFaturamentoSicredi)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FaturamentoSicredi_StatusFaturamentoSicredi");

                entity.HasOne(d => d.CodUsuarioNavigation)
                    .WithMany(p => p.FaturamentoSicredis)
                    .HasForeignKey(d => d.CodUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FaturamentoSicredi_Usuario");
            });

            modelBuilder.Entity<FaturamentoSicrediMultaSaldo>(entity =>
            {
                entity.HasIndex(e => e.CodCooperativaSicredi, "IX_FaturamentoSicrediMultaSaldo")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodUsuario, "IX_FaturamentoSicrediMultaSaldo_1")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.HasOne(d => d.CodCooperativaSicrediNavigation)
                    .WithMany(p => p.FaturamentoSicrediMultaSaldos)
                    .HasForeignKey(d => d.CodCooperativaSicredi)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FaturamentoSicrediMultaSaldo_CooperativaSicredi");

                entity.HasOne(d => d.CodFaturamentoSicrediNavigation)
                    .WithMany(p => p.FaturamentoSicrediMultaSaldos)
                    .HasForeignKey(d => d.CodFaturamentoSicredi)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FaturamentoSicrediMultaSaldo_FaturamentoSicredi");

                entity.HasOne(d => d.CodUsuarioNavigation)
                    .WithMany(p => p.FaturamentoSicrediMultaSaldos)
                    .HasForeignKey(d => d.CodUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FaturamentoSicrediMultaSaldo_Usuario");
            });

            modelBuilder.Entity<FaturamentoSicrediMultaSaldoItemLancado>(entity =>
            {
                entity.HasIndex(e => e.CodFaturamentoSicrediMultaSaldo, "IX_FaturamentoSicrediMultaSaldoItemLancado")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodOs, "IX_FaturamentoSicrediMultaSaldoItemLancado_1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodUsuario, "IX_FaturamentoSicrediMultaSaldoItemLancado_2")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.HasOne(d => d.CodFaturamentoSicrediMultaSaldoNavigation)
                    .WithMany(p => p.FaturamentoSicrediMultaSaldoItemLancados)
                    .HasForeignKey(d => d.CodFaturamentoSicrediMultaSaldo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FaturamentoSicrediMultaSaldoItemLancado_FaturamentoSicrediMultaSaldo");

                entity.HasOne(d => d.CodOsNavigation)
                    .WithMany(p => p.FaturamentoSicrediMultaSaldoItemLancados)
                    .HasForeignKey(d => d.CodOs)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FaturamentoSicrediMultaSaldoItemLancado_OS");

                entity.HasOne(d => d.CodUsuarioNavigation)
                    .WithMany(p => p.FaturamentoSicrediMultaSaldoItemLancados)
                    .HasForeignKey(d => d.CodUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FaturamentoSicrediMultaSaldoItemLancado_Usuario");
            });

            modelBuilder.Entity<FaturamentoSicrediMultaSaldoItemMultum>(entity =>
            {
                entity.HasIndex(e => e.CodFaturamentoSicrediMultaSaldo, "IX_FaturamentoSicrediMultaSaldoItemMulta")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodOs, "IX_FaturamentoSicrediMultaSaldoItemMulta_1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodUsuario, "IX_FaturamentoSicrediMultaSaldoItemMulta_2")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.HasOne(d => d.CodFaturamentoSicrediMultaSaldoNavigation)
                    .WithMany(p => p.FaturamentoSicrediMultaSaldoItemMulta)
                    .HasForeignKey(d => d.CodFaturamentoSicrediMultaSaldo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FaturamentoSicrediMultaSaldoItemMulta_FaturamentoSicrediMultaSaldo");

                entity.HasOne(d => d.CodOsNavigation)
                    .WithMany(p => p.FaturamentoSicrediMultaSaldoItemMulta)
                    .HasForeignKey(d => d.CodOs)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FaturamentoSicrediMultaSaldoItemMulta_OS");

                entity.HasOne(d => d.CodUsuarioNavigation)
                    .WithMany(p => p.FaturamentoSicrediMultaSaldoItemMulta)
                    .HasForeignKey(d => d.CodUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FaturamentoSicrediMultaSaldoItemMulta_Usuario");
            });

            modelBuilder.Entity<FaturamentoSicrediO>(entity =>
            {
                entity.HasIndex(e => e.CodOs, "IX_FaturamentoSicrediOS")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodFaturamentoSicredi, "IX_FaturamentoSicrediOS_1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodCooperativaSicredi, "IX_FaturamentoSicrediOS_2")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodRepresentante, "IX_FaturamentoSicrediOS_3")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Cnpj).IsUnicode(false);

                entity.Property(e => e.CnpjCooperativa).IsUnicode(false);

                entity.Property(e => e.Cnpjperto).IsUnicode(false);

                entity.Property(e => e.CodCliente).IsUnicode(false);

                entity.Property(e => e.CodCooperativa).IsUnicode(false);

                entity.Property(e => e.CodFaturamentoSicrediOs).ValueGeneratedOnAdd();

                entity.Property(e => e.CodigoUa).IsUnicode(false);

                entity.Property(e => e.GrupoEstados).IsUnicode(false);

                entity.Property(e => e.NomTipoIntervencao).IsUnicode(false);

                entity.Property(e => e.NomeCidade).IsUnicode(false);

                entity.Property(e => e.NomeCooperativa).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeReduzidoCooperativa).IsUnicode(false);

                entity.Property(e => e.NomeRepresentante).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumeroLogico).IsUnicode(false);

                entity.Property(e => e.NumeroNf).IsUnicode(false);

                entity.Property(e => e.NumeroOs).IsUnicode(false);

                entity.Property(e => e.RazaoSocial).IsUnicode(false);

                entity.Property(e => e.RazaoSocialCooperativa).IsUnicode(false);

                entity.Property(e => e.Servico).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.HasOne(d => d.CodCooperativaSicrediNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodCooperativaSicredi)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FaturamentoSicrediOS_CooperativaSicredi");

                entity.HasOne(d => d.CodFaturamentoSicrediNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodFaturamentoSicredi)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FaturamentoSicrediOS_FaturamentoSicredi");

                entity.HasOne(d => d.CodOsNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodOs)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FaturamentoSicrediOS_OS");

                entity.HasOne(d => d.CodRepresentanteNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodRepresentante)
                    .HasConstraintName("FK_FaturamentoSicrediOS_Representante");
            });

            modelBuilder.Entity<FechamentoManualFaturamento>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.RazaoSocial).IsUnicode(false);
            });

            modelBuilder.Entity<FechamentoOspo>(entity =>
            {
                entity.HasIndex(e => e.CodUsuario, "IX_FechamentoOSPOS")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.HasOne(d => d.CodUsuarioNavigation)
                    .WithMany(p => p.FechamentoOspos)
                    .HasForeignKey(d => d.CodUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FechamentoOSPOS_Usuario");
            });

            modelBuilder.Entity<FecharOspo>(entity =>
            {
                entity.HasIndex(e => e.CodOs, "IX_FecharOSPOS")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodStatusServico, "IX_FecharOSPOS_1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodAutorizada, "IX_FecharOSPOS_2")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodTecnico, "IX_FecharOSPOS_3")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodTipoComunicacao, "IX_FecharOSPOS_4")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodUsuarioEnvio, "IX_FecharOSPOS_5")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodMotivoCancelamento, "IX_FecharOSPOS_6")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodDefeitoPos, "IX_FecharOSPOS_7")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Acompanhante).IsUnicode(false);

                entity.Property(e => e.CodUsuarioEnvio).IsUnicode(false);

                entity.Property(e => e.ErroIntegracao).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.Rede).IsUnicode(false);

                entity.Property(e => e.Solucao).IsUnicode(false);

                entity.HasOne(d => d.CodAutorizadaNavigation)
                    .WithMany(p => p.FecharOspos)
                    .HasForeignKey(d => d.CodAutorizada)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FecharOSPOS_Autorizada");

                entity.HasOne(d => d.CodDefeitoPosNavigation)
                    .WithMany(p => p.FecharOspos)
                    .HasForeignKey(d => d.CodDefeitoPos)
                    .HasConstraintName("FK_FecharOSPOS_Defeito");

                entity.HasOne(d => d.CodMotivoCancelamentoNavigation)
                    .WithMany(p => p.FecharOspos)
                    .HasForeignKey(d => d.CodMotivoCancelamento)
                    .HasConstraintName("FK_FecharOSPOS_MotivoCancelamento");

                entity.HasOne(d => d.CodOsNavigation)
                    .WithMany(p => p.FecharOspos)
                    .HasForeignKey(d => d.CodOs)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FecharOSPOS_OS");

                entity.HasOne(d => d.CodStatusServicoNavigation)
                    .WithMany(p => p.FecharOspos)
                    .HasForeignKey(d => d.CodStatusServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FecharOSPOS_StatusServico");

                entity.HasOne(d => d.CodTecnicoNavigation)
                    .WithMany(p => p.FecharOspos)
                    .HasForeignKey(d => d.CodTecnico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FecharOSPOS_Tecnico");

                entity.HasOne(d => d.CodTipoComunicacaoNavigation)
                    .WithMany(p => p.FecharOspos)
                    .HasForeignKey(d => d.CodTipoComunicacao)
                    .HasConstraintName("FK_FecharOSPOS_TipoComunicacao");

                entity.HasOne(d => d.CodUsuarioEnvioNavigation)
                    .WithMany(p => p.FecharOspos)
                    .HasForeignKey(d => d.CodUsuarioEnvio)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FecharOSPOS_Usuario");
            });

            modelBuilder.Entity<FecharOspositen>(entity =>
            {
                entity.HasIndex(e => e.CodFecharOspos, "IX_FecharOSPOSItens")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodOperadoraTelefonia, "IX_FecharOSPOSItens_1")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Serie).IsUnicode(false);

                entity.HasOne(d => d.CodFecharOsposNavigation)
                    .WithMany(p => p.FecharOspositens)
                    .HasForeignKey(d => d.CodFecharOspos)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FecharOSPOSItens_FecharOSPOS");

                entity.HasOne(d => d.CodOperadoraTelefoniaNavigation)
                    .WithMany(p => p.FecharOspositens)
                    .HasForeignKey(d => d.CodOperadoraTelefonia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FecharOSPOSItens_OperadoraTelefonia");
            });

            modelBuilder.Entity<Feriado>(entity =>
            {
                entity.HasKey(e => e.CodFeriado)
                    .HasName("PK__Feriados__12E03826");

                entity.HasIndex(e => new { e.CodCidade, e.CodUf, e.CodPais }, "_dta_index_Feriados_7_364684497__K7_K6_K5")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NomeFeriado).IsUnicode(false);
            });

            modelBuilder.Entity<FeriadosNacionai>(entity =>
            {
                entity.Property(e => e.NomeFeriado).IsUnicode(false);

                entity.HasOne(d => d.CodPaisNavigation)
                    .WithMany(p => p.FeriadosNacionais)
                    .HasForeignKey(d => d.CodPais)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FeriadosNacionais_Pais");
            });

            modelBuilder.Entity<FeriadosParciai>(entity =>
            {
                entity.Property(e => e.CodFeriadoParcial).ValueGeneratedOnAdd();

                entity.Property(e => e.NomeFeriado).IsUnicode(false);
            });

            modelBuilder.Entity<FeriadosPo>(entity =>
            {
                entity.HasIndex(e => e.CodCidade, "IX_FeriadosPOS")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodUf, "IX_FeriadosPOS_1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodPais, "IX_FeriadosPOS_2")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodUsuarioCadastro, "IX_FeriadosPOS_3")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.NomeFeriado).IsUnicode(false);

                entity.HasOne(d => d.CodCidadeNavigation)
                    .WithMany(p => p.FeriadosPos)
                    .HasForeignKey(d => d.CodCidade)
                    .HasConstraintName("FK_FeriadosPOS_Cidade");

                entity.HasOne(d => d.CodClienteNavigation)
                    .WithMany(p => p.FeriadosPos)
                    .HasForeignKey(d => d.CodCliente)
                    .HasConstraintName("FK_FeriadosPOS_Cliente");

                entity.HasOne(d => d.CodPaisNavigation)
                    .WithMany(p => p.FeriadosPos)
                    .HasForeignKey(d => d.CodPais)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FeriadosPOS_Pais");

                entity.HasOne(d => d.CodUfNavigation)
                    .WithMany(p => p.FeriadosPos)
                    .HasForeignKey(d => d.CodUf)
                    .HasConstraintName("FK_FeriadosPOS_UF");

                entity.HasOne(d => d.CodUsuarioCadastroNavigation)
                    .WithMany(p => p.FeriadosPos)
                    .HasForeignKey(d => d.CodUsuarioCadastro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FeriadosPOS_Usuario");
            });

            modelBuilder.Entity<FerramentaTecnico>(entity =>
            {
                entity.Property(e => e.Nome).IsUnicode(false);
            });

            modelBuilder.Entity<FerramentaTecnicoHist>(entity =>
            {
                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.Justificativa).IsFixedLength(true);
            });

            modelBuilder.Entity<Filial>(entity =>
            {
                entity.HasKey(e => e.CodFilial)
                    .HasName("PK__Filial__5165187F");

                entity.Property(e => e.CodFilial).ValueGeneratedNever();

                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.Cnpj).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.CodUsuarioSupervisor).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.Fax).IsUnicode(false);

                entity.Property(e => e.Fone).IsUnicode(false);

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("((1))");

                entity.Property(e => e.InscricaoEstadual).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NumColetorPonto).IsUnicode(false);

                entity.Property(e => e.RazaoSocial).IsUnicode(false);

                entity.HasOne(d => d.CodUsuarioCadNavigation)
                    .WithMany(p => p.FilialCodUsuarioCadNavigations)
                    .HasForeignKey(d => d.CodUsuarioCad)
                    .HasConstraintName("FK_Filial_UsuarioCad");

                entity.HasOne(d => d.CodUsuarioManutNavigation)
                    .WithMany(p => p.FilialCodUsuarioManutNavigations)
                    .HasForeignKey(d => d.CodUsuarioManut)
                    .HasConstraintName("FK_Filial_UsuarioManut");
            });

            modelBuilder.Entity<FilialAnalistum>(entity =>
            {
                entity.Property(e => e.CodFilialAnalista).ValueGeneratedOnAdd();

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.NomeUsuario).IsUnicode(false);
            });

            modelBuilder.Entity<FilialCoordenada>(entity =>
            {
                entity.Property(e => e.Latitude).IsUnicode(false);

                entity.Property(e => e.Longitude).IsUnicode(false);
            });

            modelBuilder.Entity<FilialRegiaoDisp>(entity =>
            {
                entity.HasKey(e => e.CodFilialRegiaoDisp)
                    .HasName("PK__FilialRe__2A7A62A12A6AB292");

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeRegiao).IsUnicode(false);
            });

            modelBuilder.Entity<FilialTecnico>(entity =>
            {
                entity.Property(e => e.CodTecnicosFilial).ValueGeneratedOnAdd();

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<FinanceiroPosprestadora>(entity =>
            {
                entity.HasOne(d => d.CodClienteNavigation)
                    .WithMany(p => p.FinanceiroPosprestadoras)
                    .HasForeignKey(d => d.CodCliente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FinanceiroPOSPrestadora_Cliente");
            });

            modelBuilder.Entity<FormaPagto>(entity =>
            {
                entity.HasKey(e => e.CodFormaPagto)
                    .HasName("PK__FormaPagto__3469B275");

                entity.Property(e => e.CodFormaPagto).ValueGeneratedNever();

                entity.Property(e => e.DescFormaPagto).IsUnicode(false);
            });

            modelBuilder.Entity<Fornecedor>(entity =>
            {
                entity.Property(e => e.Contato).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.MunicipioSede).IsUnicode(false);

                entity.Property(e => e.RazaoSocial).IsUnicode(false);

                entity.Property(e => e.Telefone).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);

                entity.Property(e => e.UfrealizaServico).IsUnicode(false);
            });

            modelBuilder.Entity<FrotaCobrancaGaragem>(entity =>
            {
                entity.Property(e => e.CodFrotaCobrancaGaragem).ValueGeneratedOnAdd();

                entity.Property(e => e.DescFrotaCobrancaGaragem).IsUnicode(false);
            });

            modelBuilder.Entity<FrotaFinalidadeUso>(entity =>
            {
                entity.Property(e => e.CodFrotaFinalidadeUso).ValueGeneratedOnAdd();

                entity.Property(e => e.DescFrotaFinalidadeUso).IsUnicode(false);
            });

            modelBuilder.Entity<FullTime>(entity =>
            {
                entity.Property(e => e.CodOs).IsFixedLength(true);

                entity.Property(e => e.Janela)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.StatusPrazo)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FusoHorario>(entity =>
            {
                entity.Property(e => e.CodFusoHorario).ValueGeneratedNever();

                entity.Property(e => e.DescFusoHorario).IsUnicode(false);
            });

            modelBuilder.Entity<FusoHorarioUf>(entity =>
            {
                entity.HasKey(e => e.CodFusoHorarioUf)
                    .HasName("PK_FusoHorarioFilial");
            });

            modelBuilder.Entity<FusoHorarioVerao>(entity =>
            {
                entity.HasKey(e => e.CodFuso)
                    .HasName("PK__ItemXORC__CBDA6DBD40F5FB3B");
            });

            modelBuilder.Entity<GerenciaTarefasSat>(entity =>
            {
                entity.HasKey(e => e.CodGerenciaTarefasSat)
                    .HasName("PK_GerenciaTarefas");

                entity.Property(e => e.Atividade).IsUnicode(false);

                entity.Property(e => e.Complexidade).IsUnicode(false);

                entity.Property(e => e.Data).IsUnicode(false);

                entity.Property(e => e.Minutos).IsUnicode(false);

                entity.Property(e => e.Projeto).IsUnicode(false);

                entity.Property(e => e.Tarefa).IsUnicode(false);

                entity.Property(e => e.Tecnologia).IsUnicode(false);

                entity.Property(e => e.TipoAtendimento).IsUnicode(false);

                entity.Property(e => e.TipoTarefa).IsUnicode(false);

                entity.Property(e => e.Titulo).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<GoogleApi>(entity =>
            {
                entity.Property(e => e.CodGoogleApi).ValueGeneratedOnAdd();

                entity.Property(e => e.Distancia).IsUnicode(false);

                entity.Property(e => e.Duracao).IsUnicode(false);

                entity.Property(e => e.EnderecoDestino).IsUnicode(false);

                entity.Property(e => e.EnderecoOrigem).IsUnicode(false);

                entity.Property(e => e.LatDestino).IsUnicode(false);

                entity.Property(e => e.LatOrigem).IsUnicode(false);

                entity.Property(e => e.LngDestino).IsUnicode(false);

                entity.Property(e => e.LngOrigem).IsUnicode(false);
            });

            modelBuilder.Entity<GoogleApiLog>(entity =>
            {
                entity.Property(e => e.CodGoogleApiLog).ValueGeneratedOnAdd();

                entity.Property(e => e.Detalhes).IsUnicode(false);

                entity.Property(e => e.Titulo).IsUnicode(false);
            });

            modelBuilder.Entity<Gp>(entity =>
            {
                entity.HasKey(e => e.GpsId)
                    .IsClustered(false);

                entity.HasIndex(e => e.UtcDatetime, "IDX_Gps_1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodSimCard, "_dta_index_Gps_9_356404539__K2_10")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Checksum).IsUnicode(false);

                entity.Property(e => e.Command).IsUnicode(false);

                entity.Property(e => e.Declination)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Hdop).IsUnicode(false);

                entity.Property(e => e.IndicatorMode)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LatitudePosition)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LongitudePosition)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MagneticVariation).IsUnicode(false);

                entity.Property(e => e.Status)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.CodSimCardNavigation)
                    .WithMany(p => p.Gps)
                    .HasForeignKey(d => d.CodSimCard)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Gps_SimCard");
            });

            modelBuilder.Entity<GpsParameter>(entity =>
            {
                entity.HasKey(e => new { e.GpsParameterId, e.CodSimCard });

                entity.Property(e => e.GpsParameterId).ValueGeneratedOnAdd();

                entity.Property(e => e.Apn).IsUnicode(false);

                entity.Property(e => e.ApnPassword).IsUnicode(false);

                entity.Property(e => e.ApnUsername).IsUnicode(false);

                entity.Property(e => e.Ip).IsUnicode(false);

                entity.Property(e => e.Password).IsUnicode(false);

                entity.Property(e => e.Protocol).IsUnicode(false);
            });

            modelBuilder.Entity<GpsRegion>(entity =>
            {
                entity.Property(e => e.RegionColor).IsUnicode(false);
            });

            modelBuilder.Entity<GpscoordenadaTecnico>(entity =>
            {
                entity.HasKey(e => e.CodGpscoordenadaTecnico)
                    .HasName("PK__GPSCoordenadaTec__645A5367");

                entity.HasIndex(e => e.SimCardMobile, "MelhoriasGPS_dta_index_GPSCoordenadaTecnico_7_256160108__K3_5_6")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.SimCardMobile, e.DataHoraSatelite }, "MelhoriasGPS_dta_index_GPSCoordenadaTecnico_7_256160108__K3_K4D")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.DataHoraSatelite, e.SimCardMobile }, "MelhoriasGPS_dta_index_GPSCoordenadaTecnico_7_256160108__K4_K3")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.DataHoraCad, e.SimCardMobile, e.CodGpscoordenadaTecnico }, "_dta_index_GPSCoordenadaTecnico_7_256160108__K10_K3_K1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodGpscoordenadaTecnico, "_dta_index_GPSCoordenadaTecnico_7_256160108__K1_2_3_4_5_6_7")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodTecnico, e.DataHoraSatelite, e.PrecisaoLocal }, "_dta_index_GPSCoordenadaTecnico_7_256160108__K2_K4_K8_3_5_6")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SimCardMobile, "_dta_index_GPSCoordenadaTecnico_7_256160108__K3")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.SimCardMobile, e.CodGpscoordenadaTecnico, e.LatitudePonto, e.LongitudePonto }, "_dta_index_GPSCoordenadaTecnico_7_256160108__K3_K1_K5_K6_4")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.LatitudePonto, e.LongitudePonto, e.SimCardMobile, e.CodGpscoordenadaTecnico }, "_dta_index_GPSCoordenadaTecnico_7_256160108__K5_K6_K3_K1_4")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodTecnico).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LatitudePonto).IsUnicode(false);

                entity.Property(e => e.LongitudePonto).IsUnicode(false);

                entity.Property(e => e.SimCardMobile).IsUnicode(false);
            });

            modelBuilder.Entity<GrupoCausa>(entity =>
            {
                entity.HasKey(e => new { e.CodTipoCausa, e.CodGrupoCausa })
                    .HasName("PK__GrupoCausa__72C60C4A");

                entity.Property(e => e.CodEgrupoCausa).IsUnicode(false);

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("(1)");

                entity.Property(e => e.NomeGrupoCausa).IsUnicode(false);

                entity.HasOne(d => d.CodTipoCausaNavigation)
                    .WithMany(p => p.GrupoCausas)
                    .HasForeignKey(d => d.CodTipoCausa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__GrupoCaus__CodTi__339FAB6E");
            });

            modelBuilder.Entity<GrupoEquipamento>(entity =>
            {
                entity.HasKey(e => new { e.CodTipoEquip, e.CodGrupoEquip })
                    .HasName("PK__GrupoEquipamento__7C8480AE");

                entity.Property(e => e.CodEgrupoEquip).IsUnicode(false);

                entity.Property(e => e.NomeGrupoEquip).IsUnicode(false);

                entity.HasOne(d => d.CodTipoEquipNavigation)
                    .WithMany(p => p.GrupoEquipamentos)
                    .HasForeignKey(d => d.CodTipoEquip)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__GrupoEqui__CodTi__0B91BA14");
            });

            modelBuilder.Entity<HistAberturaBanrisul>(entity =>
            {
                entity.HasKey(e => e.CodHistAberturaBanrisul)
                    .HasName("PK_OSBanrisulPos");

                entity.Property(e => e.AbertoEm).IsUnicode(false);

                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.CnpjCpf).IsUnicode(false);

                entity.Property(e => e.Conta).IsUnicode(false);

                entity.Property(e => e.Descricao).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.Estabelecimento).IsUnicode(false);

                entity.Property(e => e.InscricaoEstadual).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NumeroSerie).IsUnicode(false);

                entity.Property(e => e.Oscliente).IsUnicode(false);

                entity.Property(e => e.Prioridade).IsUnicode(false);

                entity.Property(e => e.RazaoSocial).IsUnicode(false);

                entity.Property(e => e.Reabertura).IsUnicode(false);

                entity.Property(e => e.Rede).IsUnicode(false);

                entity.Property(e => e.Terminal).IsUnicode(false);

                entity.Property(e => e.Tipo).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<HistAtualizacaoPq>(entity =>
            {
                entity.Property(e => e.Acao).IsUnicode(false);

                entity.Property(e => e.CodObjeto).IsUnicode(false);

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.Motivo).IsUnicode(false);

                entity.Property(e => e.Objeto).IsUnicode(false);
            });

            modelBuilder.Entity<HistChamado>(entity =>
            {
                entity.Property(e => e.Acao).IsUnicode(false);

                entity.Property(e => e.CodHistChamados).ValueGeneratedOnAdd();

                entity.Property(e => e.CodObjeto).IsUnicode(false);

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.Motivo).IsUnicode(false);

                entity.Property(e => e.Objeto).IsUnicode(false);
            });

            modelBuilder.Entity<HistDespesaAdiantamento>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.TipoHistorico).IsUnicode(false);
            });

            modelBuilder.Entity<HistDespesaItem>(entity =>
            {
                entity.HasKey(e => e.CodHistDespesaItem)
                    .HasName("HistDespesaItem_PK");

                entity.Property(e => e.BairroDestino).IsUnicode(false);

                entity.Property(e => e.BairroDestinoWebraska).IsUnicode(false);

                entity.Property(e => e.BairroOrigem).IsUnicode(false);

                entity.Property(e => e.BairroOrigemWebraska).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.EnderecoDestino).IsUnicode(false);

                entity.Property(e => e.EnderecoDestinoWebraska).IsUnicode(false);

                entity.Property(e => e.EnderecoOrigem).IsUnicode(false);

                entity.Property(e => e.EnderecoOrigemWebraska).IsUnicode(false);

                entity.Property(e => e.NomeCidadeDestinoWebraska).IsUnicode(false);

                entity.Property(e => e.NomeCidadeOrigemWebraska).IsUnicode(false);

                entity.Property(e => e.NumDestino).IsUnicode(false);

                entity.Property(e => e.NumDestinoWebraska).IsUnicode(false);

                entity.Property(e => e.NumNf).IsUnicode(false);

                entity.Property(e => e.NumOrigem).IsUnicode(false);

                entity.Property(e => e.NumOrigemWebraska).IsUnicode(false);

                entity.Property(e => e.Obs).IsUnicode(false);

                entity.Property(e => e.ObsReprovacao).IsUnicode(false);

                entity.Property(e => e.SiglaPaisDestinoWebraska).IsUnicode(false);

                entity.Property(e => e.SiglaPaisOrigemWebraska).IsUnicode(false);

                entity.Property(e => e.SiglaUfdestinoWebraska).IsUnicode(false);

                entity.Property(e => e.SiglaUforigemWebraska).IsUnicode(false);

                entity.Property(e => e.TentativaKm).IsUnicode(false);
            });

            modelBuilder.Entity<HistEquipamento>(entity =>
            {
                entity.Property(e => e.Acao).IsUnicode(false);

                entity.Property(e => e.CodHistEquipamentos).ValueGeneratedOnAdd();

                entity.Property(e => e.CodObjeto).IsUnicode(false);

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.Motivo).IsUnicode(false);

                entity.Property(e => e.Objeto).IsUnicode(false);
            });

            modelBuilder.Entity<HistEquipamentoContrato>(entity =>
            {
                entity.HasKey(e => e.CodHistEquipContrato)
                    .HasName("PK_HistEquipContrato");

                entity.HasIndex(e => e.CodEquipContrato, "ix_histequipamentocontrato_codequipcontrato")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodBmp).IsUnicode(false);

                entity.Property(e => e.CodEquipCliente).IsUnicode(false);

                entity.Property(e => e.CodTipoOperacao)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManutencao).IsUnicode(false);

                entity.Property(e => e.DataHistEquipContrato).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Distancia2Qatende).IsUnicode(false);

                entity.Property(e => e.DistanciaPatRes).HasDefaultValueSql("((0))");

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("((1))");

                entity.Property(e => e.IndGarantia).HasDefaultValueSql("((0))");

                entity.Property(e => e.ModeloEquip1).IsUnicode(false);

                entity.Property(e => e.ModeloEquip2).IsUnicode(false);

                entity.Property(e => e.ModeloEquip3).IsUnicode(false);

                entity.Property(e => e.ModeloEquip4).IsUnicode(false);

                entity.Property(e => e.ModeloEquip5).IsUnicode(false);

                entity.Property(e => e.NumEtiquetaEquip).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.NumSerieCliente).IsUnicode(false);

                entity.Property(e => e.Origem).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.Sequencia).IsUnicode(false);

                entity.Property(e => e.ValorDespesaInstalacao).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<HistFechamentoBanrisul>(entity =>
            {
                entity.Property(e => e.CnpjCpf).IsUnicode(false);

                entity.Property(e => e.CnpjEmpresaParceira).IsUnicode(false);

                entity.Property(e => e.CodigoArea).IsUnicode(false);

                entity.Property(e => e.DataGeracaoArquivo).IsUnicode(false);

                entity.Property(e => e.DataInstalacao).IsUnicode(false);

                entity.Property(e => e.DescricaoFinalidade).IsUnicode(false);

                entity.Property(e => e.Destino).IsUnicode(false);

                entity.Property(e => e.Estabelecimento).IsUnicode(false);

                entity.Property(e => e.Filler).IsUnicode(false);

                entity.Property(e => e.HoraGeracaoArquivo).IsUnicode(false);

                entity.Property(e => e.Horario).IsUnicode(false);

                entity.Property(e => e.MacAddress).IsUnicode(false);

                entity.Property(e => e.NomeArquivo).IsUnicode(false);

                entity.Property(e => e.NomeEmpresaParceira).IsUnicode(false);

                entity.Property(e => e.NumeroCelular).IsUnicode(false);

                entity.Property(e => e.NumeroSerie).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.PessoaFiscal).IsUnicode(false);

                entity.Property(e => e.QtdDetalhe2).IsUnicode(false);

                entity.Property(e => e.QtdDetalhe3).IsUnicode(false);

                entity.Property(e => e.QtdDetalhe4).IsUnicode(false);

                entity.Property(e => e.QtdDetalhe5).IsUnicode(false);

                entity.Property(e => e.QtdDetalhe6).IsUnicode(false);

                entity.Property(e => e.QtdDetalhe7).IsUnicode(false);

                entity.Property(e => e.QtdDetalhe8).IsUnicode(false);

                entity.Property(e => e.QtdDetalhe9).IsUnicode(false);

                entity.Property(e => e.Rede).IsUnicode(false);

                entity.Property(e => e.SeqArquivo).IsUnicode(false);

                entity.Property(e => e.SeqRegistro).IsUnicode(false);

                entity.Property(e => e.Situacao).IsUnicode(false);

                entity.Property(e => e.Terminal).IsUnicode(false);

                entity.Property(e => e.TipoRegistro).IsUnicode(false);

                entity.Property(e => e.TipoTerminal).IsUnicode(false);
            });

            modelBuilder.Entity<HistLocalAtendimento>(entity =>
            {
                entity.HasIndex(e => e.DataHoraAlteracao, "IDX_HISTLOCALATENDIMENTO_DATAHORAALTERACAO")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.BairroCoordenadas).IsUnicode(false);

                entity.Property(e => e.BairroEntregaDel).IsUnicode(false);

                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.CepentregaDel).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.CidadeCoordenadas).IsUnicode(false);

                entity.Property(e => e.CidadeEntregaDel).IsUnicode(false);

                entity.Property(e => e.Cnpj).IsUnicode(false);

                entity.Property(e => e.Cnpjfaturamento).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCadastroDel).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManutencaoDel).IsUnicode(false);

                entity.Property(e => e.ComplemEndDel).IsUnicode(false);

                entity.Property(e => e.ComplemEndEntregaDel).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.DcpostoClienteDel).IsUnicode(false);

                entity.Property(e => e.DescTurno).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.EnderecoComplemento).IsUnicode(false);

                entity.Property(e => e.EnderecoCoordenadas).IsUnicode(false);

                entity.Property(e => e.EnderecoEntregaDel).IsUnicode(false);

                entity.Property(e => e.Fax).IsUnicode(false);

                entity.Property(e => e.FaxEntregaDel).IsUnicode(false);

                entity.Property(e => e.Fone).IsUnicode(false);

                entity.Property(e => e.InscricaoEstadual).IsUnicode(false);

                entity.Property(e => e.Latitude).IsUnicode(false);

                entity.Property(e => e.Longitude).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumAgencia2Del).IsUnicode(false);

                entity.Property(e => e.NumAgenciaClienteDel).IsUnicode(false);

                entity.Property(e => e.NumeroEnd).IsUnicode(false);

                entity.Property(e => e.NumeroEndEntregaDel).IsUnicode(false);

                entity.Property(e => e.ObsClienteDel).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.OrigemDel).IsUnicode(false);

                entity.Property(e => e.PaisCoordenadas).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.SiglaUfentregaDel).IsUnicode(false);

                entity.Property(e => e.Site).IsUnicode(false);

                entity.Property(e => e.Telefone1Del).IsUnicode(false);

                entity.Property(e => e.Telefone2Del).IsUnicode(false);

                entity.Property(e => e.TelefoneEntregaDel).IsUnicode(false);

                entity.Property(e => e.TipoHistorico).IsUnicode(false);

                entity.Property(e => e.Ufcoordenadas).IsUnicode(false);
            });

            modelBuilder.Entity<HistO>(entity =>
            {
                entity.HasKey(e => e.CodHistOs)
                    .HasName("PK__HistOS__7BB05806");

                entity.HasIndex(e => e.DataHoraCad, "IDX_HISTOS_DATAHORACAD")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodOs, e.DataHoraCad, e.CodStatusServico }, "IX_HistOS")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodOs, "ix_CodOS")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuarioManutencao).IsUnicode(false);
            });

            modelBuilder.Entity<HistOrcamento>(entity =>
            {
                entity.Property(e => e.Acao).IsUnicode(false);

                entity.Property(e => e.CodHistOrcamentos).ValueGeneratedOnAdd();

                entity.Property(e => e.CodObjeto).IsUnicode(false);

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.Motivo).IsUnicode(false);

                entity.Property(e => e.Objeto).IsUnicode(false);
            });

            modelBuilder.Entity<HistPeca>(entity =>
            {
                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioHist).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);
            });

            modelBuilder.Entity<HistPecaStn>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);
            });

            modelBuilder.Entity<HistPonto>(entity =>
            {
                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.CodUsuarioAprov).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);
            });

            modelBuilder.Entity<HistPontoMovel>(entity =>
            {
                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);
            });

            modelBuilder.Entity<HistPontoPeriodoUsuario>(entity =>
            {
                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.Operacao)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoTrigger)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<HistPontoUsuario>(entity =>
            {
                entity.HasIndex(e => e.DataCadastro, "IDX_HISTPONTOUSUARIO_DATACADASTRO")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.CodUsuarioAprov).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.Operacao)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoTrigger)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<HistPontoUsuarioDataAdvertencium>(entity =>
            {
                entity.Property(e => e.CodUsuarioAdvertido).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.Operacao)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoTrigger)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<HistPontoUsuarioDataDivergenciaObservacao>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.Descricao).IsUnicode(false);

                entity.Property(e => e.Operacao)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoTrigger)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<HistPontoUsuarioDataDivergencium>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.Operacao)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoTrigger)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<HistPontoUsuarioDataValidacao>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.Operacao)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoTrigger)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<HistPontoUsuarioDatum>(entity =>
            {
                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.Operacao)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoTrigger)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<HistRat>(entity =>
            {
                entity.Property(e => e.AceitadorCedula).IsUnicode(false);

                entity.Property(e => e.BiosCpuMicroComputador).IsUnicode(false);

                entity.Property(e => e.CaminhoRatdigitalizada).IsUnicode(false);

                entity.Property(e => e.CodHistRat).ValueGeneratedOnAdd();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManutencao).IsUnicode(false);

                entity.Property(e => e.CpuAntiskimming).IsUnicode(false);

                entity.Property(e => e.CpuDispensadorEnvelope).IsUnicode(false);

                entity.Property(e => e.CpuImpressoraRecibo).IsUnicode(false);

                entity.Property(e => e.CpuMecanismoDepositarioEnvelope).IsUnicode(false);

                entity.Property(e => e.CpuMecanismoDispensadorCedula).IsUnicode(false);

                entity.Property(e => e.CpuPresenterFolhaCheque).IsUnicode(false);

                entity.Property(e => e.IndBrbatendeConfederal)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MotivoEspera).IsUnicode(false);

                entity.Property(e => e.MotivoInterrupcao).IsUnicode(false);

                entity.Property(e => e.NomeAcompanhante).IsUnicode(false);

                entity.Property(e => e.NomeRespCliente).IsUnicode(false);

                entity.Property(e => e.NumRat).IsUnicode(false);

                entity.Property(e => e.ObsRat).IsUnicode(false);

                entity.Property(e => e.PertoScan).IsUnicode(false);

                entity.Property(e => e.PlacaSensor).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.TemperaturaAmbiente).IsUnicode(false);

                entity.Property(e => e.TensaoComCarga).IsUnicode(false);

                entity.Property(e => e.TensaoSemCarga).IsUnicode(false);

                entity.Property(e => e.TensaoTerraNeutro).IsUnicode(false);
            });

            modelBuilder.Entity<HistRatdetalhesPeca>(entity =>
            {
                entity.Property(e => e.CodMagnusInconsistente).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManutencao).IsUnicode(false);

                entity.Property(e => e.DescStatus).IsUnicode(false);

                entity.Property(e => e.MotivoSubstituicao).IsUnicode(false);

                entity.Property(e => e.NotaFiscal).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);
            });

            modelBuilder.Entity<HistRatnew>(entity =>
            {
                entity.Property(e => e.AceitadorCedula).IsUnicode(false);

                entity.Property(e => e.BiosCpuMicroComputador).IsUnicode(false);

                entity.Property(e => e.CaminhoRatdigitalizada).IsUnicode(false);

                entity.Property(e => e.CodHistRat).ValueGeneratedOnAdd();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManutencao).IsUnicode(false);

                entity.Property(e => e.CpuAntiskimming).IsUnicode(false);

                entity.Property(e => e.CpuDispensadorEnvelope).IsUnicode(false);

                entity.Property(e => e.CpuImpressoraRecibo).IsUnicode(false);

                entity.Property(e => e.CpuMecanismoDepositarioEnvelope).IsUnicode(false);

                entity.Property(e => e.CpuMecanismoDispensadorCedula).IsUnicode(false);

                entity.Property(e => e.CpuPresenterFolhaCheque).IsUnicode(false);

                entity.Property(e => e.IndBrbatendeConfederal)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MotivoEspera).IsUnicode(false);

                entity.Property(e => e.MotivoInterrupcao).IsUnicode(false);

                entity.Property(e => e.NomeAcompanhante).IsUnicode(false);

                entity.Property(e => e.NomeRespCliente).IsUnicode(false);

                entity.Property(e => e.NumRat).IsUnicode(false);

                entity.Property(e => e.ObsRat).IsUnicode(false);

                entity.Property(e => e.PertoScan).IsUnicode(false);

                entity.Property(e => e.PlacaSensor).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.TemperaturaAmbiente).IsUnicode(false);

                entity.Property(e => e.TensaoComCarga).IsUnicode(false);

                entity.Property(e => e.TensaoSemCarga).IsUnicode(false);

                entity.Property(e => e.TensaoTerraNeutro).IsUnicode(false);
            });

            modelBuilder.Entity<HistSmartCard>(entity =>
            {
                entity.Property(e => e.CardKey).IsUnicode(false);

                entity.Property(e => e.Ic).IsUnicode(false);

                entity.Property(e => e.SerialNumber).IsUnicode(false);

                entity.Property(e => e.TerminalKey).IsUnicode(false);
            });

            modelBuilder.Entity<HistTecnico>(entity =>
            {
                entity.Property(e => e.Apelido).IsUnicode(false);

                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.BairroCoordenadas).IsUnicode(false);

                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.CidadeCoordenadas).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.Cpf).IsUnicode(false);

                entity.Property(e => e.Cpflogix).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.EnderecoComplemento).IsUnicode(false);

                entity.Property(e => e.EnderecoCoordenadas).IsUnicode(false);

                entity.Property(e => e.Fone).IsUnicode(false);

                entity.Property(e => e.FoneParticular).IsUnicode(false);

                entity.Property(e => e.FonePerto).IsUnicode(false);

                entity.Property(e => e.Latitude).IsUnicode(false);

                entity.Property(e => e.Longitude).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.NumCrea).IsUnicode(false);

                entity.Property(e => e.PaisCoordenadas).IsUnicode(false);

                entity.Property(e => e.Rg).IsUnicode(false);

                entity.Property(e => e.SimCardMobile).IsUnicode(false);

                entity.Property(e => e.TrackerId).IsUnicode(false);

                entity.Property(e => e.Ufcoordenadas).IsUnicode(false);
            });

            modelBuilder.Entity<HistUsuarioSeguranca>(entity =>
            {
                entity.Property(e => e.CodUsuario).IsUnicode(false);
            });

            modelBuilder.Entity<HistoricoClientePeca>(entity =>
            {
                entity.Property(e => e.CodClientePeca).ValueGeneratedNever();

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.HasOne(d => d.CodClienteNavigation)
                    .WithMany(p => p.HistoricoClientePecas)
                    .HasForeignKey(d => d.CodCliente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HistoricoClientePeca_Cliente");

                entity.HasOne(d => d.CodContratoNavigation)
                    .WithMany(p => p.HistoricoClientePecas)
                    .HasForeignKey(d => d.CodContrato)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HistoricoClientePeca_Contrato");
            });

            modelBuilder.Entity<HistoricoIntegracaoBanrisul>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.NomeArquivo).IsUnicode(false);
            });

            modelBuilder.Entity<HistoricoRatdetalhe>(entity =>
            {
                entity.Property(e => e.CodHistoricoRatdetalhe).ValueGeneratedOnAdd();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioExclusao).IsUnicode(false);
            });

            modelBuilder.Entity<HistoricoSlaMensalCliente>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<HistoricoVeiculoCombustivel>(entity =>
            {
                entity.HasKey(e => e.CodHistoricoVeiculoCombustivel)
                    .HasName("HistoricoVeiculoCombustivel_PK");

                entity.Property(e => e.CodHistoricoVeiculoCombustivel).ValueGeneratedNever();

                entity.Property(e => e.Tipo).IsUnicode(false);
            });

            modelBuilder.Entity<Hodometro>(entity =>
            {
                entity.Property(e => e.Placa).IsUnicode(false);

                entity.Property(e => e.TipoUso).IsUnicode(false);
            });

            modelBuilder.Entity<Improdutividade>(entity =>
            {
                entity.HasKey(e => e.CodImprodutividade)
                    .HasName("PK__Improdut__DAEA7B3C3C64D6DC");

                entity.Property(e => e.DescImprodutividade).IsUnicode(false);
            });

            modelBuilder.Entity<IncidenteNaoProcedente>(entity =>
            {
                entity.HasIndex(e => e.CodMotivoIncidenteNaoProcedente, "IX_IncidenteNaoProcedente_Motivo")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.UsuarioCadastro, "IX_IncidenteNaoProcedente_Usuario")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.UsuarioCadastro).IsUnicode(false);

                entity.HasOne(d => d.CodMotivoIncidenteNaoProcedenteNavigation)
                    .WithMany(p => p.IncidenteNaoProcedentes)
                    .HasForeignKey(d => d.CodMotivoIncidenteNaoProcedente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IncidenteNaoProcedente_MotivoIncidenteNaoProcedente");

                entity.HasOne(d => d.UsuarioCadastroNavigation)
                    .WithMany(p => p.IncidenteNaoProcedentes)
                    .HasForeignKey(d => d.UsuarioCadastro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IncidenteNaoProcedente_Usuario");
            });

            modelBuilder.Entity<IncidentesAbertosHistIvan>(entity =>
            {
                entity.Property(e => e.CodIncidentesAbertosHistIvan).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Indicador>(entity =>
            {
                entity.Property(e => e.CodIndicador)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DescF).IsUnicode(false);

                entity.Property(e => e.DescFplural).IsUnicode(false);

                entity.Property(e => e.DescM).IsUnicode(false);

                entity.Property(e => e.DescMplural).IsUnicode(false);

                entity.Property(e => e.Sigla).IsUnicode(false);

                entity.Property(e => e.Source).IsUnicode(false);
            });

            modelBuilder.Entity<IndicePecasPend>(entity =>
            {
                entity.HasIndex(e => new { e.CodFilial, e.ChamadosMes, e.ChamadosMesPecasPendentes }, "IX_INDICEPECASPEND")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);
            });

            modelBuilder.Entity<IndicePecasPendDet>(entity =>
            {
                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.CodIndPecasPend).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<IndicePecasPendDetTemp>(entity =>
            {
                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.CodIndPecasPend).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<IndicePecasPendIvan>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);
            });

            modelBuilder.Entity<IndicePecasPendNew>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndicePecasPendPerformance3>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);
            });

            modelBuilder.Entity<IndicePecasPendPerformance3DadosCongelado>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);
            });

            modelBuilder.Entity<IndicePecasPendRatdigital>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);
            });

            modelBuilder.Entity<IndicePecasPendTemp>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceQuebra>(entity =>
            {
                entity.HasIndex(e => new { e.CodTipoEquip, e.CodCliente, e.CodFilial }, "ClusteredIndex-20150312-094408")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceQuebraPerformance3>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceQuebraPerformance3DadosCongelado>(entity =>
            {
                entity.HasIndex(e => e.AnoMes, "IDX_INDICEQUEBRAPERFORMANCE3DADOSCONGELADOS_\r\nANOMES")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.AnoMes, "IDX_INDICEQUEBRAPERFORMANCE3DADOSCONGELADOS_ANOMES")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceQuebraSlide>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceReincidenciaPerformance>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceReincidenciaPerformance3>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceReincidenciaPerformance3DadosCongelado>(entity =>
            {
                entity.HasIndex(e => e.AnoMes, "IDX_INDICEREINCIDENCIAPERFORMANCE3DADOSCONGELADOS_ANOMES")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceReincidenciaPerformance7>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceReincidenciaPerformance7DadosCongelado>(entity =>
            {
                entity.HasIndex(e => e.AnoMes, "IDX_INDICEREINCIDENCIAPERFORMANCE7DADOSCONGELADOS_ANOMES")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceReincidenciaPerformanceDadosCongelado>(entity =>
            {
                entity.HasIndex(e => e.AnoMes, "IDX_INDICEREINCIDENCIAPERFORMANCEDADOSCONGELADOS_ANOMES")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceReincidenciaPerformanceFilial>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceReincidenciaPerformancePag6>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceReincidencium>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucao>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoAngeloni>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoBanrisul>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoBasa>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoBb>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoBbt>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoBnb>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoBrMall>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoBrb>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoBrink>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoCef>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoCorreio>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoDigicon>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoEstacenter>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoEstapar>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoGide>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoIndigo>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoLojasAmericana>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoMetroBahium>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoMetroSp>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoMetrorio>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoMultiplan>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoNew>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoNew24>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoNew48>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoNew72>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoNewBanpara>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoNewBb>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoNewBnbGar>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoNewBnbMan>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoNewCef1778>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoNewCef1783>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoNewCobra>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoNewCobraDispBb>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoNewDispBb>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoNewGeral>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoNewGeralIvan>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoNewSaquepague>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoParebem>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoParking>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoPerformance>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoPerformance3>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoPerformance3DadosCongelado>(entity =>
            {
                entity.HasIndex(e => e.AnoMes, "IDX_INDICESOLUCAOPERFORMANCE3DADOSCONGELADOS_ANOMES")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoPerformance7>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoPerformance7DadosCongelado>(entity =>
            {
                entity.HasIndex(e => e.AnoMes, "IDX_INDICESOLUCAOPERFORMANCE7DADOSCONGELADOS_ANOMES")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoPerformanceDadosCongelado>(entity =>
            {
                entity.HasIndex(e => e.AnoMes, "IDX_INDICESOLUCAOPERFORMANCEDADOSCONGELADOS_ANOMES")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoPerformanceDadosCongeladosNew>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Data).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<IndiceSolucaoPerformanceDadosCongeladosNewBkp>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoPerformanceFilial>(entity =>
            {
                entity.HasIndex(e => e.CodFilial, "IDX_IndiceSolucaoPerformanceFilial_CofFilial_ADV")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoPerformancePag6>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoProsegur>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoProtege>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoRelogio>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoRiachuelo>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoRiocard>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoSafePark>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoSicoob>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoSicredi>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoSicredi24>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoSicredi48>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoSicredi72>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoStv>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoTemp>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoVarejo>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoViaParqueShopping>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoViaQuatro>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoVlt>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoWp>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<IndiceSolucaoZaffari>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<InstalAnexo>(entity =>
            {
                entity.HasKey(e => e.CodInstalAnexo)
                    .HasName("PK__InstalAnexo__780AAFAB");

                entity.HasIndex(e => e.CodInstalacao, "_dta_index_InstalAnexo_7_1172967305__K2_8")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodInstalacao, e.IndAtivo }, "_dta_index_InstalAnexo_7_1172967305__K2_K8")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IndAtivo, e.CodInstalacao }, "_dta_index_InstalAnexo_7_1172967305__K8_K2")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodInstalAnexo).ValueGeneratedNever();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DescAnexo).IsUnicode(false);

                entity.Property(e => e.NomeAnexo).IsUnicode(false);

                entity.Property(e => e.SourceAnexo).IsUnicode(false);

                entity.HasOne(d => d.CodInstalLoteNavigation)
                    .WithMany(p => p.InstalAnexos)
                    .HasForeignKey(d => d.CodInstalLote)
                    .HasConstraintName("FK_InstalAnexo_InstalLote");

                entity.HasOne(d => d.CodInstalPleitoNavigation)
                    .WithMany(p => p.InstalAnexos)
                    .HasForeignKey(d => d.CodInstalPleito)
                    .HasConstraintName("FK_InstalAnexo_InstalPleito");

                entity.HasOne(d => d.CodInstalacaoNavigation)
                    .WithMany(p => p.InstalAnexos)
                    .HasForeignKey(d => d.CodInstalacao)
                    .HasConstraintName("FK_InstalAnexo_Instalacao");

                entity.HasOne(d => d.CodUsuarioCadNavigation)
                    .WithMany(p => p.InstalAnexoCodUsuarioCadNavigations)
                    .HasForeignKey(d => d.CodUsuarioCad)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InstalAnexo_UsuarioCad");

                entity.HasOne(d => d.CodUsuarioManutNavigation)
                    .WithMany(p => p.InstalAnexoCodUsuarioManutNavigations)
                    .HasForeignKey(d => d.CodUsuarioManut)
                    .HasConstraintName("FK_InstalAnexo_UsuarioManut");
            });

            modelBuilder.Entity<InstalCampo>(entity =>
            {
                entity.Property(e => e.CodInstalCampo).ValueGeneratedOnAdd();

                entity.Property(e => e.NomeInstalCampo).IsUnicode(false);
            });

            modelBuilder.Entity<InstalGrupoAcesso>(entity =>
            {
                entity.Property(e => e.Codigo).IsUnicode(false);

                entity.Property(e => e.IndAcessoFinanceiro).IsUnicode(false);

                entity.Property(e => e.IndAcessoImplantacao).IsUnicode(false);

                entity.Property(e => e.IndAcessoTodos).IsUnicode(false);

                entity.Property(e => e.IndAcessoTradeIn).IsUnicode(false);
            });

            modelBuilder.Entity<InstalLote>(entity =>
            {
                entity.HasKey(e => e.CodInstalLote)
                    .HasName("PK__InstalLote__6E814571");

                entity.HasIndex(e => e.CodInstalLote, "_dta_index_InstalLote_7_2112062610__K1_2_4")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodInstalLote).ValueGeneratedNever();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DescLote).IsUnicode(false);

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("(1)");

                entity.Property(e => e.NomeLote).IsUnicode(false);

                entity.HasOne(d => d.CodContratoNavigation)
                    .WithMany(p => p.InstalLotes)
                    .HasForeignKey(d => d.CodContrato)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__InstalLot__CodCo__168F36CB");
            });

            modelBuilder.Entity<InstalMotivoMultum>(entity =>
            {
                entity.HasKey(e => e.CodInstalMotivoMulta)
                    .HasName("PK__InstalMotivoMult__7C7A5F0D");

                entity.Property(e => e.CodInstalMotivoMulta).ValueGeneratedNever();

                entity.Property(e => e.DescMotivoMulta).IsUnicode(false);

                entity.Property(e => e.NomeMotivoMulta).IsUnicode(false);
            });

            modelBuilder.Entity<InstalMotivoRe>(entity =>
            {
                entity.HasKey(e => e.CodInstalMotivoRes)
                    .HasName("PK__InstalMotivoRes__7F56CBB8");

                entity.Property(e => e.CodInstalMotivoRes).ValueGeneratedNever();

                entity.Property(e => e.DescMotivoRes).IsUnicode(false);

                entity.Property(e => e.SiglaMotivoRes).IsUnicode(false);
            });

            modelBuilder.Entity<InstalNfaut>(entity =>
            {
                entity.HasKey(e => e.CodInstalNfaut)
                    .HasName("PK__InstalNFAut__715DB21C");

                entity.HasIndex(e => e.CodInstalNfaut, "_dta_index_InstalNFAut_7_1869965738__K1_4_5")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodInstalNfaut).ValueGeneratedNever();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Nfaut).IsUnicode(false);
            });

            modelBuilder.Entity<InstalNfvendum>(entity =>
            {
                entity.HasIndex(e => new { e.CodCliente, e.NumNfvenda }, "IX_InstalNFVenda")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodInstalNfvenda, "_dta_index_InstalNFVenda_7_825874109__K1_3_4_6_7")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.ObsNfvenda).IsUnicode(false);
            });

            modelBuilder.Entity<InstalO>(entity =>
            {
                entity.HasKey(e => new { e.CodInstalacao, e.CodOs });

                entity.HasIndex(e => e.CodRat, "IX_INSTALOS")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.CodInstalacaoNavigation)
                    .WithMany(p => p.InstalOs)
                    .HasForeignKey(d => d.CodInstalacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InstalOS_Instalacao");

                entity.HasOne(d => d.CodRatNavigation)
                    .WithMany(p => p.InstalOs)
                    .HasForeignKey(d => d.CodRat)
                    .HasConstraintName("FK_InstalOS_RAT");

                entity.HasOne(d => d.CodUsuarioCadNavigation)
                    .WithMany(p => p.InstalOs)
                    .HasForeignKey(d => d.CodUsuarioCad)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InstalOS_UsuarioCad");
            });

            modelBuilder.Entity<InstalOb>(entity =>
            {
                entity.HasKey(e => e.CodInstalObs)
                    .HasName("PK__InstalObs__7CCF64C8");

                entity.HasIndex(e => new { e.CodInstalacao, e.IndAtivo }, "_dta_index_InstalObs_7_1070066998__K2_K7")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodInstalRefObs, e.IndAtivo, e.CodInstalacao, e.IndJustificativa }, "_dta_index_InstalObs_7_1070066998__K5_K7_K2_K6")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IndAtivo, e.CodInstalacao }, "_dta_index_InstalObs_7_1070066998__K7_K2")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IndAtivo, e.CodInstalacao, e.CodInstalRefObs, e.IndJustificativa }, "_dta_index_InstalObs_7_1070066998__K7_K2_K5_K6")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodInstalacao, "_dta_index_InstalObs_7_121155577__K2_5_6_7")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodInstalacao, e.IndAtivo, e.CodInstalRefObs, e.IndJustificativa }, "_dta_index_InstalObs_7_121155577__K2_K7_K5_K6")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodInstalObs).ValueGeneratedNever();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("((1))");

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.HasOne(d => d.CodInstalRefObsNavigation)
                    .WithMany(p => p.InstalObs)
                    .HasForeignKey(d => d.CodInstalRefObs)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__InstalObs__CodIn__210CC53E");

                entity.HasOne(d => d.CodInstalacaoNavigation)
                    .WithMany(p => p.InstalObs)
                    .HasForeignKey(d => d.CodInstalacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InstalObs_Instalacao");

                entity.HasOne(d => d.CodUsuarioCadNavigation)
                    .WithMany(p => p.InstalObCodUsuarioCadNavigations)
                    .HasForeignKey(d => d.CodUsuarioCad)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InstalObs_UsuarioCad");

                entity.HasOne(d => d.CodUsuarioManutNavigation)
                    .WithMany(p => p.InstalObCodUsuarioManutNavigations)
                    .HasForeignKey(d => d.CodUsuarioManut)
                    .HasConstraintName("FK_InstalObs_UsuarioManut");
            });

            modelBuilder.Entity<InstalOsArqMorto>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<InstalPagto>(entity =>
            {
                entity.HasKey(e => e.CodInstalPagto)
                    .HasName("PK__InstalPagto__02883E1E");

                entity.HasIndex(e => e.CodInstalPagto, "_dta_index_InstalPagto_7_10483116__K1_3")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodInstalPagto).ValueGeneratedNever();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ObsPagto).IsUnicode(false);

                entity.HasOne(d => d.CodContratoNavigation)
                    .WithMany(p => p.InstalPagtos)
                    .HasForeignKey(d => d.CodContrato)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__InstalPag__CodCo__24DD5622");

                entity.HasOne(d => d.CodUsuarioCadNavigation)
                    .WithMany(p => p.InstalPagtoCodUsuarioCadNavigations)
                    .HasForeignKey(d => d.CodUsuarioCad)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InstalPagto_UsuarioCad");

                entity.HasOne(d => d.CodUsuarioManutNavigation)
                    .WithMany(p => p.InstalPagtoCodUsuarioManutNavigations)
                    .HasForeignKey(d => d.CodUsuarioManut)
                    .HasConstraintName("FK_InstalPagto_UsuarioManut");
            });

            modelBuilder.Entity<InstalPagtoInstal>(entity =>
            {
                entity.HasKey(e => new { e.CodInstalacao, e.CodInstalPagto, e.CodInstalTipoParcela })
                    .HasName("PK__InstalPagtoInsta__0658CF02");

                entity.HasIndex(e => new { e.CodInstalacao, e.CodInstalTipoParcela }, "IX_InstalPagtoInstal")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodInstalTipoParcela, "_dta_index_InstalPagtoInstal_7_58483287__K3_1_2_4")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodInstalTipoParcela, e.CodInstalPagto, e.CodInstalacao }, "_dta_index_InstalPagtoInstal_7_58483287__K3_K2_K1_4")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodInstalTipoParcela, e.CodInstalacao, e.CodInstalPagto }, "_dta_index_InstalPagtoInstal_9_58483287__K3_K1_K2_4")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.Comentario).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.CodInstalMotivoMultaNavigation)
                    .WithMany(p => p.InstalPagtoInstals)
                    .HasForeignKey(d => d.CodInstalMotivoMulta)
                    .HasConstraintName("FK__InstalPag__CodIn__26C59E94");

                entity.HasOne(d => d.CodInstalPagtoNavigation)
                    .WithMany(p => p.InstalPagtoInstals)
                    .HasForeignKey(d => d.CodInstalPagto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__InstalPag__CodIn__28ADE706");

                entity.HasOne(d => d.CodInstalTipoParcelaNavigation)
                    .WithMany(p => p.InstalPagtoInstals)
                    .HasForeignKey(d => d.CodInstalTipoParcela)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__InstalPag__CodIn__25D17A5B");

                entity.HasOne(d => d.CodInstalacaoNavigation)
                    .WithMany(p => p.InstalPagtoInstals)
                    .HasForeignKey(d => d.CodInstalacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InstalPagtoInstal_Instalacao");
            });

            modelBuilder.Entity<InstalPleito>(entity =>
            {
                entity.HasKey(e => e.CodInstalPleito)
                    .HasName("PK__InstalPleito__0A295FE6");

                entity.Property(e => e.CodInstalPleito).ValueGeneratedNever();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DescPleito).IsUnicode(false);

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("(1)");

                entity.Property(e => e.NomePleito).IsUnicode(false);

                entity.HasOne(d => d.CodContratoNavigation)
                    .WithMany(p => p.InstalPleitos)
                    .HasForeignKey(d => d.CodContrato)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__InstalPle__CodCo__29A20B3F");

                entity.HasOne(d => d.CodInstalTipoPleitoNavigation)
                    .WithMany(p => p.InstalPleitos)
                    .HasForeignKey(d => d.CodInstalTipoPleito)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__InstalPle__CodIn__2A962F78");

                entity.HasOne(d => d.CodUsuarioCadNavigation)
                    .WithMany(p => p.InstalPleitoCodUsuarioCadNavigations)
                    .HasForeignKey(d => d.CodUsuarioCad)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InstalPleito_UsuarioCad");

                entity.HasOne(d => d.CodUsuarioManutNavigation)
                    .WithMany(p => p.InstalPleitoCodUsuarioManutNavigations)
                    .HasForeignKey(d => d.CodUsuarioManut)
                    .HasConstraintName("FK_InstalPleito_UsuarioManut");
            });

            modelBuilder.Entity<InstalPleitoInstal>(entity =>
            {
                entity.HasKey(e => new { e.CodInstalacao, e.CodInstalPleito })
                    .HasName("PK__InstalPleitoInst__0D05CC91");

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.CodInstalPleitoNavigation)
                    .WithMany(p => p.InstalPleitoInstals)
                    .HasForeignKey(d => d.CodInstalPleito)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__InstalPle__CodIn__2B8A53B1");

                entity.HasOne(d => d.CodInstalacaoNavigation)
                    .WithMany(p => p.InstalPleitoInstals)
                    .HasForeignKey(d => d.CodInstalacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InstalPleitoInstal_Instalacao");
            });

            modelBuilder.Entity<InstalPleitoOb>(entity =>
            {
                entity.HasKey(e => e.CodInstalPleitoObs)
                    .HasName("PK__InstalPleitoObs__10D65D75");

                entity.Property(e => e.CodInstalPleitoObs).ValueGeneratedNever();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("(1)");

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.HasOne(d => d.CodInstalPleitoNavigation)
                    .WithMany(p => p.InstalPleitoObs)
                    .HasForeignKey(d => d.CodInstalPleito)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__InstalPle__CodIn__2D729C23");
            });

            modelBuilder.Entity<InstalRefOb>(entity =>
            {
                entity.HasKey(e => e.CodInstalRefObs)
                    .HasName("PK__InstalRefObs__02333863");

                entity.Property(e => e.CodInstalRefObs).ValueGeneratedNever();

                entity.Property(e => e.NomeRefObs).IsUnicode(false);
            });

            modelBuilder.Entity<InstalRessalva>(entity =>
            {
                entity.HasKey(e => e.CodInstalRessalva)
                    .HasName("PK__InstalRessalva__159B1292");

                entity.HasIndex(e => e.CodInstalacao, "_dta_index_InstalRessalva_7_1338487847__K2_4_8_9")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodInstalacao, e.IndAtivo, e.CodInstalMotivoRes, e.IndJustificativa }, "_dta_index_InstalRessalva_7_1338487847__K2_K8_K4_K9")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IndAtivo, e.IndJustificativa, e.CodInstalacao, e.CodInstalMotivoRes }, "_dta_index_InstalRessalva_7_1338487847__K8_K9_K2_K4")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodInstalacao, e.IndAtivo, e.CodInstalMotivoRes }, "_dta_index_InstalRessalva_9_1338487847__K2_K8_K4")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IndAtivo, e.CodInstalacao, e.CodInstalMotivoRes }, "_dta_index_InstalRessalva_9_1338487847__K8_K2_K4")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodInstalRessalva).ValueGeneratedNever();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.Comentario).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("(1)");

                entity.HasOne(d => d.CodInstalMotivoResNavigation)
                    .WithMany(p => p.InstalRessalvas)
                    .HasForeignKey(d => d.CodInstalMotivoRes)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__InstalRes__CodIn__2E66C05C");

                entity.HasOne(d => d.CodInstalacaoNavigation)
                    .WithMany(p => p.InstalRessalvas)
                    .HasForeignKey(d => d.CodInstalacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InstalRessalva_Instalacao");
            });

            modelBuilder.Entity<InstalStatus>(entity =>
            {
                entity.HasKey(e => e.CodInstalStatus)
                    .HasName("PK__InstalStatus__71297349");

                entity.Property(e => e.CodInstalStatus).ValueGeneratedNever();

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("(1)");

                entity.Property(e => e.NomeInstalStatus).IsUnicode(false);
            });

            modelBuilder.Entity<InstalTipoParcela>(entity =>
            {
                entity.HasKey(e => e.CodInstalTipoParcela)
                    .HasName("PK__InstalTipoParcel__57D2EA43");

                entity.Property(e => e.CodInstalTipoParcela).ValueGeneratedNever();

                entity.Property(e => e.NomeTipoParcela).IsUnicode(false);
            });

            modelBuilder.Entity<InstalTipoPleito>(entity =>
            {
                entity.HasKey(e => e.CodInstalTipoPleito)
                    .HasName("PK__InstalTipoPleito__135DC465");

                entity.Property(e => e.CodInstalTipoPleito).ValueGeneratedNever();

                entity.Property(e => e.DescTipoPleito).IsUnicode(false);

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("(1)");

                entity.Property(e => e.IntroTipoPleito).IsUnicode(false);

                entity.Property(e => e.NomeTipoPleito).IsUnicode(false);
            });

            modelBuilder.Entity<Instalacao>(entity =>
            {
                entity.HasKey(e => e.CodInstalacao)
                    .HasName("PK__Instalacao__743A1EC7");

                entity.HasIndex(e => new { e.CodContrato, e.CodInstalacao, e.CodInstalLote, e.CodTipoEquip, e.CodGrupoEquip, e.CodEquip, e.CodRegiao, e.CodAutorizada, e.CodFilial, e.CodSla, e.CodEquipContrato, e.CodCliente, e.CodPosto, e.DataSugEntrega, e.DataConfEntrega, e.Nfremessa }, "IX_INSTALACAO_CODCONTRATO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodEquipContrato, e.CodCliente }, "IX_INSTALACAO_CODEQUIPC_CODCLI")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodUsuarioBlock, "IX_INSTAL_USUARIOBLOCK")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodCliente, e.CodContrato, e.CodInstalNfaut, e.CodEquipContrato, e.CodRat, e.CodOs, e.CodClienteEnt, e.CodPostoEnt, e.CodClienteIns, e.CodPostoIns, e.CodPosto, e.CodInstalacao, e.CodUsuarioBlock, e.CodInstalNfvenda, e.CodTipoEquip, e.CodGrupoEquip }, "_dta_index_Instalacao_7_1181351373__K12_K3_K48_K11_K31_K30_K20_K21_K32_K33_K13_K1_K52_K44_K4_K5_2_6_7_8_9_10_14_15_16_17_18_19_")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodCliente, e.CodContrato, e.CodTipoEquip, e.CodGrupoEquip, e.CodEquip, e.CodInstalacao, e.CodTransportadora, e.CodInstalNfaut, e.CodOs, e.CodClienteIns, e.CodPostoIns, e.CodClienteEnt, e.CodPostoEnt, e.CodPosto, e.CodEquipContrato, e.CodRegiao }, "_dta_index_Instalacao_7_1181351373__K12_K3_K4_K5_K6_K1_K19_K48_K30_K32_K33_K20_K21_K13_K11_K7_2_8_9_10_14_15_16_17_18_22_23_24_")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodInstalLote, e.CodOs, e.CodInstalacao, e.CodTransportadora, e.CodInstalNfaut, e.CodClienteIns, e.CodPostoIns, e.CodClienteEnt, e.CodPostoEnt, e.CodCliente, e.CodPosto, e.CodEquipContrato, e.CodRegiao, e.CodSla, e.CodAutorizada, e.CodFilial }, "_dta_index_Instalacao_7_1181351373__K2_K30_K1_K19_K48_K32_K33_K20_K21_K12_K13_K11_K7_K10_K8_K9_3_4_5_6_14_15_16_17_18_22_23_24_")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodTipoEquip, e.CodGrupoEquip, e.CodEquip, e.CodContrato, e.CodInstalLote, e.CodInstalNfvenda, e.CodInstalacao, e.CodUsuarioBlock, e.CodCliente, e.CodPosto, e.CodClienteIns, e.CodPostoIns, e.CodClienteEnt, e.CodPostoEnt, e.CodOs, e.CodRat }, "_dta_index_Instalacao_7_1477072498__K4_K5_K6_K3_K2_K50_K1_K58_K12_K13_K33_K34_K21_K22_K31_K32_7_8_9_10_11_14_15_17_18_19_20_23_")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodCliente, e.CodInstalacao, e.CodOs, e.CodGrupoEquip, e.CodTransportadora, e.CodInstalNfaut, e.CodClienteIns, e.CodPostoIns, e.CodPosto, e.CodRegiao, e.CodSla, e.CodAutorizada, e.CodFilial, e.CodInstalLote, e.CodContrato, e.CodTipoEquip }, "_dta_index_Instalacao_7_247112071__K12_K1_K31_K5_K20_K54_K33_K34_K13_K7_K10_K8_K9_K2_K3_K4_6_11_14_15_17_18_19_21_22_23_24_25_")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodCliente, e.CodContrato, e.CodInstalNfaut, e.CodEquipContrato, e.CodRat, e.CodOs, e.CodClienteEnt, e.CodPostoEnt, e.CodClienteIns, e.CodPostoIns, e.CodPosto, e.CodInstalacao, e.CodUsuarioBlock, e.CodInstalNfvenda, e.CodInstalLote, e.CodTipoEquip }, "_dta_index_Instalacao_7_247112071__K12_K3_K54_K11_K32_K31_K21_K22_K33_K34_K13_K1_K58_K50_K2_K4_5_6_7_8_9_10_14_15_17_18_19_20_")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodInstalacao, e.CodInstalStatus }, "_dta_index_Instalacao_7_247112071__K1_K57_2_3_4_5_6_12_19_23_35")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodOs, "_dta_index_Instalacao_7_247112071__K31_11")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodCliente, e.CodUsuarioBlock, e.CodInstalacao, e.CodTransportadora, e.CodRat, e.CodOs, e.CodInstalNfaut, e.CodClienteIns, e.CodPostoIns, e.CodClienteEnt, e.CodPostoEnt, e.CodEquipContrato, e.CodRegiao, e.CodSla, e.CodAutorizada, e.CodFilial }, "_dta_index_Instalacao_9_1078503121__K12_K58_K1_K20_K32_K31_K54_K33_K34_K21_K22_K11_K7_K10_K8_K9_2_3_4_5_6_13_14_15_17_18_19_23_")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodInstalacao).ValueGeneratedNever();

                entity.Property(e => e.AntigoNomeDependenciaRedestinacao)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AntigoPedidoCompraRedestinacao)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AntigoPrefixoRedestinacao)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AntigoProtocoloCdo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AntigoSbRedestinacao)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AntigoTipoDependenciaRedestinacao)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AntigoUfRedestinacao)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BemTradeIn).IsUnicode(false);

                entity.Property(e => e.CodInstalStatus).HasDefaultValueSql("((1))");

                entity.Property(e => e.CodUsuarioBlock).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.Csl).IsUnicode(false);

                entity.Property(e => e.Csoserv).IsUnicode(false);

                entity.Property(e => e.CteFrete1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CteFrete2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Ddd)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DtbCliente).IsUnicode(false);

                entity.Property(e => e.Fabricante).IsUnicode(false);

                entity.Property(e => e.FaturaFrete1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FaturaFrete2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FaturaTranspReEntrega).IsUnicode(false);

                entity.Property(e => e.FornecedorCompraTradeIn).IsUnicode(false);

                entity.Property(e => e.FornecedorTradeIn1).IsUnicode(false);

                entity.Property(e => e.FornecedorTradeIn2).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.Mst606tipoNovo).IsUnicode(false);

                entity.Property(e => e.Nfremessa).IsUnicode(false);

                entity.Property(e => e.NfremessaConferida).IsUnicode(false);

                entity.Property(e => e.NftradeIn1).IsUnicode(false);

                entity.Property(e => e.NftradeIn2).IsUnicode(false);

                entity.Property(e => e.NftransportadoraTradeIn).IsUnicode(false);

                entity.Property(e => e.NfvendaDel).IsUnicode(false);

                entity.Property(e => e.NfvendaTradeIn).IsUnicode(false);

                entity.Property(e => e.NomeReponsavelBancoAcompanhamento).IsUnicode(false);

                entity.Property(e => e.NomeRespBancoBi).IsUnicode(false);

                entity.Property(e => e.NomeRespBancoBt).IsUnicode(false);

                entity.Property(e => e.NomeTransportadora).IsUnicode(false);

                entity.Property(e => e.NovoProtocoloCdo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NumFaturaTransp).IsUnicode(false);

                entity.Property(e => e.NumMatriculaBi).IsUnicode(false);

                entity.Property(e => e.NumMatriculaBt).IsUnicode(false);

                entity.Property(e => e.NumMatriculaRespBancoAcompanhamento).IsUnicode(false);

                entity.Property(e => e.PedidoCompra).IsUnicode(false);

                entity.Property(e => e.Redestinacao)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ResponsavelRecebReEntrega).IsUnicode(false);

                entity.Property(e => e.Romaneio).IsUnicode(false);

                entity.Property(e => e.SuperE).IsUnicode(false);

                entity.Property(e => e.Supridora).IsUnicode(false);

                entity.Property(e => e.Telefone1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<InstalacaoImportacao>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Frustrado).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e.StatusDocumentos).IsUnicode(false);
            });

            modelBuilder.Entity<InstalacaoImportacaoLog>(entity =>
            {
                entity.Property(e => e.CodInstalacaoImportacaoLog).ValueGeneratedOnAdd();

                entity.Property(e => e.Msg).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);
            });

            modelBuilder.Entity<InstalacaoInfoBordero>(entity =>
            {
                entity.Property(e => e.CodUsuario).IsUnicode(false);
            });

            modelBuilder.Entity<IntegracaoBanrisul>(entity =>
            {
                entity.Property(e => e.NomeArquivo).IsUnicode(false);
            });

            modelBuilder.Entity<IntegracaoBb>(entity =>
            {
                entity.Property(e => e.Motivo).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);
            });

            modelBuilder.Entity<IntegracaoCaixa>(entity =>
            {
                entity.Property(e => e.Req).IsUnicode(false);

                entity.HasOne(d => d.CodOsNavigation)
                    .WithMany(p => p.IntegracaoCaixas)
                    .HasForeignKey(d => d.CodOs)
                    .HasConstraintName("FK_IntegracaoCaixa_OS");
            });

            modelBuilder.Entity<IntegracaoCaixaAlteracaoStatus>(entity =>
            {
                entity.HasOne(d => d.CodIntegracaoCaixaNavigation)
                    .WithMany(p => p.IntegracaoCaixaAlteracaoStatuses)
                    .HasForeignKey(d => d.CodIntegracaoCaixa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IntegracaoCaixaAlteracaoStatus_IntegracaoCaixa");
            });

            modelBuilder.Entity<IntegracaoCaixaArquivo>(entity =>
            {
                entity.HasOne(d => d.CodIntegracaoCaixaNavigation)
                    .WithMany(p => p.IntegracaoCaixaArquivos)
                    .HasForeignKey(d => d.CodIntegracaoCaixa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IntegracaoCaixaArquivo_IntegracaoCaixa");

                entity.HasOne(d => d.CodIntegracaoCaixaTipoArquivoNavigation)
                    .WithMany(p => p.IntegracaoCaixaArquivos)
                    .HasForeignKey(d => d.CodIntegracaoCaixaTipoArquivo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IntegracaoCaixaArquivo_IntegracaoCaixaTipoArquivo");
            });

            modelBuilder.Entity<IntegracaoCaixaTipoArquivo>(entity =>
            {
                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<IntegracaoChamado>(entity =>
            {
                entity.HasKey(e => e.CodIntegracaoChamado)
                    .HasName("PK_Integracao");
            });

            modelBuilder.Entity<IntegracaoCobra>(entity =>
            {
                entity.HasIndex(e => e.CodOs, "_dta_index_IntegracaoCobra_7_1952166150__K1_3")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodOs, e.DataHoraEnvio }, "_dta_index_IntegracaoCobra_7_1952166150__K1_K5_3")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NomeArquivo).IsUnicode(false);

                entity.Property(e => e.NomeTipoArquivoEnviado).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);
            });

            modelBuilder.Entity<IntegracaoEmail>(entity =>
            {
                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.Conteudo).IsUnicode(false);
            });

            modelBuilder.Entity<IntegracaoEnvioEmail>(entity =>
            {
                entity.Property(e => e.Assunto).IsUnicode(false);

                entity.Property(e => e.Destinatario).IsUnicode(false);

                entity.Property(e => e.Remetente).IsUnicode(false);
            });

            modelBuilder.Entity<IntencaoCheckin>(entity =>
            {
                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<ItemDefeito>(entity =>
            {
                entity.HasKey(e => e.CodItemDefeito)
                    .HasName("PK__ItemDefe__32E68B331F023974");

                entity.Property(e => e.CodTecnico).IsUnicode(false);
            });

            modelBuilder.Entity<ItemReparoRede>(entity =>
            {
                entity.Property(e => e.CodItemReparoRede).ValueGeneratedNever();

                entity.Property(e => e.CodPertoItem).IsUnicode(false);

                entity.Property(e => e.NomeItemReparoRede).IsUnicode(false);
            });

            modelBuilder.Entity<ItemSolucao>(entity =>
            {
                entity.HasKey(e => e.CodItemSolucao)
                    .HasName("PK__ItemSolu__BE01C0BC84EC9D91");

                entity.Property(e => e.CodTecnico).IsUnicode(false);
            });

            modelBuilder.Entity<ItemXorcheckList>(entity =>
            {
                entity.HasKey(e => e.CodItemChecklist)
                    .HasName("PK__ItemXORC__756B837B05A97B38");

                entity.Property(e => e.Nivel).IsUnicode(false);
            });

            modelBuilder.Entity<ItensPendente>(entity =>
            {
                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);
            });

            modelBuilder.Entity<KitPadrao>(entity =>
            {
                entity.Property(e => e.CodKitPadrao).ValueGeneratedOnAdd();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.NomeKitPadrao).IsUnicode(false);
            });

            modelBuilder.Entity<KitPadraoPeca>(entity =>
            {
                entity.Property(e => e.CodKitPadraoPeca).ValueGeneratedOnAdd();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.Qtd).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<KitpadraoTecnico>(entity =>
            {
                entity.Property(e => e.CodKitpadraoTecnico).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<LaboratorioPo>(entity =>
            {
                entity.HasIndex(e => e.CodStatusLaboratorioPos, "IX_LaboratorioPOS_Status")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodUsuario, "IX_LaboratorioPOS_Usuario")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.Destino).IsUnicode(false);

                entity.Property(e => e.Erro).IsUnicode(false);

                entity.Property(e => e.NumeroDocumento).IsUnicode(false);

                entity.HasOne(d => d.CodStatusLaboratorioPosNavigation)
                    .WithMany(p => p.LaboratorioPos)
                    .HasForeignKey(d => d.CodStatusLaboratorioPos)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPOS_StatusLaboratorioPOS");

                entity.HasOne(d => d.CodUsuarioNavigation)
                    .WithMany(p => p.LaboratorioPos)
                    .HasForeignKey(d => d.CodUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPOS_Usuario");
            });

            modelBuilder.Entity<LaboratorioPositem>(entity =>
            {
                entity.HasIndex(e => e.CodLaboratorioPos, "IX_LaboratorioPOSItem_LaboratoriPOS")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodProduto, "IX_LaboratorioPOSItem_Produto")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodStatusLaboratorioPositem, "IX_LaboratorioPOSItem_Status")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Erro).IsUnicode(false);

                entity.Property(e => e.NumeroLogico).IsUnicode(false);

                entity.Property(e => e.TipoReparo).IsUnicode(false);

                entity.HasOne(d => d.CodLaboratorioPosNavigation)
                    .WithMany(p => p.LaboratorioPositems)
                    .HasForeignKey(d => d.CodLaboratorioPos)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPOSItem_LaboratorioPOS");

                entity.HasOne(d => d.CodProdutoNavigation)
                    .WithMany(p => p.LaboratorioPositems)
                    .HasForeignKey(d => d.CodProduto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPOSItem_Produto");

                entity.HasOne(d => d.CodStatusLaboratorioPositemNavigation)
                    .WithMany(p => p.LaboratorioPositems)
                    .HasForeignKey(d => d.CodStatusLaboratorioPositem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPOSItem_StatusLaboratorioPOSItem");
            });

            modelBuilder.Entity<LaboratorioPosreparo>(entity =>
            {
                entity.HasIndex(e => e.CodItemReparoRede, "IX_LaboratorioPOSReparo_ItemReparo")
                    .HasFillFactor((byte)90);

                entity.HasOne(d => d.CodItemReparoRedeNavigation)
                    .WithMany(p => p.LaboratorioPosreparos)
                    .HasForeignKey(d => d.CodItemReparoRede)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPOSReparo_ItemReparoRede");

                entity.HasOne(d => d.CodLaboratorioPositemNavigation)
                    .WithMany(p => p.LaboratorioPosreparos)
                    .HasForeignKey(d => d.CodLaboratorioPositem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPOSReparo_LaboratorioPOSItem");
            });

            modelBuilder.Entity<Laudo>(entity =>
            {
                entity.Property(e => e.CodLaudoStatus).HasDefaultValueSql("((1))");

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.Conclusao).IsUnicode(false);

                entity.Property(e => e.Justificativa).IsUnicode(false);

                entity.Property(e => e.MatriculaCliente).IsUnicode(false);

                entity.Property(e => e.NomeCliente).IsUnicode(false);

                entity.Property(e => e.RelatoCliente).IsUnicode(false);

                entity.Property(e => e.Temperatura).IsUnicode(false);

                entity.Property(e => e.TensaoComCarga).IsUnicode(false);

                entity.Property(e => e.TensaoSemCarga).IsUnicode(false);

                entity.Property(e => e.TensaoTerraEneutro).IsUnicode(false);
            });

            modelBuilder.Entity<LaudoSituacao>(entity =>
            {
                entity.Property(e => e.Acao).IsUnicode(false);

                entity.Property(e => e.Causa).IsUnicode(false);
            });

            modelBuilder.Entity<LaudoStatus>(entity =>
            {
                entity.Property(e => e.NomeStatus).IsUnicode(false);
            });

            modelBuilder.Entity<Layout>(entity =>
            {
                entity.Property(e => e.NomeLayout).IsUnicode(false);
            });

            modelBuilder.Entity<LayoutCampo>(entity =>
            {
                entity.HasIndex(e => e.CodLayout, "IX_LayoutCampo_CodLayout")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NomeColuna).IsUnicode(false);

                entity.Property(e => e.NomeLayoutCampo).IsUnicode(false);

                entity.HasOne(d => d.CodLayoutNavigation)
                    .WithMany(p => p.LayoutCampos)
                    .HasForeignKey(d => d.CodLayout)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LayoutCampo_Layout");
            });

            modelBuilder.Entity<LiderTecnico>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioLider).IsUnicode(false);
            });

            modelBuilder.Entity<Lingua>(entity =>
            {
                entity.HasKey(e => e.CodLingua)
                    .HasName("PK__Lingua__371C01EE");

                entity.Property(e => e.CodLingua).ValueGeneratedNever();

                entity.Property(e => e.Cultura).IsUnicode(false);

                entity.Property(e => e.NomeLingua).IsUnicode(false);
            });

            modelBuilder.Entity<LoBkpTecnico>(entity =>
            {
                entity.Property(e => e.Coditem).IsUnicode(false);

                entity.Property(e => e.Numnf).IsUnicode(false);
            });

            modelBuilder.Entity<LoEstoque>(entity =>
            {
                entity.Property(e => e.CodEmpresa).IsUnicode(false);

                entity.Property(e => e.CodItem).IsUnicode(false);

                entity.Property(e => e.DatUltEntrada).IsUnicode(false);

                entity.Property(e => e.DatUltInvent).IsUnicode(false);

                entity.Property(e => e.DatUltSaida).IsUnicode(false);
            });

            modelBuilder.Entity<LoEstoqueLote>(entity =>
            {
                entity.Property(e => e.CodEmpresa).IsUnicode(false);

                entity.Property(e => e.CodItem).IsUnicode(false);

                entity.Property(e => e.CodLocal).IsUnicode(false);

                entity.Property(e => e.IesSituaQtd).IsUnicode(false);

                entity.Property(e => e.NumLote).IsUnicode(false);
            });

            modelBuilder.Entity<LoEstoqueLoteEnder>(entity =>
            {
                entity.Property(e => e.CodEmpresa).IsUnicode(false);

                entity.Property(e => e.CodGrade1).IsUnicode(false);

                entity.Property(e => e.CodGrade2).IsUnicode(false);

                entity.Property(e => e.CodGrade3).IsUnicode(false);

                entity.Property(e => e.CodGrade4).IsUnicode(false);

                entity.Property(e => e.CodGrade5).IsUnicode(false);

                entity.Property(e => e.CodItem).IsUnicode(false);

                entity.Property(e => e.CodLocal).IsUnicode(false);

                entity.Property(e => e.DatHorProducao).IsUnicode(false);

                entity.Property(e => e.DatHorReserv1).IsUnicode(false);

                entity.Property(e => e.DatHorReserv2).IsUnicode(false);

                entity.Property(e => e.DatHorReserv3).IsUnicode(false);

                entity.Property(e => e.DatHorValidade).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.IesOrigemEntrada).IsUnicode(false);

                entity.Property(e => e.IesSituaQtd).IsUnicode(false);

                entity.Property(e => e.NumLote).IsUnicode(false);

                entity.Property(e => e.NumPeca).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.TexReservado).IsUnicode(false);
            });

            modelBuilder.Entity<LoEstrutura>(entity =>
            {
                entity.Property(e => e.CodCentCust).IsUnicode(false);

                entity.Property(e => e.CodCompCusto).IsUnicode(false);

                entity.Property(e => e.CodEmpresa).IsUnicode(false);

                entity.Property(e => e.CodItemCompon).IsUnicode(false);

                entity.Property(e => e.CodItemPai).IsUnicode(false);

                entity.Property(e => e.DatValidadeFim).IsUnicode(false);

                entity.Property(e => e.DatValidadeIni).IsUnicode(false);

                entity.Property(e => e.Parametros).IsUnicode(false);
            });

            modelBuilder.Entity<LoItemEmTerc>(entity =>
            {
                entity.HasIndex(e => new { e.CodItem, e.CodEmpresa, e.NumNf, e.DatEmisNf }, "_dta_index_LoItemEmTerc_7_1880549933__K9_K1_K2_K4_15")
                    .HasFillFactor((byte)90);
            });

            modelBuilder.Entity<LoLocal>(entity =>
            {
                entity.Property(e => e.CodEmpresa).IsUnicode(false);

                entity.Property(e => e.CodLocal).IsUnicode(false);

                entity.Property(e => e.DenLocal).IsUnicode(false);

                entity.Property(e => e.NumNivel).IsUnicode(false);
            });

            modelBuilder.Entity<LocaisSlabanrisul>(entity =>
            {
                entity.Property(e => e.CodLocaisBanrisul).ValueGeneratedOnAdd();

                entity.Property(e => e.Fim).IsUnicode(false);

                entity.Property(e => e.Inicio).IsUnicode(false);
            });

            modelBuilder.Entity<LocalAtendimento>(entity =>
            {
                entity.HasKey(e => new { e.CodCliente, e.CodPosto })
                    .HasName("PK__LocalAtendimento__51BA1E3A");

                entity.HasIndex(e => e.CodCidade, "IX_LOCALATENDIMENTO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodPosto, e.CodCliente }, "IX_LOCALATENDIMENTO_POSTO_CLI")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodCliente, e.NumAgencia }, "IX_LOCAL_ATENDIMENTO_CODCLINUMAGENC")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.NumAgencia, e.Dcposto, e.IndAtivo }, "IX_LocalAtendimento_NumAgencia_DCPosto_IndAtivo")
                    .HasFilter("([IndAtivo]=(1))")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodCliente, e.CodPosto, e.CodCidade }, "_dta_index_LocalAtendimento_9_152543777__K2_K1_K13_3_4_10_12_16")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodPosto, e.CodCidade }, "ix_localatendimento_posto_cidade")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.BairroCoordenadas).IsUnicode(false);

                entity.Property(e => e.BairroEntregaDel)
                    .IsUnicode(false)
                    .HasComment("deletar campo");

                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.CepentregaDel)
                    .IsUnicode(false)
                    .HasComment("deletar campo");

                entity.Property(e => e.Cidade)
                    .IsUnicode(false)
                    .HasComment("deletar campo");

                entity.Property(e => e.CidadeCoordenadas).IsUnicode(false);

                entity.Property(e => e.CidadeEntregaDel)
                    .IsUnicode(false)
                    .HasComment("deletar campo");

                entity.Property(e => e.Cnpj).IsUnicode(false);

                entity.Property(e => e.Cnpjfaturamento).IsUnicode(false);

                entity.Property(e => e.CodAutorizada).HasComment("deletar campo");

                entity.Property(e => e.CodFilial).HasComment("deletar campo");

                entity.Property(e => e.CodRegiao).HasComment("deletar campo");

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCadastroDel).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManutencaoDel).IsUnicode(false);

                entity.Property(e => e.ComplemEndDel).IsUnicode(false);

                entity.Property(e => e.ComplemEndEntregaDel)
                    .IsUnicode(false)
                    .HasComment("deletar campo");

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.DcpostoClienteDel).IsUnicode(false);

                entity.Property(e => e.DescTurno).IsUnicode(false);

                entity.Property(e => e.DistanciaKmPatRes).HasComment("atualizar via webraska");

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.EnderecoComplemento).IsUnicode(false);

                entity.Property(e => e.EnderecoCoordenadas).IsUnicode(false);

                entity.Property(e => e.EnderecoEntregaDel)
                    .IsUnicode(false)
                    .HasComment("deletar campo");

                entity.Property(e => e.Fax).IsUnicode(false);

                entity.Property(e => e.FaxEntregaDel)
                    .IsUnicode(false)
                    .HasComment("deletar campo");

                entity.Property(e => e.Fone).IsUnicode(false);

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("((1))");

                entity.Property(e => e.InscricaoEstadual).IsUnicode(false);

                entity.Property(e => e.Latitude).IsUnicode(false);

                entity.Property(e => e.Longitude)
                    .IsUnicode(false)
                    .HasComment("");

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NumAgencia)
                    .IsUnicode(false)
                    .HasComment("");

                entity.Property(e => e.NumAgencia2Del).IsUnicode(false);

                entity.Property(e => e.NumAgenciaClienteDel).IsUnicode(false);

                entity.Property(e => e.NumeroEnd).IsUnicode(false);

                entity.Property(e => e.NumeroEndEntregaDel)
                    .IsUnicode(false)
                    .HasComment("deletar campo");

                entity.Property(e => e.ObsClienteDel).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.OrigemDel)
                    .IsUnicode(false)
                    .HasComment("deletar campo");

                entity.Property(e => e.PaisCoordenadas).IsUnicode(false);

                entity.Property(e => e.SenhaAcessoNotaFiscal).IsUnicode(false);

                entity.Property(e => e.SiglaUf)
                    .IsUnicode(false)
                    .HasComment("deletar campo");

                entity.Property(e => e.SiglaUfentregaDel)
                    .IsUnicode(false)
                    .HasComment("deletar campo");

                entity.Property(e => e.Site).IsUnicode(false);

                entity.Property(e => e.Telefone1Del).IsUnicode(false);

                entity.Property(e => e.Telefone2Del).IsUnicode(false);

                entity.Property(e => e.TelefoneEntregaDel)
                    .IsUnicode(false)
                    .HasComment("deletar campo");

                entity.Property(e => e.Ufcoordenadas).IsUnicode(false);
            });

            modelBuilder.Entity<LocalAtendimentoAnalisador>(entity =>
            {
                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.Latitude).IsUnicode(false);

                entity.Property(e => e.Longitude).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<LocalAtendimentoAnalisadorBairro>(entity =>
            {
                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.Latitude).IsUnicode(false);

                entity.Property(e => e.Longitude).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<LocalAtendimentoAnalisadorCentro>(entity =>
            {
                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.Latitude).IsUnicode(false);

                entity.Property(e => e.Longitude).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<LocalAtendimentoAnalisadorCoordenada>(entity =>
            {
                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.Latitude).IsUnicode(false);

                entity.Property(e => e.Longitude).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<LocalAtendimentoFui>(entity =>
            {
                entity.Property(e => e.Ag).IsUnicode(false);

                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.Cep3).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Cli).IsUnicode(false);

                entity.Property(e => e.Cod).IsUnicode(false);

                entity.Property(e => e.Dc).IsUnicode(false);

                entity.Property(e => e.Distrito).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.Loc).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.Reg).IsUnicode(false);

                entity.Property(e => e.Setor).IsUnicode(false);

                entity.Property(e => e.Tecnico).IsUnicode(false);

                entity.Property(e => e.TipoEndereco).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);

                entity.Property(e => e.UsuarioTecnicoFui).IsUnicode(false);

                entity.Property(e => e.X).IsUnicode(false);

                entity.Property(e => e.Y).IsUnicode(false);

                entity.Property(e => e.ZUrb).IsUnicode(false);
            });

            modelBuilder.Entity<LocalEnvioNffaturamento>(entity =>
            {
                entity.HasIndex(e => new { e.CodCliente, e.CodContrato }, "IX_LOCENVIONFFATCODCLICODCONT")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BairroEnvioNf).IsUnicode(false);

                entity.Property(e => e.BairroFaturamento).IsUnicode(false);

                entity.Property(e => e.CepenvioNf).IsUnicode(false);

                entity.Property(e => e.Cepfaturamento).IsUnicode(false);

                entity.Property(e => e.CnpjenvioNf).IsUnicode(false);

                entity.Property(e => e.Cnpjfaturamento).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.ComplementoEnvioNf).IsUnicode(false);

                entity.Property(e => e.ComplementoFaturamento).IsUnicode(false);

                entity.Property(e => e.EmailEnvioNf).IsUnicode(false);

                entity.Property(e => e.EmailFaturamento).IsUnicode(false);

                entity.Property(e => e.EnderecoEnvioNf).IsUnicode(false);

                entity.Property(e => e.EnderecoFaturamento).IsUnicode(false);

                entity.Property(e => e.FaxEnvioNf).IsUnicode(false);

                entity.Property(e => e.FaxFaturamento).IsUnicode(false);

                entity.Property(e => e.FoneEnvioNf).IsUnicode(false);

                entity.Property(e => e.FoneFaturamento).IsUnicode(false);

                entity.Property(e => e.InscricaoEstadualEnvioNf).IsUnicode(false);

                entity.Property(e => e.InscricaoEstadualFaturamento).IsUnicode(false);

                entity.Property(e => e.NumeroEnvioNf).IsUnicode(false);

                entity.Property(e => e.NumeroFaturamento).IsUnicode(false);

                entity.Property(e => e.RazaoSocialEnvioNf).IsUnicode(false);

                entity.Property(e => e.RazaoSocialFaturamento).IsUnicode(false);

                entity.Property(e => e.ResponsavelEnvioNf).IsUnicode(false);

                entity.Property(e => e.ResponsavelFaturamento).IsUnicode(false);

                entity.HasOne(d => d.CodCidadeEnvioNfNavigation)
                    .WithMany(p => p.LocalEnvioNffaturamentoCodCidadeEnvioNfNavigations)
                    .HasForeignKey(d => d.CodCidadeEnvioNf)
                    .HasConstraintName("FK_LocalEnvioNFFaturamento_Cidade1");

                entity.HasOne(d => d.CodCidadeFaturamentoNavigation)
                    .WithMany(p => p.LocalEnvioNffaturamentoCodCidadeFaturamentoNavigations)
                    .HasForeignKey(d => d.CodCidadeFaturamento)
                    .HasConstraintName("FK_LocalEnvioNFFaturamento_Cidade");

                entity.HasOne(d => d.CodClienteNavigation)
                    .WithMany(p => p.LocalEnvioNffaturamentos)
                    .HasForeignKey(d => d.CodCliente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocalEnvioNFFaturamento_Cliente");

                entity.HasOne(d => d.CodContratoNavigation)
                    .WithMany(p => p.LocalEnvioNffaturamentos)
                    .HasForeignKey(d => d.CodContrato)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocalEnvioNFFaturamento_Contrato");

                entity.HasOne(d => d.CodUfenvioNfNavigation)
                    .WithMany(p => p.LocalEnvioNffaturamentoCodUfenvioNfNavigations)
                    .HasForeignKey(d => d.CodUfenvioNf)
                    .HasConstraintName("FK_LocalEnvioNFFaturamento_UF1");

                entity.HasOne(d => d.CodUffaturamentoNavigation)
                    .WithMany(p => p.LocalEnvioNffaturamentoCodUffaturamentoNavigations)
                    .HasForeignKey(d => d.CodUffaturamento)
                    .HasConstraintName("FK_LocalEnvioNFFaturamento_UF");
            });

            modelBuilder.Entity<LocalEnvioNffaturamentoVinculado>(entity =>
            {
                entity.HasKey(e => new { e.CodLocalEnvioNffaturamento, e.CodPosto, e.CodContrato })
                    .HasName("PK_LocalEnvioNFFaturamentoVinculado_1");

                entity.HasIndex(e => e.CodPosto, "IX_LOCALENVNFFATVIN")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.HasOne(d => d.CodContratoNavigation)
                    .WithMany(p => p.LocalEnvioNffaturamentoVinculados)
                    .HasForeignKey(d => d.CodContrato)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocalEnvioNFFaturamentoVinculado_Contrato");

                entity.HasOne(d => d.CodLocalEnvioNffaturamentoNavigation)
                    .WithMany(p => p.LocalEnvioNffaturamentoVinculados)
                    .HasForeignKey(d => d.CodLocalEnvioNffaturamento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocalEnvioNFFaturamentoVinculado_LocalEnvioNFFaturamento");
            });

            modelBuilder.Entity<Localizacao>(entity =>
            {
                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Latitude).IsUnicode(false);

                entity.Property(e => e.Longitude).IsUnicode(false);
            });

            modelBuilder.Entity<LocalizacaoConf>(entity =>
            {
                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.Filiais).IsUnicode(false);

                entity.Property(e => e.Zoom).HasDefaultValueSql("((8))");
            });

            modelBuilder.Entity<LogAgendaTecnico>(entity =>
            {
                entity.Property(e => e.CodLogAgendaTecnico).ValueGeneratedOnAdd();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);
            });

            modelBuilder.Entity<LogAlertum>(entity =>
            {
                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Disco).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.Mensagem).IsUnicode(false);

                entity.Property(e => e.Servidor).IsUnicode(false);

                entity.Property(e => e.Tipo).IsUnicode(false);
            });

            modelBuilder.Entity<LogCubeProcess>(entity =>
            {
                entity.HasKey(e => e.Data)
                    .HasName("pk_log_cube_process");

                entity.HasIndex(e => e.Sucesso, "in_log_cube_process_sucesso")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Obs).IsUnicode(false);
            });

            modelBuilder.Entity<LogEnvioReport>(entity =>
            {
                entity.HasIndex(e => e.DataHoraCad, "IDX_LOGENVIOREPORTS_DATAHORACAD")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodLogServico, "IX_CODLOGSERVICO")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Descricao).IsUnicode(false);

                entity.Property(e => e.Emails).IsUnicode(false);

                entity.Property(e => e.NomeRelatorio).IsUnicode(false);

                entity.Property(e => e.UltimoStatus).IsUnicode(false);
            });

            modelBuilder.Entity<LogFechamentoBanrisul>(entity =>
            {
                entity.HasKey(e => e.CodLogFechamentoBanrisul)
                    .HasName("PK_Table_1");

                entity.Property(e => e.DataHoraFechamento).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.StatusFechamento).IsUnicode(false);
            });

            modelBuilder.Entity<LogGp>(entity =>
            {
                entity.HasKey(e => e.CodLog)
                    .HasName("PK__LogGps__6425493D");

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DescricaoLog).IsUnicode(false);

                entity.Property(e => e.SimCardMobile).IsUnicode(false);
            });

            modelBuilder.Entity<LogIntegracaoBanrisulAtm>(entity =>
            {
                entity.Property(e => e.CodLogIntegracaoBanrisulAtm).ValueGeneratedOnAdd();

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Descricao).IsUnicode(false);

                entity.Property(e => e.NumeroIncidente).IsUnicode(false);
            });

            modelBuilder.Entity<LogIntegracaoBb>(entity =>
            {
                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Descricao).IsUnicode(false);

                entity.Property(e => e.NomeArquivo).IsUnicode(false);

                entity.Property(e => e.Operacao).IsUnicode(false);
            });

            modelBuilder.Entity<LogIntegracaoBrb>(entity =>
            {
                entity.HasIndex(e => e.DataHoraCad, "IDX_LOGINTEGRACAOBRB_DATAHORACAD")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodLogIntegracaoBrb).ValueGeneratedOnAdd();

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<LogIntegracaoCaixa>(entity =>
            {
                entity.Property(e => e.CodLogIntegracaoCaixa).ValueGeneratedOnAdd();

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Descricao).IsUnicode(false);

                entity.Property(e => e.NumeroIncidente).IsUnicode(false);
            });

            modelBuilder.Entity<LogIntegracaoCobra>(entity =>
            {
                entity.Property(e => e.CodLogIntegracaoCobra).ValueGeneratedOnAdd();

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Descricao).IsUnicode(false);

                entity.Property(e => e.NumeroIncidente).IsUnicode(false);
            });

            modelBuilder.Entity<LogIntegracaoLogixDespesa>(entity =>
            {
                entity.HasKey(e => e.CodIntegracaoLogixDespesa)
                    .HasName("PK_IntegracaoLogixDespesa");

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<LogIntegracaoMetroSp>(entity =>
            {
                entity.Property(e => e.CodLogIntegracaoMetroSp).ValueGeneratedOnAdd();

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<LogIntegracaoSicredi>(entity =>
            {
                entity.Property(e => e.CodLogIntegracaoSicredi).ValueGeneratedOnAdd();

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Descricao).IsUnicode(false);

                entity.Property(e => e.NumeroIncidente).IsUnicode(false);
            });

            modelBuilder.Entity<LogIntegracaoZaffari>(entity =>
            {
                entity.Property(e => e.CodLogIntegracaoZaffari).ValueGeneratedOnAdd();

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Descricao).IsUnicode(false);

                entity.Property(e => e.NumeroIncidente).IsUnicode(false);
            });

            modelBuilder.Entity<LogServico>(entity =>
            {
                entity.HasIndex(e => e.DataHoraExcucaoInicio, "IDX_LOGSERVICO_DATAHORAEXECUCAOINICIO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Observacao, "in_logservico_obs")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NomeServico, "ix_logservico_nomeservico")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DataHoraExcucaoInicio).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DetalhamentoOservacao).IsUnicode(false);

                entity.Property(e => e.IndEncerramentoSucesso).HasDefaultValueSql("((2))");

                entity.Property(e => e.NomeServico).IsUnicode(false);

                entity.Property(e => e.NomeServidor).IsUnicode(false);

                entity.Property(e => e.Observacao)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Não Concluído')");
            });

            modelBuilder.Entity<Logerro>(entity =>
            {
                entity.HasIndex(e => e.DataHoraErro, "IDX_LOGERROS_DATAHORAERRO")
                    .HasFillFactor((byte)90);
            });

            modelBuilder.Entity<LogixEstoque>(entity =>
            {
                entity.HasKey(e => new { e.CodLogixEstoque, e.CodEmpresa });

                entity.Property(e => e.CodLogixEstoque).ValueGeneratedOnAdd();

                entity.Property(e => e.CodItem).IsUnicode(false);

                entity.Property(e => e.DatUltEntrada).IsUnicode(false);

                entity.Property(e => e.DatUltInvent).IsUnicode(false);

                entity.Property(e => e.DatUltSaida).IsUnicode(false);

                entity.Property(e => e.DataHoraCadastro).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<Mensagem>(entity =>
            {
                entity.HasKey(e => e.CodMensagem)
                    .HasName("PK__Mensagem__5966F851");

                entity.Property(e => e.CodMensagem).ValueGeneratedNever();

                entity.Property(e => e.Assunto).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("(1)");
            });

            modelBuilder.Entity<MensagemAutomatica>(entity =>
            {
                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("((1))");

                entity.Property(e => e.MediaAtendimentosDia).HasDefaultValueSql("((0))");

                entity.Property(e => e.Pendencia).HasDefaultValueSql("((0))");

                entity.Property(e => e.Reincidencia).HasDefaultValueSql("((0))");

                entity.Property(e => e.Sla).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<MensagemTecnico>(entity =>
            {
                entity.Property(e => e.Assunto).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioDestinatario).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("((1))");

                entity.Property(e => e.IndLeitura).HasDefaultValueSql("((0))");

                entity.Property(e => e.Mensagem).IsUnicode(false);
            });

            modelBuilder.Entity<MensagemUsuario>(entity =>
            {
                entity.HasKey(e => new { e.CodUsuario, e.CodMensagem })
                    .HasName("PK__MensagemUsuario__5B4F40C3");

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("(1)");

                entity.HasOne(d => d.CodMensagemNavigation)
                    .WithMany(p => p.MensagemUsuarios)
                    .HasForeignKey(d => d.CodMensagem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__MensagemU__CodMe__5C4364FC");

                entity.HasOne(d => d.CodUsuarioNavigation)
                    .WithMany(p => p.MensagemUsuarios)
                    .HasForeignKey(d => d.CodUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MensagemUsuario_Usuario");
            });

            modelBuilder.Entity<Menu>(entity =>
            {
                entity.HasIndex(e => e.CodMenu, "XIE1Menu")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodMenu).ValueGeneratedNever();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Funcao).IsUnicode(false);

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("((1))");

                entity.Property(e => e.IndSmartCard).HasDefaultValueSql("((1))");

                entity.Property(e => e.NomeMenu).IsUnicode(false);

                entity.HasOne(d => d.CodSistemaNavigation)
                    .WithMany(p => p.Menus)
                    .HasForeignKey(d => d.CodSistema)
                    .HasConstraintName("FK__Menu__CodSistema__3B40CD36");
            });

            modelBuilder.Entity<MenuPo>(entity =>
            {
                entity.Property(e => e.Action).IsUnicode(false);

                entity.Property(e => e.Controller).IsUnicode(false);

                entity.Property(e => e.Icon).IsUnicode(false);

                entity.Property(e => e.NomeMenu).IsUnicode(false);

                entity.Property(e => e.Url).IsUnicode(false);

                entity.HasOne(d => d.CodMenuPaiNavigation)
                    .WithMany(p => p.InverseCodMenuPaiNavigation)
                    .HasForeignKey(d => d.CodMenuPai)
                    .HasConstraintName("FK_MenuPOS_MenuPOS");
            });

            modelBuilder.Entity<MobileAviso>(entity =>
            {
                entity.Property(e => e.Descricao).IsUnicode(false);

                entity.Property(e => e.Metodo).IsUnicode(false);

                entity.Property(e => e.Projeto).IsUnicode(false);
            });

            modelBuilder.Entity<MobileVersao>(entity =>
            {
                entity.Property(e => e.HostName).IsUnicode(false);

                entity.Property(e => e.LocalPath).IsUnicode(false);

                entity.Property(e => e.Password).IsUnicode(false);

                entity.Property(e => e.Protocol).IsUnicode(false);

                entity.Property(e => e.RemoteFile).IsUnicode(false);

                entity.Property(e => e.RemotePath).IsUnicode(false);

                entity.Property(e => e.TipoAplicacao).IsUnicode(false);

                entity.Property(e => e.UserName).IsUnicode(false);

                entity.Property(e => e.Version).IsUnicode(false);
            });

            modelBuilder.Entity<ModalidadeObsFaturamento>(entity =>
            {
                entity.HasKey(e => e.CodModalidadeObsFaturamento)
                    .HasName("PK__Modalida__16E8069842893B4D");

                entity.Property(e => e.DescModalidade).IsUnicode(false);
            });

            modelBuilder.Entity<ModeloArquivo>(entity =>
            {
                entity.HasKey(e => e.CodModeloArquivo)
                    .HasName("PK_Modelo");

                entity.Property(e => e.CodModeloArquivo).ValueGeneratedOnAdd();

                entity.Property(e => e.DescModeloArquivo).IsUnicode(false);

                entity.Property(e => e.NomeManual).IsUnicode(false);

                entity.Property(e => e.NomeModeloArquivo).IsUnicode(false);
            });

            modelBuilder.Entity<Moedum>(entity =>
            {
                entity.HasKey(e => e.CodMoeda)
                    .HasName("PK__Moeda__1EB046D7");

                entity.Property(e => e.CodMoeda).ValueGeneratedNever();

                entity.Property(e => e.NomeMoeda).IsUnicode(false);

                entity.Property(e => e.SiglaMoeda).IsUnicode(false);
            });

            modelBuilder.Entity<MotivoAgendamento>(entity =>
            {
                entity.HasKey(e => e.CodMotivo)
                    .HasName("PK__MotivoAgendament__5535A963");

                entity.Property(e => e.CodMotivo).ValueGeneratedNever();

                entity.Property(e => e.DescricaoMotivo).IsUnicode(false);

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<MotivoBaixaNaoRealizadum>(entity =>
            {
                entity.HasIndex(e => e.MotivoBaixaNaoRealizada, "UK_MotivoBaixaNaoRealizada")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.MotivoBaixaNaoRealizada).IsUnicode(false);
            });

            modelBuilder.Entity<MotivoCancelamento>(entity =>
            {
                entity.HasIndex(e => e.MotivoCancelamento1, "UK_MotivoCancelamento")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.MotivoCancelamento1).IsUnicode(false);
            });

            modelBuilder.Entity<MotivoCancelamentoBanrisul>(entity =>
            {
                entity.Property(e => e.NomeMotivo).IsUnicode(false);

                entity.Property(e => e.SiglaMotivo).IsUnicode(false);
            });

            modelBuilder.Entity<MotivoCancelamentoDePara>(entity =>
            {
                entity.HasIndex(e => e.CodMotivoCancelamento, "IX_MotivoCancelamentoDePara")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodMotivoCancelamentoBanrisul, "IX_MotivoCancelamentoDePara_1")
                    .HasFillFactor((byte)90);

                entity.HasOne(d => d.CodMotivoCancelamentoNavigation)
                    .WithOne(p => p.MotivoCancelamentoDePara)
                    .HasForeignKey<MotivoCancelamentoDePara>(d => d.CodMotivoCancelamento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MotivoCancelamentoDePara_MotivoCancelamento");

                entity.HasOne(d => d.CodMotivoCancelamentoBanrisulNavigation)
                    .WithMany(p => p.MotivoCancelamentoDeParas)
                    .HasForeignKey(d => d.CodMotivoCancelamentoBanrisul)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MotivoCancelamentoDePara_MotivoCancelamentoBanrisul");
            });

            modelBuilder.Entity<MotivoComunicacao>(entity =>
            {
                entity.HasIndex(e => e.MotivoComunicacao1, "UK_MotivoComunicacao")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.MotivoComunicacao1).IsUnicode(false);
            });

            modelBuilder.Entity<MotivoIncidenteNaoProcedente>(entity =>
            {
                entity.HasIndex(e => e.MotivoIncidenteNaoProcedente1, "UK_MotivoIncidenteNaoProcedente")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.MotivoIncidenteNaoProcedente1).IsUnicode(false);
            });

            modelBuilder.Entity<MotivoReaberturaO>(entity =>
            {
                entity.HasIndex(e => e.CodUsuarioCadastro, "IX_MotivoReaberturaOS")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.MotivoReabertura).IsUnicode(false);

                entity.HasOne(d => d.CodUsuarioCadastroNavigation)
                    .WithMany(p => p.MotivoReaberturaOs)
                    .HasForeignKey(d => d.CodUsuarioCadastro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MotivoReaberturaOS_Usuario");
            });

            modelBuilder.Entity<MultaCef>(entity =>
            {
                entity.Property(e => e.CgcUnidadeConvênio).IsUnicode(false);

                entity.Property(e => e.Chamado).IsUnicode(false);

                entity.Property(e => e.CódigoDoOrçamento).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Lote).IsUnicode(false);

                entity.Property(e => e.Modalidade).IsUnicode(false);

                entity.Property(e => e.NomeDaUnidade).IsUnicode(false);

                entity.Property(e => e.Ocorrência).IsUnicode(false);

                entity.Property(e => e.Rat).IsUnicode(false);
            });

            modelBuilder.Entity<MultaCef092016>(entity =>
            {
                entity.Property(e => e.CgcUnidadeConvênio).IsUnicode(false);

                entity.Property(e => e.Chamado).IsUnicode(false);

                entity.Property(e => e.CódigoDoOrçamento).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Lote).IsUnicode(false);

                entity.Property(e => e.Modalidade).IsUnicode(false);

                entity.Property(e => e.NomeDaUnidade).IsUnicode(false);

                entity.Property(e => e.Ocorrência).IsUnicode(false);

                entity.Property(e => e.Rat).IsUnicode(false);
            });

            modelBuilder.Entity<MultaCef102016>(entity =>
            {
                entity.Property(e => e.CgcUnidadeConvênio).IsUnicode(false);

                entity.Property(e => e.Chamado).IsUnicode(false);

                entity.Property(e => e.CódigoDoOrçamento).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Lote).IsUnicode(false);

                entity.Property(e => e.Modalidade).IsUnicode(false);

                entity.Property(e => e.NomeDaUnidade).IsUnicode(false);

                entity.Property(e => e.Ocorrência).IsUnicode(false);

                entity.Property(e => e.Rat).IsUnicode(false);
            });

            modelBuilder.Entity<Nf>(entity =>
            {
                entity.HasKey(e => e.CodNf)
                    .HasName("PK__NF__4E1E9780");

                entity.HasIndex(e => new { e.CodNf, e.CodTransportadora }, "_dta_index_NF_7_434816611__K1_K2_7")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodNf, e.CodNfperto, e.CodTransportadora, e.DataSolicNf, e.IndOrcamento }, "_dta_index_NF_7_434816611__K1_K3_K2_K7_K13")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodNfperto, e.CodNf, e.CodTransportadora, e.DataSolicNf }, "_dta_index_NF_7_434816611__K3_K1_K2_K7")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodNfperto, e.CodNf, e.CodTransportadora, e.DataSolicNf, e.IndOrcamento }, "_dta_index_NF_7_434816611__K3_K1_K2_K7_K13")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodNf).ValueGeneratedNever();

                entity.Property(e => e.CodNfperto).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManutencao).IsUnicode(false);

                entity.Property(e => e.CodUsuarioRequisitante).IsUnicode(false);

                entity.Property(e => e.DataHoraUltimaManut).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NumConhecimento).IsUnicode(false);

                entity.HasOne(d => d.CodTransportadoraNavigation)
                    .WithMany(p => p.Nfs)
                    .HasForeignKey(d => d.CodTransportadora)
                    .HasConstraintName("FK__NF__CodTransport__52E34C9D");
            });

            modelBuilder.Entity<Nfpeca>(entity =>
            {
                entity.HasKey(e => e.CodNfpecas)
                    .HasName("PK__NFPecas__5006DFF2");

                entity.HasIndex(e => new { e.CodRatdetalhesPecas, e.CodNf }, "_dta_index_NFPecas_7_1326627769__K2_K3")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodNf, e.CodRatdetalhesPecas }, "_dta_index_NFPecas_7_1326627769__K3_K2")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodNfpecas).ValueGeneratedNever();

                entity.Property(e => e.CodUsuario).IsUnicode(false);
            });

            modelBuilder.Entity<NoPo>(entity =>
            {
                entity.ToView("noPOS");
            });

            modelBuilder.Entity<NotaFaturamentoSicredi>(entity =>
            {
                entity.HasIndex(e => e.CodCooperativaSicredi, "IX_NotaFaturamentoSicredi")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodRepresentante, "IX_NotaFaturamentoSicredi_1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodUsuarioCadastro, "IX_NotaFaturamentoSicredi_2")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.MesAnoReferencia, "IX_NotaFaturamentoSicredi_3")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.NumeroNf).IsUnicode(false);

                entity.HasOne(d => d.CodCooperativaSicrediNavigation)
                    .WithMany(p => p.NotaFaturamentoSicredis)
                    .HasForeignKey(d => d.CodCooperativaSicredi)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NotaFaturamentoSicredi_CooperativaSicredi");

                entity.HasOne(d => d.CodRepresentanteNavigation)
                    .WithMany(p => p.NotaFaturamentoSicredis)
                    .HasForeignKey(d => d.CodRepresentante)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NotaFaturamentoSicredi_Representante");

                entity.HasOne(d => d.CodUsuarioCadastroNavigation)
                    .WithMany(p => p.NotaFaturamentoSicredis)
                    .HasForeignKey(d => d.CodUsuarioCadastro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NotaFaturamentoSicredi_Usuario");
            });

            modelBuilder.Entity<NumSerieVipBanrisul>(entity =>
            {
                entity.HasIndex(e => e.NumeroSerieVip, "UK_NumSerieVipBanrisul")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.CodUsuarioInativacao).IsUnicode(false);

                entity.Property(e => e.NumeroSerieVip).IsUnicode(false);

                entity.HasOne(d => d.CodNumSerieVipBanrisulTituloNavigation)
                    .WithMany(p => p.NumSerieVipBanrisuls)
                    .HasForeignKey(d => d.CodNumSerieVipBanrisulTitulo)
                    .HasConstraintName("FK_NumSerieVipBanrisul_NumSerieVipBanrisulTitulo");
            });

            modelBuilder.Entity<NumSerieVipBanrisulTitulo>(entity =>
            {
                entity.HasIndex(e => e.Titulo, "UK_NumSerieVipBanrisulTitulo_Titulo")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Titulo).IsUnicode(false);
            });

            modelBuilder.Entity<NumeroSerieControleEquipamento>(entity =>
            {
                entity.HasIndex(e => e.CodUsuarioCadastro, "IX_NumeroSerieControleEquipamentos")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodNumeroSerieControleTitulo, "IX_NumeroSerieControleEquipamentos_1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NumeroSerie, "IX_NumeroSerieControleEquipamentos_2")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.NumeroSerie).IsUnicode(false);

                entity.HasOne(d => d.CodNumeroSerieControleTituloNavigation)
                    .WithMany(p => p.NumeroSerieControleEquipamentos)
                    .HasForeignKey(d => d.CodNumeroSerieControleTitulo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NumeroSerieControleEquipamentos_NumeroSerieControleTitulo");

                entity.HasOne(d => d.CodUsuarioCadastroNavigation)
                    .WithMany(p => p.NumeroSerieControleEquipamentos)
                    .HasForeignKey(d => d.CodUsuarioCadastro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NumeroSerieControleEquipamentos_Usuario");
            });

            modelBuilder.Entity<NumeroSerieControleTitulo>(entity =>
            {
                entity.HasIndex(e => e.Titulo, "IX_NumeroSerieControleTitulo")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodUsuarioCadastro, "IX_NumeroSerieControleTitulo_1")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.Emails).IsUnicode(false);

                entity.Property(e => e.Titulo).IsUnicode(false);

                entity.HasOne(d => d.CodUsuarioCadastroNavigation)
                    .WithMany(p => p.NumeroSerieControleTitulos)
                    .HasForeignKey(d => d.CodUsuarioCadastro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NumeroSerieControleTitulo_Usuario");
            });

            modelBuilder.Entity<O>(entity =>
            {
                entity.HasIndex(e => e.CodCliente, "IDX_OS_1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodCliente, e.NumOscliente }, "IDX_OS_2")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodOs, e.CodTipoIntervencao }, "IDX_OS_ADV00")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodTipoIntervencao, e.CodFilial, e.CodAutorizada, e.CodRegiao }, "IX_CODFILCODAUT_CODREGCTIPINT")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodCliente, e.CodPosto, e.CodEquip, e.CodFilial, e.CodAutorizada, e.CodRegiao, e.CodStatusServico }, "IX_CODFILIAL_COD_AUT")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodFilial, "IX_CodFilial")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodStatusServico, "IX_CodStatusServico")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodFilial, e.CodAutorizada, e.CodRegiao }, "IX_OS_CODFILIAL_CODAUTCODREG")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodTipoIntervencao, e.CodStatusServico }, "IX_OS_CODSTATUSSERV")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodCliente, e.CodPosto, e.CodEquip, e.CodTipoIntervencao, e.CodFilial, e.CodStatusServico }, "IX_OS_CODTEC_COLUMNS")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodTipoIntervencao, e.CodStatusServico }, "IX_OS_CODTIPOINTERV_COSTATUSSERVICO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodTipoIntervencao, e.CodStatusServico }, "IX_OS_CODTIPOINT_COLUM")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodTipoIntervencao, e.CodStatusServico }, "IX_OS_COLUMNS")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodTipoIntervencao, e.CodStatusServico, e.DataHoraAberturaOs }, "IX_OS_CodTipoIntervencao_CodStatusServico_Data")
                    .HasFilter("([CodStatusServico]<>(2) AND [CodTipoIntervencao]=(2))")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodDefeitoPos, "IX_OS_DefeitoPOS")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IndRevisaoReincidencia, "IX_OS_INDREVISREINC")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NumOscliente, "IX_OS_NUMOSCLIENTE")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodStatusServico, e.NumOscliente }, "IX_OS_NUMOSCLI_CODSTATSER")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodOperadoraTelefonia, "IX_OS_OperadoraTelefonia")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodCliente, e.CnpjestabelecimentoCliente, e.RedeEquipamento, e.CodStatusServico }, "IX_OS_POS_Exclusao")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodStatusServico, e.CodOs, e.CodTipoIntervencao }, "IX_OS_QUERYTOP100")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodCliente, e.CodStatusServico, e.NumOscliente, e.IndServico, e.DataManutencao, e.IndIntegracao }, "NonClusteredIndex-20150311-090913")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodStatusServico, e.CodCliente, e.CodTecnico }, "OS2929")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodEquipContrato, "OS30")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodStatusServico, e.CodTecnico }, "OS47")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodTecnico, e.CodStatusServico, e.CodAutorizada, e.CodFilial }, "OS48")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodOs, e.DataHoraTransf }, "OS75")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodStatusServico, e.CodFilial }, "OS77")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodTipoIntervencao, e.CodStatusServico }, "OX_CODTIPOINT_COLUMNS")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodStatusServico, "ix_is_cliregiao")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodTipoIntervencao, e.CodFilial, e.CodAutorizada, e.DataHoraAberturaOs }, "ix_is_tipofilialabert")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodCliente, e.IndServico, e.NumOscliente }, "ix_os_cliservnumos9")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodTipoIntervencao, e.CodStatusServico }, "ix_os_codequip9")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodCliente, e.CodTipoIntervencao, e.CodFilial, e.IndServico, e.CodEquipContrato, e.CodStatusServico, e.NumOscliente, e.DataHoraAberturaOs }, "ix_os_codposto8")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodStatusServico, "ix_os_codstatus_abertura")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodTipoIntervencao, e.CodStatusServico }, "ix_os_tipostatus")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodOs).ValueGeneratedNever();

                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.CnpjestabelecimentoCliente).IsUnicode(false);

                entity.Property(e => e.CodUsuarioAcertoParque).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCancelamento).IsUnicode(false);

                entity.Property(e => e.CodUsuarioFechamento).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManutencao).IsUnicode(false);

                entity.Property(e => e.CodUsuarioMarcaEspecial).IsUnicode(false);

                entity.Property(e => e.CodUsuarioOsmobileLida).IsUnicode(false);

                entity.Property(e => e.CodUsuarioOsmobileRecebida).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.DescMotivoMarcaEspecial).IsUnicode(false);

                entity.Property(e => e.DescNumSerieNi).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.IndAtrasoSla).HasDefaultValueSql("((0))");

                entity.Property(e => e.IndCancelado).HasDefaultValueSql("((0))");

                entity.Property(e => e.IndCienciaAtendente).HasDefaultValueSql("((0))");

                entity.Property(e => e.IndCienciaTerceirizada).HasDefaultValueSql("((0))");

                entity.Property(e => e.IndEnderecoRevisado).HasDefaultValueSql("((0))");

                entity.Property(e => e.IndEndossado).HasDefaultValueSql("((0))");

                entity.Property(e => e.IndIntegracao).HasDefaultValueSql("((0))");

                entity.Property(e => e.IndLiberacaoFechaduraCofre).HasDefaultValueSql("((0))");

                entity.Property(e => e.IndMarcaEspecial).HasDefaultValueSql("((0))");

                entity.Property(e => e.IndStatusEnvioReincidencia).HasDefaultValueSql("((-1))");

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NomeArquivoIntegracaoBanrisul).IsUnicode(false);

                entity.Property(e => e.NomeContato).IsUnicode(false);

                entity.Property(e => e.NomeSolicitante).IsUnicode(false);

                entity.Property(e => e.NumAgenciaBanco).IsUnicode(false);

                entity.Property(e => e.NumAgenciaNi).IsUnicode(false);

                entity.Property(e => e.NumContaEstabelecimentoCliente).IsUnicode(false);

                entity.Property(e => e.NumEstabelecimentoCliente).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumOsquarteirizada).IsUnicode(false);

                entity.Property(e => e.NumRemessa).IsUnicode(false);

                entity.Property(e => e.NumTerminal).IsUnicode(false);

                entity.Property(e => e.ObsFechamentoBanrisul).IsUnicode(false);

                entity.Property(e => e.ObservacaoCliente).IsUnicode(false);

                entity.Property(e => e.Pais).IsUnicode(false);

                entity.Property(e => e.RazaoSocialEstabelecimentoCliente).IsUnicode(false);

                entity.Property(e => e.RedeEquipamento).IsUnicode(false);

                entity.Property(e => e.ServicoEmail).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.SugestaoOs).IsUnicode(false);

                entity.Property(e => e.TelefoneSolicitante).IsUnicode(false);

                entity.Property(e => e.TempoEfetInicio).HasDefaultValueSql("((0))");

                entity.Property(e => e.TempoEfetReparo).HasDefaultValueSql("((0))");

                entity.Property(e => e.TempoEfetSolucao).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.CodDefeitoPosNavigation)
                    .WithMany(p => p.Os)
                    .HasForeignKey(d => d.CodDefeitoPos)
                    .HasConstraintName("FK_OS_DefeitoPOS");

                entity.HasOne(d => d.CodMotivoCancelamentoNavigation)
                    .WithMany(p => p.Os)
                    .HasForeignKey(d => d.CodMotivoCancelamento)
                    .HasConstraintName("Fk_MotivoCancelamento");

                entity.HasOne(d => d.CodOperadoraTelefoniaNavigation)
                    .WithMany(p => p.Os)
                    .HasForeignKey(d => d.CodOperadoraTelefonia)
                    .HasConstraintName("FK_OS_OperadoraTelefonia");
            });

            modelBuilder.Entity<ObservacaoFaturamento>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.HasOne(d => d.CodFaturamentoNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodFaturamento)
                    .HasConstraintName("FK__Observaca__CodFa__7EF1D5D0");
            });

            modelBuilder.Entity<OperadoraTelefonium>(entity =>
            {
                entity.HasIndex(e => e.NomeOperadoraTelefonia, "UK_OperadoraTelefonia_Nome")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NomeOperadoraTelefonia).IsUnicode(false);
            });

            modelBuilder.Entity<Or>(entity =>
            {
                entity.Property(e => e.CodOr).ValueGeneratedOnAdd();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.Minuta).IsUnicode(false);

                entity.Property(e => e.NumNf).IsUnicode(false);

                entity.Property(e => e.Volumes).IsUnicode(false);
            });

            modelBuilder.Entity<Orc>(entity =>
            {
                entity.HasIndex(e => new { e.CodOrc, e.CodigoOrdemServico, e.Numero }, "IX_ORC_ORDEMSERV")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DescricaoOutroMotivo).IsUnicode(false);

                entity.Property(e => e.Detalhe).IsUnicode(false);

                entity.Property(e => e.NomeContrato).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.UsuarioCadastro).IsUnicode(false);
            });

            modelBuilder.Entity<OrcDesconto>(entity =>
            {
                entity.Property(e => e.Motivo).IsUnicode(false);

                entity.Property(e => e.NomeCampo).IsUnicode(false);

                entity.Property(e => e.NomeTipo).IsUnicode(false);

                entity.Property(e => e.UsuarioCadastro).IsUnicode(false);

                entity.HasOne(d => d.CodOrcNavigation)
                    .WithMany(p => p.OrcDescontos)
                    .HasForeignKey(d => d.CodOrc)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_OrcDesconto_Orc");
            });

            modelBuilder.Entity<OrcDeslocamento>(entity =>
            {
                entity.Property(e => e.UsuarioCadastro).IsUnicode(false);

                entity.HasOne(d => d.CodOrcNavigation)
                    .WithMany(p => p.OrcDeslocamentos)
                    .HasForeignKey(d => d.CodOrc)
                    .HasConstraintName("FK_OrcDeslocamento_Orc");
            });

            modelBuilder.Entity<OrcEndereco>(entity =>
            {
                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.Cnpj).IsUnicode(false);

                entity.Property(e => e.CodigoOrdemServico).IsUnicode(false);

                entity.Property(e => e.Complemento).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Fax).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Fone).IsUnicode(false);

                entity.Property(e => e.InscricaoEstadual).IsUnicode(false);

                entity.Property(e => e.NomeCidade).IsUnicode(false);

                entity.Property(e => e.NomeEquipamento).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.NumeroCodigoOrdemServicoCliente).IsUnicode(false);

                entity.Property(e => e.NumeroPatrimonio).IsUnicode(false);

                entity.Property(e => e.NumeroSerie).IsUnicode(false);

                entity.Property(e => e.RazaoSocial).IsUnicode(false);

                entity.Property(e => e.Responsavel).IsUnicode(false);

                entity.Property(e => e.Rua).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);

                entity.Property(e => e.UsuarioCadastro).IsUnicode(false);

                entity.HasOne(d => d.CodOrcNavigation)
                    .WithMany(p => p.OrcEnderecos)
                    .HasForeignKey(d => d.CodOrc)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_OrcEndereco_Orc");
            });

            modelBuilder.Entity<OrcFaturamento>(entity =>
            {
                entity.Property(e => e.CodOrcFaturamento).ValueGeneratedNever();

                entity.Property(e => e.CaminhoDanfe).IsUnicode(false);

                entity.Property(e => e.DescricaoNotaFiscal).IsUnicode(false);

                entity.Property(e => e.NumeroNotaFiscal).IsUnicode(false);

                entity.Property(e => e.UsuarioCadastro).IsUnicode(false);

                entity.HasOne(d => d.CodOrcNavigation)
                    .WithMany(p => p.OrcFaturamentos)
                    .HasForeignKey(d => d.CodOrc)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrcFaturamento_Orc");
            });

            modelBuilder.Entity<OrcMaoObra>(entity =>
            {
                entity.Property(e => e.UsuarioCadastro).IsUnicode(false);

                entity.HasOne(d => d.CodOrcNavigation)
                    .WithMany(p => p.OrcMaoObras)
                    .HasForeignKey(d => d.CodOrc)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_OrcMaoObra_Orc");
            });

            modelBuilder.Entity<OrcMaterial>(entity =>
            {
                entity.Property(e => e.CodigoMagnus).IsUnicode(false);

                entity.Property(e => e.Descricao).IsUnicode(false);

                entity.Property(e => e.UsuarioCadastro).IsUnicode(false);

                entity.HasOne(d => d.CodOrcNavigation)
                    .WithMany(p => p.OrcMaterials)
                    .HasForeignKey(d => d.CodOrc)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_OrcMaterial_Orc");
            });

            modelBuilder.Entity<OrcMotivo>(entity =>
            {
                entity.HasKey(e => e.CodOrcMotivo)
                    .HasName("PK_OrcTipo");

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<OrcOutroServico>(entity =>
            {
                entity.Property(e => e.Descricao).IsUnicode(false);

                entity.Property(e => e.Tipo).IsUnicode(false);

                entity.Property(e => e.UsuarioCadastro).IsUnicode(false);

                entity.HasOne(d => d.CodOrcNavigation)
                    .WithMany(p => p.OrcOutroServicos)
                    .HasForeignKey(d => d.CodOrc)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_OrcOutroServico_Orc");
            });

            modelBuilder.Entity<OrcStatus>(entity =>
            {
                entity.Property(e => e.Nome).IsUnicode(false);
            });

            modelBuilder.Entity<Orcamento>(entity =>
            {
                entity.HasKey(e => e.CodOrcamento)
                    .HasName("PK__Orcamento__7C6F7215");

                entity.Property(e => e.CodOrcamento).ValueGeneratedNever();

                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.ComplemEnd).IsUnicode(false);

                entity.Property(e => e.DescMotivo).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.MotivoRep).IsUnicode(false);

                entity.Property(e => e.NomeAprovador).IsUnicode(false);

                entity.Property(e => e.NomeResponsavel).IsUnicode(false);

                entity.Property(e => e.NumeroEnd).IsUnicode(false);
            });

            modelBuilder.Entity<Orcamento1>(entity =>
            {
                entity.HasIndex(e => new { e.IndAtivo, e.CodOs, e.CodOrcamento, e.CodOrcamentoStatus }, "_dta_index_Orcamentos_7_577593296__K14_K3_K1_K4_15_17_6478")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodOs, e.IndAtivo }, "_dta_index_Orcamentos_7_577593296__K3_K14")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodOs, e.CodOrcamento, e.DataHoraCad, e.NumOrcamento, e.CodFilial, e.CodOrcamentoStatus, e.CodOrcamentoTipo, e.DescOrcamentoTipo, e.ValorHoraTecnica, e.PrevisaoHoras, e.ValorUnitarioKmRodado, e.Km, e.ValorHoraDeslocamento, e.ValorTotalOrcamento, e.IndAtivo, e.DataHoraDescong }, "_dta_index_Orcamentos_7_577593296__K3_K1_K22_K6_K2_K4_K5_K7_K8_K9_K10_K11_K12_K13_K14_K24_15_16_17_18_19_20_21_23")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioDescong).IsUnicode(false);

                entity.Property(e => e.DataHoraDescong).IsFixedLength(true);

                entity.Property(e => e.DescOrcamentoTipo).IsUnicode(false);

                entity.Property(e => e.DetalheOrcamento).IsUnicode(false);

                entity.Property(e => e.Km).IsUnicode(false);

                entity.Property(e => e.NumOrcamento).IsUnicode(false);

                entity.Property(e => e.ObsMotivo).IsUnicode(false);

                entity.Property(e => e.PrevisaoHoras).IsUnicode(false);

                entity.HasOne(d => d.CodFilialNavigation)
                    .WithMany(p => p.Orcamento1s)
                    .HasForeignKey(d => d.CodFilial)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Orcamentos_Filial");

                entity.HasOne(d => d.CodOrcamentoStatusNavigation)
                    .WithMany(p => p.Orcamento1s)
                    .HasForeignKey(d => d.CodOrcamentoStatus)
                    .HasConstraintName("FK_Orcamentos_OrcamentosStatus");

                entity.HasOne(d => d.CodOrcamentoTipoNavigation)
                    .WithMany(p => p.Orcamento1s)
                    .HasForeignKey(d => d.CodOrcamentoTipo)
                    .HasConstraintName("FK_Orcamentos_OrcamentosTipo");
            });

            modelBuilder.Entity<OrcamentoItem>(entity =>
            {
                entity.HasKey(e => e.CodItemOrcamento)
                    .HasName("PK__OrcamentoItem__74CE504D");

                entity.Property(e => e.CodItemOrcamento).ValueGeneratedNever();

                entity.Property(e => e.DescItem).IsUnicode(false);

                entity.Property(e => e.NomeServico).IsUnicode(false);
            });

            modelBuilder.Entity<OrcamentoNf>(entity =>
            {
                entity.HasKey(e => new { e.CodNf, e.CodOrcamento })
                    .HasName("PK__OrcamentoNF__1352D76D");

                entity.HasOne(d => d.CodOrcamentoNavigation)
                    .WithMany(p => p.OrcamentoNfs)
                    .HasForeignKey(d => d.CodOrcamento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Orcamento__CodOr__153B1FDF");
            });

            modelBuilder.Entity<OrcamentoPecaExportacao>(entity =>
            {
                entity.HasKey(e => e.CodOrcamentoPecaExportacao)
                    .HasName("PK__Orcament__4EE03928A75C9F47");

                entity.Property(e => e.CaminhoArquivoOrcamento).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.NumeroOrcamento).IsUnicode(false);
            });

            modelBuilder.Entity<OrcamentoPecasEspec>(entity =>
            {
                entity.HasKey(e => e.CodOrcamentoPecasEspec)
                    .HasName("PK__OrcamentoPecasEs__3A5795F5");

                entity.HasIndex(e => e.CodOsbancada, "_dta_index_OrcamentoPecasEspec_7_43863223__K4")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodOsbancada, e.CodPecaRe5114, e.CodOrcamento }, "_dta_index_OrcamentoPecasEspec_7_43863223__K4_K6_K3")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodOrcamentoPecasEspec).ValueGeneratedNever();

                entity.Property(e => e.IndCobranca).HasDefaultValueSql("(0)");

                entity.Property(e => e.TipoDesconto).HasDefaultValueSql("(0)");

                entity.Property(e => e.ValorDesconto).HasDefaultValueSql("(0)");

                entity.HasOne(d => d.Cod)
                    .WithMany(p => p.OrcamentoPecasEspecs)
                    .HasForeignKey(d => new { d.CodOrcamento, d.CodOsbancada, d.CodPecaRe5114 })
                    .HasConstraintName("FK__OrcamentoPecasEs__75785BC3");
            });

            modelBuilder.Entity<OrcamentoSalvoEndereco>(entity =>
            {
                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.BairroEnvioNf).IsUnicode(false);

                entity.Property(e => e.BairroFaturamento).IsUnicode(false);

                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.CepenvioNf).IsUnicode(false);

                entity.Property(e => e.Cepfaturamento).IsUnicode(false);

                entity.Property(e => e.Cnpj).IsUnicode(false);

                entity.Property(e => e.CnpjenvioNf).IsUnicode(false);

                entity.Property(e => e.Cnpjfaturamento).IsUnicode(false);

                entity.Property(e => e.ComplementoEnvioNf).IsUnicode(false);

                entity.Property(e => e.ComplementoFaturamento).IsUnicode(false);

                entity.Property(e => e.EmailEnvioNf).IsUnicode(false);

                entity.Property(e => e.EmailFaturamento).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.EnderecoComplemento).IsUnicode(false);

                entity.Property(e => e.EnderecoEnvioNf).IsUnicode(false);

                entity.Property(e => e.EnderecoFaturamento).IsUnicode(false);

                entity.Property(e => e.FaxEnvioNf).IsUnicode(false);

                entity.Property(e => e.FaxFaturamento).IsUnicode(false);

                entity.Property(e => e.FoneEnvioNf).IsUnicode(false);

                entity.Property(e => e.FoneFaturamento).IsUnicode(false);

                entity.Property(e => e.InscricaoEstadualEnvioNf).IsUnicode(false);

                entity.Property(e => e.InscricaoEstadualFaturamento).IsUnicode(false);

                entity.Property(e => e.NomeCidade).IsUnicode(false);

                entity.Property(e => e.NomeCidadeEnvioNf).IsUnicode(false);

                entity.Property(e => e.NomeCidadeFaturamento).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumPatrimonio).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.NumeroEnvioNf).IsUnicode(false);

                entity.Property(e => e.NumeroFaturamento).IsUnicode(false);

                entity.Property(e => e.RazaoSocialEnvioNf).IsUnicode(false);

                entity.Property(e => e.RazaoSocialFaturamento).IsUnicode(false);

                entity.Property(e => e.ResponsavelEnvioNf).IsUnicode(false);

                entity.Property(e => e.ResponsavelFaturamento).IsUnicode(false);

                entity.Property(e => e.SiglaUfenvioNf).IsUnicode(false);

                entity.Property(e => e.SiglaUffaturamento).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<OrcamentosDesconto>(entity =>
            {
                entity.Property(e => e.MotivoDesconto).IsUnicode(false);

                entity.Property(e => e.NomeCampo).IsUnicode(false);

                entity.HasOne(d => d.CodTipoDescontoNavigation)
                    .WithMany(p => p.OrcamentosDescontos)
                    .HasForeignKey(d => d.CodTipoDesconto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrcamentosDesconto_TipoDesconto");
            });

            modelBuilder.Entity<OrcamentosFaturamentobkp>(entity =>
            {
                entity.HasKey(e => e.CodOrcamentoFaturamento)
                    .HasName("PK_OrcamentosFaturamento");

                entity.HasIndex(e => e.CodClienteBancada, "IX_ORCAMENTOFAT")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.DescricaoNotaFiscal, e.CodOrcamento, e.CaminhoDanfe, e.NumNf, e.DataEmissaoNf }, "_dta_index_OrcamentosFaturamento_7_1153595348__K7_K2_K15_K11_K12_13")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.DescricaoNotaFiscal).IsUnicode(false);

                entity.Property(e => e.NumOrcamento).IsUnicode(false);

                entity.HasOne(d => d.CodClienteBancadaNavigation)
                    .WithMany(p => p.OrcamentosFaturamentobkps)
                    .HasForeignKey(d => d.CodClienteBancada)
                    .HasConstraintName("FK_OrcamentosFaturamento_ClienteBancada");

                entity.HasOne(d => d.CodOrcamentoNavigation)
                    .WithMany(p => p.OrcamentosFaturamentobkps)
                    .HasForeignKey(d => d.CodOrcamento)
                    .HasConstraintName("FK_OrcamentosFaturamento_Orc");
            });

            modelBuilder.Entity<OrcamentosIss>(entity =>
            {
                entity.HasOne(d => d.CodFilialNavigation)
                    .WithMany(p => p.OrcamentosIsses)
                    .HasForeignKey(d => d.CodFilial)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrcamentosIss_Filial");
            });

            modelBuilder.Entity<OrcamentosOutrosServico>(entity =>
            {
                entity.Property(e => e.Descricao).IsUnicode(false);

                entity.HasOne(d => d.CodOrcamentoNavigation)
                    .WithMany(p => p.OrcamentosOutrosServicos)
                    .HasForeignKey(d => d.CodOrcamento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrcamentosOutrosServicos_Orcamentos");
            });

            modelBuilder.Entity<OrcamentosParametro>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.Valor).IsUnicode(false);
            });

            modelBuilder.Entity<OrcamentosPeca>(entity =>
            {
                entity.HasIndex(e => e.CodPeca, "_dta_index_OrcamentosPeca_7_1842977792__K2_6")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodOrcamento, e.CodPeca }, "_dta_index_OrcamentosPeca_7_1842977792__K3_K2")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodOrcamento, e.CodPeca }, "_dta_index_OrcamentosPeca_7_1842977792__K3_K2_4_6_7")
                    .HasFillFactor((byte)90);

                entity.HasOne(d => d.CodOrcamentoNavigation)
                    .WithMany(p => p.OrcamentosPecas)
                    .HasForeignKey(d => d.CodOrcamento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrcamentosPeca_Orcamentos");

                entity.HasOne(d => d.CodPecaNavigation)
                    .WithMany(p => p.OrcamentosPecas)
                    .HasForeignKey(d => d.CodPeca)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrcamentosPeca_Peca");
            });

            modelBuilder.Entity<OrcamentosStatus>(entity =>
            {
                entity.Property(e => e.CodOrcamentoStatus).ValueGeneratedNever();

                entity.Property(e => e.NomeStatus).IsUnicode(false);
            });

            modelBuilder.Entity<OrcamentosTipo>(entity =>
            {
                entity.Property(e => e.NomeTipo).IsUnicode(false);
            });

            modelBuilder.Entity<OrcheckListItem>(entity =>
            {
                entity.HasKey(e => e.CodOrcheckListItem)
                    .HasName("PK__ORCheckL__91265886768C5E8D");

                entity.Property(e => e.Acao).IsUnicode(false);

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.Descricao).IsUnicode(false);

                entity.Property(e => e.Nivel).IsUnicode(false);

                entity.Property(e => e.Parametro).IsUnicode(false);

                entity.Property(e => e.PnMei).IsUnicode(false);

                entity.Property(e => e.Realizacao).IsUnicode(false);
            });

            modelBuilder.Entity<Orchecklist>(entity =>
            {
                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.CodOrcheckListItem).IsUnicode(false);

                entity.Property(e => e.CodOrchecklist).ValueGeneratedOnAdd();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<Ordefeito>(entity =>
            {
                entity.HasKey(e => e.CodDefeito)
                    .HasName("PK__ORDefeit__DE48CB709913EC0F");

                entity.Property(e => e.Desricao).IsUnicode(false);
            });

            modelBuilder.Entity<Ordestino>(entity =>
            {
                entity.HasKey(e => e.CodDestino)
                    .HasName("PK__ORDestin__BB23938523BCBA15");

                entity.Property(e => e.CodDestino).ValueGeneratedNever();

                entity.Property(e => e.Destino).IsUnicode(false);
            });

            modelBuilder.Entity<Ordivergencium>(entity =>
            {
                entity.HasKey(e => e.CodDivergencia)
                    .HasName("PK__ORDIVERG__1A21BE2936E749D5");

                entity.Property(e => e.DivergenciaDescricao).IsUnicode(false);
            });

            modelBuilder.Entity<OrigemCausa>(entity =>
            {
                entity.HasKey(e => e.CodOrigemCausa)
                    .HasName("PK__OrigemCausa__5629CD9C");

                entity.Property(e => e.CodOrigemCausa).ValueGeneratedNever();

                entity.Property(e => e.AbrevOrigemCausa).IsUnicode(false);

                entity.Property(e => e.DescOrigemCausa).IsUnicode(false);

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("(1)");
            });

            modelBuilder.Entity<OrigemChamadoStn>(entity =>
            {
                entity.HasKey(e => e.CodOrigemChamadoStn)
                    .HasName("PK__OrigemCh__EB1C751A1488E509");

                entity.Property(e => e.DescOrigemChamadoStn).IsUnicode(false);
            });

            modelBuilder.Entity<Oritem>(entity =>
            {
                entity.Property(e => e.CodOritem).ValueGeneratedOnAdd();

                entity.Property(e => e.CodTecnico).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.DivergenciaDescricao).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);
            });

            modelBuilder.Entity<OritemInsumo>(entity =>
            {
                entity.Property(e => e.CodDefeito).IsUnicode(false);

                entity.Property(e => e.CodOritemInsumo).ValueGeneratedOnAdd();

                entity.Property(e => e.CodTecnico).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);
            });

            modelBuilder.Entity<Orlog>(entity =>
            {
                entity.HasKey(e => e.CodLog)
                    .HasName("PK__ORLog__833F7D4404FFE42D");

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);
            });

            modelBuilder.Entity<Ormodal>(entity =>
            {
                entity.HasKey(e => e.CodModal)
                    .HasName("PK__ORModal__B8708F6CD12CFF01");

                entity.Property(e => e.CodModal).ValueGeneratedNever();

                entity.Property(e => e.TipoModal).IsUnicode(false);
            });

            modelBuilder.Entity<OrnivelCheckList>(entity =>
            {
                entity.HasKey(e => e.CodNivel)
                    .HasName("PK__ORNivelC__DDA03B473C036346");

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<Orsolucao>(entity =>
            {
                entity.HasKey(e => e.CodSolucao)
                    .HasName("PK__ORSoluca__572A5F661D05B9E4");

                entity.Property(e => e.Desricao).IsUnicode(false);
            });

            modelBuilder.Entity<Orstatus>(entity =>
            {
                entity.Property(e => e.CodStatus).ValueGeneratedNever();

                entity.Property(e => e.DescStatus).IsUnicode(false);
            });

            modelBuilder.Entity<OrtempoReparo>(entity =>
            {
                entity.Property(e => e.CodOrtempoReparo).ValueGeneratedOnAdd();

                entity.Property(e => e.CodTecnico).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);
            });

            modelBuilder.Entity<Ortransporte>(entity =>
            {
                entity.HasKey(e => e.CodTransportadora)
                    .HasName("PK__ORTransp__2BAD63D5D6A698CE");

                entity.Property(e => e.NomeTransportadora).IsUnicode(false);
            });

            modelBuilder.Entity<OrtransporteXfilial>(entity =>
            {
                entity.HasKey(e => e.CodOrtransporteFilial)
                    .HasName("PK__ORTransp__426DDE9475D32CA3");
            });

            modelBuilder.Entity<OsAberturaEmMassa>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.Detalhes).IsUnicode(false);
            });

            modelBuilder.Entity<OsArqMorto>(entity =>
            {
                entity.HasKey(e => e.CodOs)
                    .HasName("pk_arq_morto");

                entity.HasIndex(e => e.CodDefeitoPos, "IX_OS_ARQ_MORTO_DefeitoPOS")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodOperadoraTelefonia, "IX_OS_ARQ_MORTO_OperadoradoraTelefonia")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodOs, "_dta_index_OS_ARQ_MORTO_7_1193263506__K1_4149")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodOs, e.CodStatusServico, e.DataHoraSolicitacao }, "_dta_index_OS_ARQ_MORTO_9_1193263506__K1_K10_K13")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodEquipContrato, "in_os_arq_morto_codeq")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodOs).ValueGeneratedNever();

                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.CnpjestabelecimentoCliente).IsUnicode(false);

                entity.Property(e => e.CodUsuarioAcertoParque).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCancelamento).IsUnicode(false);

                entity.Property(e => e.CodUsuarioFechamento).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManutencao).IsUnicode(false);

                entity.Property(e => e.CodUsuarioMarcaEspecial).IsUnicode(false);

                entity.Property(e => e.CodUsuarioOsmobileLida).IsUnicode(false);

                entity.Property(e => e.CodUsuarioOsmobileRecebida).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.DescMotivoMarcaEspecial).IsUnicode(false);

                entity.Property(e => e.DescNumSerieNi).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.IndAtrasoSla).HasDefaultValueSql("((0))");

                entity.Property(e => e.IndCancelado).HasDefaultValueSql("((0))");

                entity.Property(e => e.IndCienciaAtendente).HasDefaultValueSql("((0))");

                entity.Property(e => e.IndCienciaTerceirizada).HasDefaultValueSql("((0))");

                entity.Property(e => e.IndEnderecoRevisado).HasDefaultValueSql("((0))");

                entity.Property(e => e.IndEndossado).HasDefaultValueSql("((0))");

                entity.Property(e => e.IndIntegracao).HasDefaultValueSql("((0))");

                entity.Property(e => e.IndMarcaEspecial).HasDefaultValueSql("((0))");

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NomeArquivoIntegracaoBanrisul).IsUnicode(false);

                entity.Property(e => e.NomeContato).IsUnicode(false);

                entity.Property(e => e.NomeSolicitante).IsUnicode(false);

                entity.Property(e => e.NumAgenciaBanco).IsUnicode(false);

                entity.Property(e => e.NumAgenciaNi).IsUnicode(false);

                entity.Property(e => e.NumContaEstabelecimentoCliente).IsUnicode(false);

                entity.Property(e => e.NumEstabelecimentoCliente).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumOsquarteirizada).IsUnicode(false);

                entity.Property(e => e.NumRemessa).IsUnicode(false);

                entity.Property(e => e.NumTerminal).IsUnicode(false);

                entity.Property(e => e.ObsFechamentoBanrisul).IsUnicode(false);

                entity.Property(e => e.ObservacaoCliente).IsUnicode(false);

                entity.Property(e => e.Pais).IsUnicode(false);

                entity.Property(e => e.RazaoSocialEstabelecimentoCliente).IsUnicode(false);

                entity.Property(e => e.RedeEquipamento).IsUnicode(false);

                entity.Property(e => e.ServicoEmail).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.SugestaoOs).IsUnicode(false);

                entity.Property(e => e.TelefoneSolicitante).IsUnicode(false);

                entity.Property(e => e.TempoEfetInicio).HasDefaultValueSql("((0))");

                entity.Property(e => e.TempoEfetReparo).HasDefaultValueSql("((0))");

                entity.Property(e => e.TempoEfetSolucao).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.CodDefeitoPosNavigation)
                    .WithMany(p => p.OsArqMortos)
                    .HasForeignKey(d => d.CodDefeitoPos)
                    .HasConstraintName("FK_OS_ARQ_MORTO_DefeitoPOS");

                entity.HasOne(d => d.CodOperadoraTelefoniaNavigation)
                    .WithMany(p => p.OsArqMortos)
                    .HasForeignKey(d => d.CodOperadoraTelefonia)
                    .HasConstraintName("FK_OS_ARQ_MORTO_OperadoraTelefonia");
            });

            modelBuilder.Entity<OsConsultum>(entity =>
            {
                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NomTipoIntervencao).IsUnicode(false);

                entity.Property(e => e.NomeAcao).IsUnicode(false);

                entity.Property(e => e.NomeAutorizada).IsUnicode(false);

                entity.Property(e => e.NomeCausa).IsUnicode(false);

                entity.Property(e => e.NomeContrato).IsUnicode(false);

                entity.Property(e => e.NomeDefeito).IsUnicode(false);

                entity.Property(e => e.NomeEquipSns).IsUnicode(false);

                entity.Property(e => e.NomeFantasiaCliente).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);

                entity.Property(e => e.NomeRegiao).IsUnicode(false);

                entity.Property(e => e.NomeSla).IsUnicode(false);

                entity.Property(e => e.NomeStatusServico).IsUnicode(false);

                entity.Property(e => e.NomeTipoCausa).IsUnicode(false);

                entity.Property(e => e.NomeTipoContrato).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumOsquarteirizada).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.ObsMotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.ObsRat).IsUnicode(false);

                entity.Property(e => e.Observ).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.Rat).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Rg).IsUnicode(false);

                entity.Property(e => e.Semat).IsUnicode(false);

                entity.Property(e => e.Servico).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.StatusRat).IsUnicode(false);

                entity.Property(e => e.Tecnico).IsUnicode(false);

                entity.Property(e => e.TecnicoTransf).IsUnicode(false);

                entity.Property(e => e.TensaoSemCarga).IsUnicode(false);
            });

            modelBuilder.Entity<OsEquip>(entity =>
            {
                entity.Property(e => e.CodOs).ValueGeneratedNever();
            });

            modelBuilder.Entity<OsSicrediAlteraTipoEcancela>(entity =>
            {
                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.CnpjestabelecimentoCliente).IsUnicode(false);

                entity.Property(e => e.CodUsuarioAcertoParque).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCancelamento).IsUnicode(false);

                entity.Property(e => e.CodUsuarioFechamento).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManutencao).IsUnicode(false);

                entity.Property(e => e.CodUsuarioMarcaEspecial).IsUnicode(false);

                entity.Property(e => e.CodUsuarioOsmobileLida).IsUnicode(false);

                entity.Property(e => e.CodUsuarioOsmobileRecebida).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.DescMotivoMarcaEspecial).IsUnicode(false);

                entity.Property(e => e.DescNumSerieNi).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NomeArquivoIntegracaoBanrisul).IsUnicode(false);

                entity.Property(e => e.NomeContato).IsUnicode(false);

                entity.Property(e => e.NomeSolicitante).IsUnicode(false);

                entity.Property(e => e.NumAgenciaBanco).IsUnicode(false);

                entity.Property(e => e.NumAgenciaNi).IsUnicode(false);

                entity.Property(e => e.NumContaEstabelecimentoCliente).IsUnicode(false);

                entity.Property(e => e.NumEstabelecimentoCliente).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumOsquarteirizada).IsUnicode(false);

                entity.Property(e => e.NumRemessa).IsUnicode(false);

                entity.Property(e => e.NumTerminal).IsUnicode(false);

                entity.Property(e => e.ObsFechamentoBanrisul).IsUnicode(false);

                entity.Property(e => e.ObservacaoCliente).IsUnicode(false);

                entity.Property(e => e.Pais).IsUnicode(false);

                entity.Property(e => e.RazaoSocialEstabelecimentoCliente).IsUnicode(false);

                entity.Property(e => e.RedeEquipamento).IsUnicode(false);

                entity.Property(e => e.ServicoEmail).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.SugestaoOs).IsUnicode(false);

                entity.Property(e => e.TelefoneSolicitante).IsUnicode(false);
            });

            modelBuilder.Entity<OsSuporte>(entity =>
            {
                entity.HasKey(e => e.CodSuporte)
                    .HasName("PK__OS_SUPOR__959E234AEC4F0C0F");

                entity.Property(e => e.Acao).IsUnicode(false);

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.NomeEquipamento).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);
            });

            modelBuilder.Entity<Osatendida>(entity =>
            {
                entity.HasIndex(e => e.CodEquipContrato, "_dta_index_OSAtendidas_7_362588480__K8_1_2_3_4_5_12_13_14_15_16_17_18_19")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodOsatendidas).ValueGeneratedNever();

                entity.HasOne(d => d.CodClienteNavigation)
                    .WithMany(p => p.Osatendida)
                    .HasForeignKey(d => d.CodCliente)
                    .HasConstraintName("FK_OSAtendidas_Cliente");

                entity.HasOne(d => d.CodEquipContratoNavigation)
                    .WithMany(p => p.Osatendida)
                    .HasForeignKey(d => d.CodEquipContrato)
                    .HasConstraintName("FK_OSAtendidas_EquipamentoContrato");

                entity.HasOne(d => d.Cod)
                    .WithMany(p => p.Osatendida)
                    .HasForeignKey(d => new { d.CodRegiao, d.CodAutorizada, d.CodFilial })
                    .HasConstraintName("FK_OSAtendidas_RegiaoAutorizada");
            });

            modelBuilder.Entity<OsbancadaPeca>(entity =>
            {
                entity.HasKey(e => new { e.CodOsbancada, e.CodPecaRe5114 })
                    .HasName("PK__OSBancadaPecas__68DD7AB4");

                entity.HasIndex(e => e.CodOsbancada, "_dta_index_OSBancadaPecas_7_1811641647__K1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IndPecaLiberada, e.CodOsbancada }, "_dta_index_OSBancadaPecas_7_1811641647__K13_K1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IndPecaLiberada, e.IndPecaDevolvida, e.CodPecaRe5114, e.CodFilialRe5114, e.CodOsbancada }, "_dta_index_OSBancadaPecas_7_1811641647__K13_K16_K2_K3_K1_4_5_6_7_8_9_10_11_12_14_15_17_18_19")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IndPecaDevolvida, "_dta_index_OSBancadaPecas_7_1811641647__K16")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodOsbancada, "_dta_index_OSBancadaPecas_7_1811641647__K1_15")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodOsbancada, e.IndPecaDevolvida, e.IndPecaLiberada, e.IndGarantia }, "_dta_index_OSBancadaPecas_7_1811641647__K1_K16_K13_K4")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodOsbancada, e.CodPecaRe5114, e.IndPecaLiberada, e.IndPecaDevolvida, e.IndGarantia }, "_dta_index_OSBancadaPecas_7_1811641647__K1_K2_K13_K16_K4_15")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodPecaRe5114, e.CodOsbancada }, "_dta_index_OSBancadaPecas_7_700633639__K2_K1_3_4_5_6_7_8_9_10_11_12_13_14_15_16_17")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataCadastro).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DataManut).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DefeitoConstatado).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.IndGarantia).HasDefaultValueSql("((0))");

                entity.Property(e => e.IndPecaDevolvida).HasDefaultValueSql("((0))");

                entity.Property(e => e.IndPecaLiberada).HasDefaultValueSql("((0))");

                entity.Property(e => e.MotivoQgarantia).IsUnicode(false);

                entity.Property(e => e.NomeTecnicoRelatante).IsUnicode(false);

                entity.Property(e => e.Solucao).IsUnicode(false);

                entity.HasOne(d => d.CodOsbancadaNavigation)
                    .WithMany(p => p.OsbancadaPecas)
                    .HasForeignKey(d => d.CodOsbancada)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__OSBancada__CodOS__7A0806B6");

                entity.HasOne(d => d.CodPecaRe5114Navigation)
                    .WithMany(p => p.OsbancadaPecas)
                    .HasForeignKey(d => d.CodPecaRe5114)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__OSBancada__CodPe__666B225D");
            });

            modelBuilder.Entity<OsbancadaPecasAplic>(entity =>
            {
                entity.HasKey(e => new { e.CodPeca, e.CodOsbancada, e.CodPecaRe5114 })
                    .HasName("PK__OSBancadaPecasAp__36870511");

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.HasOne(d => d.CodPecaNavigation)
                    .WithMany(p => p.OsbancadaPecasAplics)
                    .HasForeignKey(d => d.CodPeca)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OSBancadaPecasAplic_Peca");

                entity.HasOne(d => d.Cod)
                    .WithMany(p => p.OsbancadaPecasAplics)
                    .HasForeignKey(d => new { d.CodOsbancada, d.CodPecaRe5114 })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OSBancadaPecasAplic_OSBancadaPecas");
            });

            modelBuilder.Entity<OsbancadaPecasNf>(entity =>
            {
                entity.HasKey(e => new { e.CodNf, e.CodOsbancada, e.CodPecaRe5114 })
                    .HasName("PK__OSBancadaPecasNF__377B294A");

                entity.HasIndex(e => new { e.CodOsbancada, e.CodPecaRe5114 }, "_dta_index_OSBancadaPecasNF_7_578817124__K1_K2")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodOsbancada, e.CodNf }, "_dta_index_OSBancadaPecasNF_7_578817124__K1_K3")
                    .HasFillFactor((byte)90);

                entity.HasOne(d => d.CodNfNavigation)
                    .WithMany(p => p.OsbancadaPecasNfs)
                    .HasForeignKey(d => d.CodNf)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__OSBancada__CodNF__6DD739FB");
            });

            modelBuilder.Entity<OsbancadaPecasOrcamento>(entity =>
            {
                entity.HasKey(e => new { e.CodOrcamento, e.CodOsbancada, e.CodPecaRe5114 })
                    .HasName("PK__OSBancadaPecasOr__69D19EED");

                entity.HasIndex(e => new { e.CodOrcamentoQtdPai, e.CodOrcamento, e.CodOsbancada, e.CodPecaRe5114, e.IndOrcamentoAprov }, "_dta_index_OSBancadaPecasOrcamento_7_1695345104__K15_K1_K2_K3_K4")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodOrcamento, e.CodOsbancada, e.CodPecaRe5114, e.CodOrcamentoQtdPai, e.IndOrcamentoAprov }, "_dta_index_OSBancadaPecasOrcamento_7_1695345104__K1_K2_K3_K15_K4")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodOsbancada, e.CodPecaRe5114, e.CodOrcamento }, "_dta_index_OSBancadaPecasOrcamento_7_1695345104__K2_K3_K1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodOsbancada, e.CodPecaRe5114, e.CodOrcamentoQtdPai, e.CodOrcamento }, "_dta_index_OSBancadaPecasOrcamento_7_1695345104__K2_K3_K15_K1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodOsbancada, e.CodPecaRe5114, e.IndOrcamentoAprov, e.CodOrcamento, e.CodOrcamentoQtdPai }, "_dta_index_OSBancadaPecasOrcamento_7_1695345104__K2_K3_K4_K1_K15")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodOsbancada, e.IndOrcamentoAprov }, "_dta_index_OSBancadaPecasOrcamento_7_1695345104__K2_K4_3")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IndOrcamentoAprov, e.CodOsbancada, e.CodPecaRe5114 }, "_dta_index_OSBancadaPecasOrcamento_7_1695345104__K4_K2_K3")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.IndOrcamentoAprov).HasDefaultValueSql("(0)");

                entity.Property(e => e.MotivoReprov).IsUnicode(false);

                entity.Property(e => e.NumOrdemCompra).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.HasOne(d => d.Cod)
                    .WithMany(p => p.OsbancadaPecasOrcamentos)
                    .HasForeignKey(d => new { d.CodOsbancada, d.CodPecaRe5114 })
                    .HasConstraintName("FK__OSBancadaPecasOr__69478F08");
            });

            modelBuilder.Entity<OsbancadaPecasTransf>(entity =>
            {
                entity.HasKey(e => e.CodTransf)
                    .HasName("PK__OSBancadaPecasTr__396371BC");

                entity.HasIndex(e => new { e.CodOsbancada, e.CodPecaRe5114 }, "_dta_index_OSBancadaPecasTransf_7_610817238__K3_K4")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodOsbancada, e.CodPecaRe5114, e.CodTransf }, "_dta_index_OSBancadaPecasTransf_7_610817238__K3_K4_K1_2")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodTransf).ValueGeneratedNever();

                entity.Property(e => e.CodUsuarioTransf).IsUnicode(false);

                entity.Property(e => e.DataHoraTransf).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.CodTecnicoNavigation)
                    .WithMany(p => p.OsbancadaPecasTransfs)
                    .HasForeignKey(d => d.CodTecnico)
                    .HasConstraintName("FK__OSBancada__CodTe__71A7CADF");
            });

            modelBuilder.Entity<Osbancadum>(entity =>
            {
                entity.HasKey(e => e.CodOsbancada)
                    .HasName("PK__OSbancada__66F53242");

                entity.HasIndex(e => e.CodOsbancada, "_dta_index_OSbancada_7_1647344933__K1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodFilial, e.CodOsbancada, e.CodClienteBancada, e.Nfentrada }, "_dta_index_OSbancada_7_1647344933__K12_K1_K2_K3_4_15")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodOsbancada, "_dta_index_OSbancada_7_1647344933__K1_2_3_12")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodOsbancada, e.CodClienteBancada }, "_dta_index_OSbancada_7_1647344933__K1_K2_3")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodOsbancada, e.CodClienteBancada, e.Nfentrada }, "_dta_index_OSbancada_7_1647344933__K1_K2_K3_4_15")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Nfentrada, "_dta_index_OSbancada_7_1647344933__K3_1_2")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodOsbancada).ValueGeneratedNever();

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataCadastro).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DataChegada).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DataManut).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Nfentrada).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);
            });

            modelBuilder.Entity<OscanceladaPossicredi>(entity =>
            {
                entity.HasIndex(e => e.CodUsuarioCancelamento, "IX_OSCanceladaPOSSicredi")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodOs, "IX_OSCanceladaPOSSicredi_1")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuarioCancelamento).IsUnicode(false);

                entity.HasOne(d => d.CodOsNavigation)
                    .WithOne(p => p.OscanceladaPossicredi)
                    .HasForeignKey<OscanceladaPossicredi>(d => d.CodOs)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OSCanceladaPOSSicredi_OS");

                entity.HasOne(d => d.CodUsuarioCancelamentoNavigation)
                    .WithMany(p => p.OscanceladaPossicredis)
                    .HasForeignKey(d => d.CodUsuarioCancelamento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OSCanceladaPOSSicredi_Usuario");
            });

            modelBuilder.Entity<OscanceladaPossicrediBkp>(entity =>
            {
                entity.Property(e => e.CodOscanceladaPossicredi).ValueGeneratedOnAdd();

                entity.Property(e => e.CodUsuarioCancelamento).IsUnicode(false);
            });

            modelBuilder.Entity<OscopiaPo>(entity =>
            {
                entity.HasIndex(e => e.CodOsorigem, "IX_OSCopiaPOS")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodOsdestino, "IX_OSCopiaPOS_1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodUsuarioCadastro, "IX_OSCopiaPOS_2")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.HasOne(d => d.CodOsdestinoNavigation)
                    .WithMany(p => p.OscopiaPoCodOsdestinoNavigations)
                    .HasForeignKey(d => d.CodOsdestino)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OSCopiaPOS_OS1");

                entity.HasOne(d => d.CodOsorigemNavigation)
                    .WithMany(p => p.OscopiaPoCodOsorigemNavigations)
                    .HasForeignKey(d => d.CodOsorigem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OSCopiaPOS_OS");

                entity.HasOne(d => d.CodUsuarioCadastroNavigation)
                    .WithMany(p => p.OscopiaPos)
                    .HasForeignKey(d => d.CodUsuarioCadastro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OSCopiaPOS_Usuario");
            });

            modelBuilder.Entity<OscotaBb>(entity =>
            {
                entity.Property(e => e.CodOscotaBb).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<OshistPo>(entity =>
            {
                entity.HasIndex(e => e.CodAcaoOs, "IX_OSHistPOS_Acao")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodOs, "IX_OSHistPOS_OS")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodUsuario, "IX_OSHistPOS_Usuario")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.Descricao).IsUnicode(false);

                entity.Property(e => e.Imagem).IsUnicode(false);

                entity.HasOne(d => d.CodAcaoOsNavigation)
                    .WithMany(p => p.OshistPos)
                    .HasForeignKey(d => d.CodAcaoOs)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OSHistPOS_AcaoOS");

                entity.HasOne(d => d.CodOsNavigation)
                    .WithMany(p => p.OshistPos)
                    .HasForeignKey(d => d.CodOs)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OSHistPOS_OS");

                entity.HasOne(d => d.CodUsuarioNavigation)
                    .WithMany(p => p.OshistPos)
                    .HasForeignKey(d => d.CodUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OSHistPOS_Usuario");
            });

            modelBuilder.Entity<Osintegracao>(entity =>
            {
                entity.Property(e => e.CodOsintegracao).ValueGeneratedNever();

                entity.Property(e => e.NomeArquivoGerado).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);
            });

            modelBuilder.Entity<OsintervencaoEquipamento>(entity =>
            {
                entity.Property(e => e.NumAtestado).IsUnicode(false);

                entity.Property(e => e.NumAutorizacao).IsUnicode(false);

                entity.Property(e => e.NumLacreColocado).IsUnicode(false);

                entity.Property(e => e.NumLacreRetirado).IsUnicode(false);
            });

            modelBuilder.Entity<Osposimagen>(entity =>
            {
                entity.HasIndex(e => e.CodOs, "IX_OSPOSImagens")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodUsuarioCadastro, "IX_OSPOSImagens_1")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Caminho).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.Descricao).IsUnicode(false);

                entity.Property(e => e.Imagem).IsUnicode(false);

                entity.HasOne(d => d.CodOsNavigation)
                    .WithMany(p => p.Osposimagens)
                    .HasForeignKey(d => d.CodOs)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OSPOSImagens_OS");

                entity.HasOne(d => d.CodUsuarioCadastroNavigation)
                    .WithMany(p => p.Osposimagens)
                    .HasForeignKey(d => d.CodUsuarioCadastro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OSPOSImagens_Usuario");
            });

            modelBuilder.Entity<OspossicrediCobrancaAtendimento>(entity =>
            {
                entity.HasIndex(e => e.CodOs, "IX_OSPOSDistanciaTempoAtendimento")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodTipoIntervencao, "IX_OSPOSSicrediCobrancaAtendimento")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.EnderecoDestino).IsUnicode(false);

                entity.Property(e => e.EnderecoDestinoGoogle).IsUnicode(false);

                entity.Property(e => e.EnderecoOrigem).IsUnicode(false);

                entity.Property(e => e.EnderecoOrigemGoogle).IsUnicode(false);

                entity.HasOne(d => d.CodOsNavigation)
                    .WithMany(p => p.OspossicrediCobrancaAtendimentos)
                    .HasForeignKey(d => d.CodOs)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OSPOSDistanciaTempoAtendimento_OS");

                entity.HasOne(d => d.CodTipoIntervencaoNavigation)
                    .WithMany(p => p.OspossicrediCobrancaAtendimentos)
                    .HasForeignKey(d => d.CodTipoIntervencao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OSPOSSicrediCobrancaAtendimento_TipoIntervencao");
            });

            modelBuilder.Entity<OspossicrediCobrancaAtendimentoBkp>(entity =>
            {
                entity.Property(e => e.EnderecoDestino).IsUnicode(false);

                entity.Property(e => e.EnderecoDestinoGoogle).IsUnicode(false);

                entity.Property(e => e.EnderecoOrigem).IsUnicode(false);

                entity.Property(e => e.EnderecoOrigemGoogle).IsUnicode(false);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Osreabertura>(entity =>
            {
                entity.HasIndex(e => e.CodOs, "IX_OSReabertura")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodMotivoReaberturaOs, "IX_OSReabertura_1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodUsuario, "IX_OSReabertura_2")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.Descricao).IsUnicode(false);

                entity.HasOne(d => d.CodMotivoReaberturaOsNavigation)
                    .WithMany(p => p.Osreaberturas)
                    .HasForeignKey(d => d.CodMotivoReaberturaOs)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OSReabertura_MotivoReaberturaOS");

                entity.HasOne(d => d.CodOsNavigation)
                    .WithMany(p => p.Osreaberturas)
                    .HasForeignKey(d => d.CodOs)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OSReabertura_OS");

                entity.HasOne(d => d.CodUsuarioNavigation)
                    .WithMany(p => p.Osreaberturas)
                    .HasForeignKey(d => d.CodUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OSReabertura_Usuario");
            });

            modelBuilder.Entity<OsrelatorioInstalacao>(entity =>
            {
                entity.HasKey(e => e.CodOsrelatorioInstalacao)
                    .HasName("PK_codOSRelatorioInstalacao");

                entity.Property(e => e.Detalhe).IsUnicode(false);
            });

            modelBuilder.Entity<OsrelatorioInstalacaoItem>(entity =>
            {
                entity.Property(e => e.CodOsrelatorioInstalacaoItem).ValueGeneratedOnAdd();

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("((1))");

                entity.Property(e => e.Item).IsUnicode(false);
            });

            modelBuilder.Entity<OsrelatorioInstalacaoNaoConformidade>(entity =>
            {
                entity.Property(e => e.CodOsrelatorioInstalacao).ValueGeneratedOnAdd();

                entity.Property(e => e.Detalhe).IsUnicode(false);
            });

            modelBuilder.Entity<OsrelatorioInstalacaoNaoConformidadeItem>(entity =>
            {
                entity.Property(e => e.CodOsrelatorioNaoConformidadeItem).ValueGeneratedOnAdd();

                entity.Property(e => e.Item).IsUnicode(false);
            });

            modelBuilder.Entity<OsressarcirCobrancaSicrediPo>(entity =>
            {
                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.MotivoRessarcimento).IsUnicode(false);

                entity.HasOne(d => d.CodOsNavigation)
                    .WithMany(p => p.OsressarcirCobrancaSicrediPos)
                    .HasForeignKey(d => d.CodOs)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OSRessarcirCobrancaSicrediPOS_OS");

                entity.HasOne(d => d.CodUsuarioCadastroNavigation)
                    .WithMany(p => p.OsressarcirCobrancaSicrediPos)
                    .HasForeignKey(d => d.CodUsuarioCadastro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OSRessarcirCobrancaSicrediPOS_Usuario");
            });

            modelBuilder.Entity<OsretiradaPo>(entity =>
            {
                entity.HasIndex(e => e.CodOs, "IX_OSRetiradaPOS")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodOsinstalacao, "IX_OSRetiradaPOS_1")
                    .HasFillFactor((byte)90);

                entity.HasOne(d => d.CodOsNavigation)
                    .WithMany(p => p.OsretiradaPoCodOsNavigations)
                    .HasForeignKey(d => d.CodOs)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OSRetiradaPOS_OS");

                entity.HasOne(d => d.CodOsinstalacaoNavigation)
                    .WithMany(p => p.OsretiradaPoCodOsinstalacaoNavigations)
                    .HasForeignKey(d => d.CodOsinstalacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OSRetiradaPOS_OS1");
            });

            modelBuilder.Entity<PaLogistica>(entity =>
            {
                entity.Property(e => e.CodPaLogistica).ValueGeneratedNever();

                entity.Property(e => e.Nome).IsUnicode(false);
            });

            modelBuilder.Entity<PagamentosPo>(entity =>
            {
                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.IntervaloSicredi).IsUnicode(false);

                entity.HasOne(d => d.CodUsuarioNavigation)
                    .WithMany(p => p.PagamentosPos)
                    .HasForeignKey(d => d.CodUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PagamentosPOS_Usuario");
            });

            modelBuilder.Entity<Pai>(entity =>
            {
                entity.HasKey(e => e.CodPais)
                    .HasName("PK__Pais__61B15A38");

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("((1))");

                entity.Property(e => e.NomePais).IsUnicode(false);

                entity.Property(e => e.SiglaPais).IsUnicode(false);

                entity.HasOne(d => d.CodUsuarioCadNavigation)
                    .WithMany(p => p.PaiCodUsuarioCadNavigations)
                    .HasForeignKey(d => d.CodUsuarioCad)
                    .HasConstraintName("FK_Pais_UsuarioCad");

                entity.HasOne(d => d.CodUsuarioManutNavigation)
                    .WithMany(p => p.PaiCodUsuarioManutNavigations)
                    .HasForeignKey(d => d.CodUsuarioManut)
                    .HasConstraintName("FK_Pais_UsuarioManut");
            });

            modelBuilder.Entity<ParquePosBanrisul>(entity =>
            {
                entity.Property(e => e.Cnpj).IsUnicode(false);

                entity.Property(e => e.Habilitado).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);
            });

            modelBuilder.Entity<ParqueResumo>(entity =>
            {
                entity.HasKey(e => e.CodParqueResumo)
                    .HasName("PK__Parque_Resumo__384F51F2");

                entity.HasIndex(e => new { e.CodCliente, e.CodContrato, e.IndAtivo, e.IndGarantia, e.AnoMes, e.CodEquip }, "IX_CODCLI_N")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.AnoMes, e.CodCliente, e.IndAtivo }, "IX_PARQUERESUMOANOCODCLIINDATI")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.AnoMes, e.CodTipoEquip, e.CodAutorizada, e.CodFilial, e.IndAtivo }, "IX_PQRESUMO_CODTIPECODFILINDATIV")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.AnoMes, e.IndAtivo, e.CodFilial }, "IX_Parque_Resumo_AnoMes_IndAtivo_CodFilial")
                    .HasFilter("([IndAtivo]=(1))")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodContrato, "IX_Parque_Resumo_Codcontrato")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodParqueResumo).ValueGeneratedNever();

                entity.Property(e => e.ValorDespesaInstalacao).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.CodEquipContratoNavigation)
                    .WithMany(p => p.ParqueResumos)
                    .HasForeignKey(d => d.CodEquipContrato)
                    .HasConstraintName("FK__Parque_Re__CodEq__3E082B48");
            });

            modelBuilder.Entity<PatrimonioPo>(entity =>
            {
                entity.HasIndex(e => e.CodSolicitantePatrimonio, "IX_PatrimonioPOS")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodCooperativaSicredi, "IX_PatrimonioPOS_1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodEquip, e.CodGrupoEquip, e.CodTipoEquip }, "IX_PatrimonioPOS_2")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodUsuario, "IX_PatrimonioPOS_3")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodRepresentante, "IX_PatrimonioPOS_4")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.NumOssicredi).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.HasOne(d => d.CodCooperativaSicrediNavigation)
                    .WithMany(p => p.PatrimonioPos)
                    .HasForeignKey(d => d.CodCooperativaSicredi)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PatrimonioPOS_CooperativaSicredi");

                entity.HasOne(d => d.CodRepresentanteNavigation)
                    .WithMany(p => p.PatrimonioPos)
                    .HasForeignKey(d => d.CodRepresentante)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PatrimonioPOS_Representante");

                entity.HasOne(d => d.CodSolicitantePatrimonioNavigation)
                    .WithMany(p => p.PatrimonioPos)
                    .HasForeignKey(d => d.CodSolicitantePatrimonio)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PatrimonioPOS_SolicitantePatrimonio");

                entity.HasOne(d => d.CodUsuarioNavigation)
                    .WithMany(p => p.PatrimonioPos)
                    .HasForeignKey(d => d.CodUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PatrimonioPOS_Usuario");

                entity.HasOne(d => d.Cod)
                    .WithMany(p => p.PatrimonioPos)
                    .HasForeignKey(d => new { d.CodEquip, d.CodGrupoEquip, d.CodTipoEquip })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PatrimonioPOS_Equipamento");
            });

            modelBuilder.Entity<Peca>(entity =>
            {
                entity.HasKey(e => e.CodPeca)
                    .HasName("PK__Peca__2838E5BA");

                entity.HasIndex(e => e.CodMagnus, "IDX_PECA_ADV00")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodPecaStatus, "IX_CODPECA")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodPeca, "_dta_index_Peca_7_2052970440__K1_2_7")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodPeca, e.CodPecaFamilia }, "_dta_index_Peca_7_2052970440__K1_K3_2_7_8_10_11_12_13")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodPeca, "_dta_index_Peca_7_871114294__K1_2_7_8")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodPeca, e.ValPecaEuro, e.ValPecaDolar, e.ValPeca, e.CodPecaFamilia, e.CodPecaSubstituicao }, "_dta_index_Peca_7_871114294__K1_K13_K12_K11_K3_K4_2_5_7_8_9_10_14_15")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodMagnus, "_dta_index_Peca_7_871114294__K2_1_4_5_7_8_9_10_11_12_13_14_15")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodPecaSubstituicao, e.CodPecaFamilia, e.CodPeca, e.ValPecaEuro, e.ValPecaDolar, e.ValPeca }, "_dta_index_Peca_7_871114294__K4_K3_K1_K13_K12_K11_2_5_7_8_9_10_14_15")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodPecaSubstituicao, e.CodPecaStatus, e.CodPeca, e.CodMagnus }, "_dta_index_Peca_7_871114294__K4_K5_K1_K2_7_8_9_10_11_12_13_14_15")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodPeca).ValueGeneratedNever();

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.CodPecaStatus).HasDefaultValueSql("((1))");

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DescrIngles).IsUnicode(false);

                entity.Property(e => e.DtObsoleto).IsUnicode(false);

                entity.Property(e => e.IsValorAtualizado).HasComputedColumnSql("(case when datediff(day,getdate(),[DataHoraAtualizacaoValor])>(0) then (1) else (0) end)", false);

                entity.Property(e => e.KitTecnico).HasDefaultValueSql("((0))");

                entity.Property(e => e.ListaBackup).HasDefaultValueSql("((0))");

                entity.Property(e => e.Ncm).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);

                entity.Property(e => e.QtdMinimaVenda).HasDefaultValueSql("((1))");

                entity.Property(e => e.UtilizadoDss).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.CodPecaFamiliaNavigation)
                    .WithMany(p => p.Pecas)
                    .HasForeignKey(d => d.CodPecaFamilia)
                    .HasConstraintName("FK_Peca_PecaFamilia");

                entity.HasOne(d => d.CodPecaStatusNavigation)
                    .WithMany(p => p.Pecas)
                    .HasForeignKey(d => d.CodPecaStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Peca_PecaStatus");

                entity.HasOne(d => d.CodPecaSubstituicaoNavigation)
                    .WithMany(p => p.InverseCodPecaSubstituicaoNavigation)
                    .HasForeignKey(d => d.CodPecaSubstituicao)
                    .HasConstraintName("FK_Peca_PecaSubstituicao");
            });

            modelBuilder.Entity<PecaExportacao>(entity =>
            {
                entity.HasKey(e => e.CodPecaExportacao)
                    .HasName("PK__PecaExpo__71F449DE1951DC7D");

                entity.Property(e => e.CodPai).IsUnicode(false);

                entity.Property(e => e.CodPeca).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);
            });

            modelBuilder.Entity<PecaFamilium>(entity =>
            {
                entity.HasKey(e => e.CodPecaFamilia)
                    .HasName("PK__PecaFamilia__0F982079");

                entity.Property(e => e.CodPecaFamilia).ValueGeneratedNever();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DataHoraManut).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DescFamilia).IsUnicode(false);

                entity.Property(e => e.NomeFamilia).IsUnicode(false);

                entity.HasOne(d => d.CodPecaBaseNavigation)
                    .WithMany(p => p.PecaFamilia)
                    .HasForeignKey(d => d.CodPecaBase)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PecaFamilia_Peca");
            });

            modelBuilder.Entity<PecaKit>(entity =>
            {
                entity.HasKey(e => new { e.CodPeca, e.CodPecaKit })
                    .HasName("PK__PecaKit__2CFD9AD7");

                entity.Property(e => e.Qtd).HasDefaultValueSql("(1)");

                entity.Property(e => e.ValorUnit).HasDefaultValueSql("(0)");

                entity.HasOne(d => d.CodPecaNavigation)
                    .WithMany(p => p.PecaKitCodPecaNavigations)
                    .HasForeignKey(d => d.CodPeca)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__PecaKit__CodPeca__5BB889C0");

                entity.HasOne(d => d.CodPecaKitNavigation)
                    .WithMany(p => p.PecaKitCodPecaKitNavigations)
                    .HasForeignKey(d => d.CodPecaKit)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__PecaKit__CodPeca__5CACADF9");
            });

            modelBuilder.Entity<PecaListaPeca>(entity =>
            {
                entity.HasKey(e => new { e.CodPecaLista, e.CodPeca })
                    .HasName("PK__PecaListaPeca__5AC530DE");

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ValPeca).HasDefaultValueSql("((0))");

                entity.Property(e => e.ValPecaDolar).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.CodPecaNavigation)
                    .WithMany(p => p.PecaListaPecas)
                    .HasForeignKey(d => d.CodPeca)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__PecaLista__CodPe__5BB95517");

                entity.HasOne(d => d.CodPecaListaNavigation)
                    .WithMany(p => p.PecaListaPecas)
                    .HasForeignKey(d => d.CodPecaLista)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__PecaLista__CodPe__5CAD7950");
            });

            modelBuilder.Entity<PecaListum>(entity =>
            {
                entity.HasKey(e => e.CodPecaLista)
                    .HasName("PK__PecaLista__56007BC1");

                entity.Property(e => e.CodPecaLista).ValueGeneratedNever();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DescPecaLista).IsUnicode(false);

                entity.Property(e => e.NomePecaLista).IsUnicode(false);
            });

            modelBuilder.Entity<PecaRe5114>(entity =>
            {
                entity.HasKey(e => e.CodPecaRe5114)
                    .HasName("PK__PecaRE5114__4321E620");

                entity.HasIndex(e => new { e.CodPecaRe5114, e.CodPeca }, "_dta_index_PecaRE5114_7_1467256382__K1_K3_2_4_10")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodPecaRe5114, e.CodPeca }, "_dta_index_PecaRE5114_7_1467256382__K1_K3_2_4_10_11_12")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodPecaRe5114).ValueGeneratedNever();

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataManut).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IndSucata).HasDefaultValueSql("((0))");

                entity.Property(e => e.MotivoDevolucao).IsUnicode(false);

                entity.Property(e => e.MotivoSucata).IsUnicode(false);

                entity.Property(e => e.NumPecaCliente).IsUnicode(false);

                entity.Property(e => e.NumRe5114).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.HasOne(d => d.CodPecaNavigation)
                    .WithMany(p => p.PecaRe5114s)
                    .HasForeignKey(d => d.CodPeca)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PecaRE5114_Peca");
            });

            modelBuilder.Entity<PecaStatus>(entity =>
            {
                entity.HasKey(e => e.CodPecaStatus)
                    .HasName("PK__PecaStatus__0BC78F95");

                entity.Property(e => e.CodPecaStatus).ValueGeneratedNever();

                entity.Property(e => e.MsgStatus).IsUnicode(false);

                entity.Property(e => e.NomeStatus).IsUnicode(false);

                entity.Property(e => e.SiglaStatus).IsUnicode(false);
            });

            modelBuilder.Entity<PecaTeste>(entity =>
            {
                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DescrIngles).IsUnicode(false);

                entity.Property(e => e.IsValorAtualizado).HasComputedColumnSql("(case when datediff(day,getdate(),[DataHoraAtualizacaoValor])>(0) then (1) else (0) end)", false);

                entity.Property(e => e.Ncm).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);
            });

            modelBuilder.Entity<PecasChecklist>(entity =>
            {
                entity.HasKey(e => e.CodPecasChecklist)
                    .HasName("PK__PecasChe__DB1AFC8F0E039854");
            });

            modelBuilder.Entity<PecasLaboratorio>(entity =>
            {
                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.CodPecaStatus).HasDefaultValueSql("((1))");

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DescrIngles).IsUnicode(false);

                entity.Property(e => e.IsValorAtualizado).HasComputedColumnSql("(case when datediff(day,getdate(),[DataHoraAtualizacaoValor])>(0) then (1) else (0) end)", false);

                entity.Property(e => e.Ncm).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);

                entity.Property(e => e.QtdMinimaVenda).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<Pedido>(entity =>
            {
                entity.HasKey(e => e.CodPedido)
                    .HasName("PK__Pedido__6FF557EE");

                entity.HasIndex(e => e.CodPedido, "_dta_index_Pedido_7_461348808__K1_2_3_6_9_13")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodPedido).ValueGeneratedNever();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManutCliente).IsUnicode(false);

                entity.Property(e => e.NumOrdemCompra).IsUnicode(false);

                entity.Property(e => e.NumPedidoLogix).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.ObservacaoFinanceira).IsUnicode(false);

                entity.HasOne(d => d.CodFormaPagtoNavigation)
                    .WithMany(p => p.Pedidos)
                    .HasForeignKey(d => d.CodFormaPagto)
                    .HasConstraintName("FK__Pedido__CodForma__73C5E8D2");

                entity.HasOne(d => d.CodPedidoStatusNavigation)
                    .WithMany(p => p.Pedidos)
                    .HasForeignKey(d => d.CodPedidoStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Pedido__CodPedid__75AE3144");

                entity.HasOne(d => d.CodTipoFreteNavigation)
                    .WithMany(p => p.Pedidos)
                    .HasForeignKey(d => d.CodTipoFrete)
                    .HasConstraintName("FK_Pedido_TipoFrete");
            });

            modelBuilder.Entity<PedidoInvoice>(entity =>
            {
                entity.HasKey(e => e.CodPedidoInvoice)
                    .HasName("PK__PedidoInvoice__391A2450");

                entity.Property(e => e.CodPedidoInvoice).ValueGeneratedNever();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.CodUsuarioResponsavel).IsUnicode(false);

                entity.Property(e => e.DescAttDelivery).IsUnicode(false);

                entity.Property(e => e.DescAttInvoice).IsUnicode(false);

                entity.Property(e => e.DescCountryOrigin).IsUnicode(false);

                entity.Property(e => e.DescCovering).IsUnicode(false);

                entity.Property(e => e.DescCreditCard).IsUnicode(false);

                entity.Property(e => e.DescCreditLetter).IsUnicode(false);

                entity.Property(e => e.DescDeliveryTo).IsUnicode(false);

                entity.Property(e => e.DescFooter).IsUnicode(false);

                entity.Property(e => e.DescFrete).IsUnicode(false);

                entity.Property(e => e.DescIncoterms).IsUnicode(false);

                entity.Property(e => e.DescInvoiceTo).IsUnicode(false);

                entity.Property(e => e.DescMoeda).IsUnicode(false);

                entity.Property(e => e.DescOrder).IsUnicode(false);

                entity.Property(e => e.DescPrazo).IsUnicode(false);

                entity.Property(e => e.DescSeguro).IsUnicode(false);

                entity.Property(e => e.DescSigned).IsUnicode(false);

                entity.Property(e => e.DescTransfer).IsUnicode(false);

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("(1)");

                entity.HasOne(d => d.CodClienteDeliveryNavigation)
                    .WithMany(p => p.PedidoInvoices)
                    .HasForeignKey(d => d.CodClienteDelivery)
                    .HasConstraintName("FK__PedidoInvoice_Cliente");

                entity.HasOne(d => d.CodPedidoInvoiceStatusNavigation)
                    .WithMany(p => p.PedidoInvoices)
                    .HasForeignKey(d => d.CodPedidoInvoiceStatus)
                    .HasConstraintName("FK__PedidoInvoice_PedidoInvoiceStatus");

                entity.HasOne(d => d.CodTipoFreteNavigation)
                    .WithMany(p => p.PedidoInvoices)
                    .HasForeignKey(d => d.CodTipoFrete)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__PedidoInvoice_TipoFrete");

                entity.HasOne(d => d.CodUsuarioResponsavelNavigation)
                    .WithMany(p => p.PedidoInvoices)
                    .HasForeignKey(d => d.CodUsuarioResponsavel)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__PedidoInvoice_Usuario");
            });

            modelBuilder.Entity<PedidoInvoiceCc>(entity =>
            {
                entity.HasKey(e => e.CodPedidoInvoiceCc)
                    .HasName("PK__PedidoInvoiceCC__3B026CC2");

                entity.HasOne(d => d.CodContaCorrenteNavigation)
                    .WithMany(p => p.PedidoInvoiceCcs)
                    .HasForeignKey(d => d.CodContaCorrente)
                    .HasConstraintName("FK_PedidoInvoiceCC_ContaCorrente");

                entity.HasOne(d => d.CodPedidoInvoiceNavigation)
                    .WithMany(p => p.PedidoInvoiceCcs)
                    .HasForeignKey(d => d.CodPedidoInvoice)
                    .HasConstraintName("FK__PedidoInvoice_PedidoInvoiceCC");
            });

            modelBuilder.Entity<PedidoInvoiceEmbalagem>(entity =>
            {
                entity.HasKey(e => e.CodPedidoInvoiceEmbalagem)
                    .HasName("PK__PedidoInvoiceEmb__3CEAB534");

                entity.HasOne(d => d.CodEmbalagemNavigation)
                    .WithMany(p => p.PedidoInvoiceEmbalagems)
                    .HasForeignKey(d => d.CodEmbalagem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PedidoInvoiceEmbalagem_Embalagem");

                entity.HasOne(d => d.CodPedidoInvoiceNavigation)
                    .WithMany(p => p.PedidoInvoiceEmbalagems)
                    .HasForeignKey(d => d.CodPedidoInvoice)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PedidoInvoiceEmbalagem_PedidoInvoice");
            });

            modelBuilder.Entity<PedidoInvoicePeca>(entity =>
            {
                entity.HasKey(e => new { e.CodPedidoInvoice, e.CodPedidoPeca })
                    .HasName("PK__PedidoInvoicePec__3ED2FDA6");

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.DescPeca).IsUnicode(false);

                entity.HasOne(d => d.CodPedidoInvoiceNavigation)
                    .WithMany(p => p.PedidoInvoicePecas)
                    .HasForeignKey(d => d.CodPedidoInvoice)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PedidoInvoicePeca_PedidoInvoice");

                entity.HasOne(d => d.CodPedidoPecaNavigation)
                    .WithMany(p => p.PedidoInvoicePecas)
                    .HasForeignKey(d => d.CodPedidoPeca)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PedidoInvoicePeca_PedidoPeca");
            });

            modelBuilder.Entity<PedidoInvoiceStatus>(entity =>
            {
                entity.HasKey(e => e.CodPedidoInvoiceStatus)
                    .HasName("PK__PedidoInvoiceSta__363DB7A5");

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("(1)");

                entity.Property(e => e.NomeStatus).IsUnicode(false);
            });

            modelBuilder.Entity<PedidoNfpeca>(entity =>
            {
                entity.HasKey(e => new { e.CodSolicitacaoNf, e.CodPedidoPeca })
                    .HasName("PK__PedidoNFPeca__7A92E1F2");

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.CodPecaNavigation)
                    .WithMany(p => p.PedidoNfpecas)
                    .HasForeignKey(d => d.CodPeca)
                    .HasConstraintName("FK__PedidoNFP__CodPe__7E6372D6");

                entity.HasOne(d => d.CodPedidoNavigation)
                    .WithMany(p => p.PedidoNfpecas)
                    .HasForeignKey(d => d.CodPedido)
                    .HasConstraintName("FK__PedidoNFP__CodPe__7D6F4E9D");

                entity.HasOne(d => d.CodPedidoPecaNavigation)
                    .WithMany(p => p.PedidoNfpecas)
                    .HasForeignKey(d => d.CodPedidoPeca)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PedidoNFPeca_PedidoPeca");

                entity.HasOne(d => d.CodSolicitacaoNfNavigation)
                    .WithMany(p => p.PedidoNfpecas)
                    .HasForeignKey(d => d.CodSolicitacaoNf)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__PedidoNFP__CodSo__7F57970F");
            });

            modelBuilder.Entity<PedidoPeca>(entity =>
            {
                entity.HasKey(e => e.CodPedidoPeca)
                    .HasName("PK__PedidoPeca__7B670A9A");

                entity.HasIndex(e => e.CodPedido, "_dta_index_PedidoPeca_7_2047450468__K2_3_5")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodPedido, e.QtdSolicitada }, "_dta_index_PedidoPeca_7_2047450468__K2_K4_1")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.CodPecaNavigation)
                    .WithMany(p => p.PedidoPecas)
                    .HasForeignKey(d => d.CodPeca)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__PedidoPec__CodPe__7D4F530C");

                entity.HasOne(d => d.CodPedidoNavigation)
                    .WithMany(p => p.PedidoPecas)
                    .HasForeignKey(d => d.CodPedido)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__PedidoPec__CodPe__7C5B2ED3");

                entity.HasOne(d => d.CodPedidoPecaStatusNavigation)
                    .WithMany(p => p.PedidoPecas)
                    .HasForeignKey(d => d.CodPedidoPecaStatus)
                    .HasConstraintName("FK_PedidoPeca_PedidoPecaStatus");

                entity.HasOne(d => d.CodTipoDescontoNavigation)
                    .WithMany(p => p.PedidoPecas)
                    .HasForeignKey(d => d.CodTipoDesconto)
                    .HasConstraintName("FK_PedidoPeca_TipoDesconto");
            });

            modelBuilder.Entity<PedidoPecaLote>(entity =>
            {
                entity.Property(e => e.CodPedidoPecaLote).ValueGeneratedNever();

                entity.Property(e => e.ObservacaoLote).IsUnicode(false);

                entity.HasOne(d => d.CodPecaNavigation)
                    .WithMany(p => p.PedidoPecaLotes)
                    .HasForeignKey(d => d.CodPeca)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PedidoPecaLote_Peca");

                entity.HasOne(d => d.CodPedidoNavigation)
                    .WithMany(p => p.PedidoPecaLotes)
                    .HasForeignKey(d => d.CodPedido)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PedidoPecaLote_Pedido");
            });

            modelBuilder.Entity<PedidoPecaOb>(entity =>
            {
                entity.HasKey(e => e.CodPedidoPecaObs)
                    .HasName("PK__PedidoPecaObs__7D1A48E2");

                entity.Property(e => e.CodPedidoPecaObs).ValueGeneratedNever();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("((1))");

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.HasOne(d => d.CodPedidoPecaNavigation)
                    .WithMany(p => p.PedidoPecaObs)
                    .HasForeignKey(d => d.CodPedidoPeca)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PedidoPecaObs_PedidoPeca");
            });

            modelBuilder.Entity<PedidoPecaPcp>(entity =>
            {
                entity.HasKey(e => e.CodPedidoPecaPcp)
                    .HasName("PK__PedidoPecaPCP__23FF0BD9");

                entity.Property(e => e.CodPedidoPecaPcp).ValueGeneratedNever();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("((1))");

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.HasOne(d => d.CodPedidoPecaNavigation)
                    .WithMany(p => p.PedidoPecaPcps)
                    .HasForeignKey(d => d.CodPedidoPeca)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PedidoPecaPCP_PedidoPeca");
            });

            modelBuilder.Entity<PedidoPecaStatus>(entity =>
            {
                entity.HasKey(e => e.CodPedidoPecaStatus)
                    .HasName("PK__PedidoPecaStatus__14F1D273");

                entity.Property(e => e.CodPedidoPecaStatus).ValueGeneratedNever();

                entity.Property(e => e.NomeStatus).IsUnicode(false);

                entity.Property(e => e.SiglaStatus).IsUnicode(false);
            });

            modelBuilder.Entity<PedidoStatus>(entity =>
            {
                entity.HasKey(e => e.CodPedidoStatus)
                    .HasName("PK__PedidoStatus__5911F296");

                entity.Property(e => e.CodPedidoStatus).ValueGeneratedNever();

                entity.Property(e => e.NomeStatus).IsUnicode(false);
            });

            modelBuilder.Entity<Perfil>(entity =>
            {
                entity.HasKey(e => e.CodPerfil)
                    .HasName("PK__Perfil__797309D9");

                entity.Property(e => e.CodPerfil).ValueGeneratedNever();

                entity.Property(e => e.CodSistema).HasComment("DELETE");

                entity.Property(e => e.DescPerfil).IsUnicode(false);

                entity.Property(e => e.IndResumo).HasDefaultValueSql("(0)");

                entity.Property(e => e.NomePerfil).IsUnicode(false);

                entity.HasOne(d => d.CodSistemaNavigation)
                    .WithMany(p => p.Perfils)
                    .HasForeignKey(d => d.CodSistema)
                    .HasConstraintName("FK__Perfil__CodSiste__3E1D39E1");
            });

            modelBuilder.Entity<PerfilMenu>(entity =>
            {
                entity.HasKey(e => new { e.CodPerfil, e.CodMenu });

                entity.Property(e => e.CodSistema).HasComment("DELETE");

                entity.HasOne(d => d.CodMenuNavigation)
                    .WithMany(p => p.PerfilMenus)
                    .HasForeignKey(d => d.CodMenu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PerfilMenu_Menu");

                entity.HasOne(d => d.CodPerfilNavigation)
                    .WithMany(p => p.PerfilMenus)
                    .HasForeignKey(d => d.CodPerfil)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PerfilMenu_Perfil");
            });

            modelBuilder.Entity<PerfilSeguranca>(entity =>
            {
                entity.Property(e => e.CodPerfil).ValueGeneratedNever();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.QuantidadeMaximaTentativaLogin).HasDefaultValueSql("((3))");
            });

            modelBuilder.Entity<PerformanceCliente>(entity =>
            {
                entity.Property(e => e.CodPerformanceCliente).ValueGeneratedOnAdd();

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<PerformanceClienteEquipamento>(entity =>
            {
                entity.Property(e => e.CodPerformanceCliente).ValueGeneratedOnAdd();

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<PerformanceDistribuicaoChamadosCausaExtraMaquina>(entity =>
            {
                entity.Property(e => e.CodPerformanceDistribuicaoChamadosCausaExtraMaquina).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<PerformanceDistribuicaoChamadosCausaExtraMaquinaBbgarantia2>(entity =>
            {
                entity.Property(e => e.CodPerformanceDistribuicaoChamadosCausaExtraMaquina2).ValueGeneratedOnAdd();

                entity.Property(e => e.Modelo).IsUnicode(false);
            });

            modelBuilder.Entity<PerformanceDistribuicaoChamadosCausaExtraMaquinaBbgarantium>(entity =>
            {
                entity.Property(e => e.CodPerformanceDistribuicaoChamadosCausaExtraMaquina).ValueGeneratedOnAdd();

                entity.Property(e => e.Modelo).IsUnicode(false);
            });

            modelBuilder.Entity<PerformanceDistribuicaoChamadosCausaExtraMaquinaBbtecno>(entity =>
            {
                entity.Property(e => e.CodPerformanceDistribuicaoChamadosCausaExtraMaquina).ValueGeneratedOnAdd();

                entity.Property(e => e.Modelo).IsUnicode(false);
            });

            modelBuilder.Entity<PerformanceDistribuicaoChamadosCausaExtraMaquinaBbtecno2>(entity =>
            {
                entity.Property(e => e.CodPerformanceDistribuicaoChamadosCausaExtraMaquina2).ValueGeneratedOnAdd();

                entity.Property(e => e.Modelo).IsUnicode(false);
            });

            modelBuilder.Entity<PerformanceDistribuicaoChamadosCausaGeral>(entity =>
            {
                entity.Property(e => e.CodPerformanceDistribuicaoChamadosCausaMaquina).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<PerformanceDistribuicaoChamadosCausaGeralBbgarantia2>(entity =>
            {
                entity.Property(e => e.CodPerformanceDistribuicaoChamadosCausaMaquina2).ValueGeneratedOnAdd();

                entity.Property(e => e.Modelo).IsUnicode(false);
            });

            modelBuilder.Entity<PerformanceDistribuicaoChamadosCausaGeralBbgarantium>(entity =>
            {
                entity.Property(e => e.CodPerformanceDistribuicaoChamadosCausaMaquina).ValueGeneratedOnAdd();

                entity.Property(e => e.Modelo).IsUnicode(false);
            });

            modelBuilder.Entity<PerformanceDistribuicaoChamadosCausaGeralBbtecno>(entity =>
            {
                entity.Property(e => e.CodPerformanceDistribuicaoChamadosCausaMaquina).ValueGeneratedOnAdd();

                entity.Property(e => e.Modelo).IsUnicode(false);
            });

            modelBuilder.Entity<PerformanceDistribuicaoChamadosCausaGeralBbtecno2>(entity =>
            {
                entity.Property(e => e.CodPerformanceDistribuicaoChamadosCausaMaquina2).ValueGeneratedOnAdd();

                entity.Property(e => e.Modelo).IsUnicode(false);
            });

            modelBuilder.Entity<PerformanceDistribuicaoChamadosCausaMaquina>(entity =>
            {
                entity.Property(e => e.CodPerformanceDistribuicaoChamadosCausaMaquina).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<PerformanceDistribuicaoChamadosCausaMaquinaBbgarantia2>(entity =>
            {
                entity.Property(e => e.CodPerformanceDistribuicaoChamadosCausaMaquina2).ValueGeneratedOnAdd();

                entity.Property(e => e.Modelo).IsUnicode(false);
            });

            modelBuilder.Entity<PerformanceDistribuicaoChamadosCausaMaquinaBbgarantium>(entity =>
            {
                entity.Property(e => e.CodPerformanceDistribuicaoChamadosCausaMaquina).ValueGeneratedOnAdd();

                entity.Property(e => e.Modelo).IsUnicode(false);
            });

            modelBuilder.Entity<PerformanceDistribuicaoChamadosCausaMaquinaBbtecno>(entity =>
            {
                entity.Property(e => e.CodPerformanceDistribuicaoChamadosCausaMaquina).ValueGeneratedOnAdd();

                entity.Property(e => e.Modelo).IsUnicode(false);
            });

            modelBuilder.Entity<PerformanceDistribuicaoChamadosCausaMaquinaBbtecno2>(entity =>
            {
                entity.Property(e => e.CodPerformanceDistribuicaoChamadosCausaMaquina2).ValueGeneratedOnAdd();

                entity.Property(e => e.Modelo).IsUnicode(false);
            });

            modelBuilder.Entity<PerformanceEvolucaodoParque>(entity =>
            {
                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.CodPerformanceEvolucaodoParque).ValueGeneratedOnAdd();

                entity.Property(e => e.Modelo).IsUnicode(false);
            });

            modelBuilder.Entity<PerformanceEvolucaodoParqueBbgarantiaT>(entity =>
            {
                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.CodPerformanceEvolucaodoParqueT).ValueGeneratedOnAdd();

                entity.Property(e => e.Modelo).IsUnicode(false);
            });

            modelBuilder.Entity<PerformanceEvolucaodoParqueBbgarantium>(entity =>
            {
                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.CodPerformanceEvolucaodoParque).ValueGeneratedOnAdd();

                entity.Property(e => e.Modelo).IsUnicode(false);
            });

            modelBuilder.Entity<PerformanceEvolucaodoParqueBbtecno>(entity =>
            {
                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.CodPerformanceEvolucaodoParque).ValueGeneratedOnAdd();

                entity.Property(e => e.Modelo).IsUnicode(false);
            });

            modelBuilder.Entity<PerformanceHistoricoSlaMensal>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<PerformanceHistoricoSlaMensalBbgarantium>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<PerformanceHistoricoSlaMensalBbtecno>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<PerformanceIndiceDeSolucao>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<PerformanceIndiceDeSolucaoBbgarantium>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<PerformanceIndiceDeSolucaoBbtecno>(entity =>
            {
                entity.Property(e => e.Ano).IsUnicode(false);

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);
            });

            modelBuilder.Entity<PerformanceIndiceParqueQuebraEquipamento>(entity =>
            {
                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.CodPerformanceIndiceQuebra).ValueGeneratedOnAdd();

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.Tipo).IsUnicode(false);
            });

            modelBuilder.Entity<PerformanceIndiceParqueQuebraEquipamentoBbgarantiaT>(entity =>
            {
                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.CodPerformanceIndiceQuebraT).ValueGeneratedOnAdd();

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.Tipo).IsUnicode(false);
            });

            modelBuilder.Entity<PerformanceIndiceParqueQuebraEquipamentoBbgarantium>(entity =>
            {
                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.CodPerformanceIndiceQuebra).ValueGeneratedOnAdd();

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.Tipo).IsUnicode(false);
            });

            modelBuilder.Entity<PerformanceIndiceParqueQuebraEquipamentoBbtecno>(entity =>
            {
                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.CodPerformanceIndiceQuebra).ValueGeneratedOnAdd();

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.Tipo).IsUnicode(false);
            });

            modelBuilder.Entity<PerformanceIndiceQuebra>(entity =>
            {
                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.CodPerformanceIndiceQuebra).ValueGeneratedOnAdd();

                entity.Property(e => e.Tipo).IsUnicode(false);
            });

            modelBuilder.Entity<PerformanceIndiceQuebraBbgarantium>(entity =>
            {
                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.CodPerformanceIndiceQuebra).ValueGeneratedOnAdd();

                entity.Property(e => e.Tipo).IsUnicode(false);
            });

            modelBuilder.Entity<PerformanceIndiceQuebraBbtecno>(entity =>
            {
                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.CodPerformanceIndiceQuebra).ValueGeneratedOnAdd();

                entity.Property(e => e.Tipo).IsUnicode(false);
            });

            modelBuilder.Entity<PerformanceIndiceQuebraBbtecno2>(entity =>
            {
                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.CodPerformanceIndiceQuebra).ValueGeneratedOnAdd();

                entity.Property(e => e.Tipo).IsUnicode(false);
            });

            modelBuilder.Entity<PerformanceIndiceQuebraEquipamento>(entity =>
            {
                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.CodPerformanceIndiceQuebra).ValueGeneratedOnAdd();

                entity.Property(e => e.Tipo).IsUnicode(false);
            });

            modelBuilder.Entity<PerformanceIndiceQuebraEquipamentoBbgarantiaT>(entity =>
            {
                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.CodPerformanceIndiceQuebraT).ValueGeneratedOnAdd();

                entity.Property(e => e.Tipo).IsUnicode(false);
            });

            modelBuilder.Entity<PerformanceIndiceQuebraEquipamentoBbgarantium>(entity =>
            {
                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.CodPerformanceIndiceQuebra).ValueGeneratedOnAdd();

                entity.Property(e => e.Tipo).IsUnicode(false);
            });

            modelBuilder.Entity<PerformanceIndiceQuebraEquipamentoBbtecno>(entity =>
            {
                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.CodPerformanceIndiceQuebra).ValueGeneratedOnAdd();

                entity.Property(e => e.Tipo).IsUnicode(false);
            });

            modelBuilder.Entity<PerformanceOfensore>(entity =>
            {
                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Causa).IsUnicode(false);

                entity.Property(e => e.CodPerformanceOfensores).ValueGeneratedOnAdd();

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.Tipo).IsUnicode(false);
            });

            modelBuilder.Entity<PerformanceOfensoresBbgarantiaT>(entity =>
            {
                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Causa).IsUnicode(false);

                entity.Property(e => e.CodPerformanceOfensoresT).ValueGeneratedOnAdd();

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.Tipo).IsUnicode(false);
            });

            modelBuilder.Entity<PerformanceOfensoresBbgarantium>(entity =>
            {
                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Causa).IsUnicode(false);

                entity.Property(e => e.CodPerformanceOfensores).ValueGeneratedOnAdd();

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.Tipo).IsUnicode(false);
            });

            modelBuilder.Entity<PerformanceOfensoresBbtecno>(entity =>
            {
                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Causa).IsUnicode(false);

                entity.Property(e => e.CodPerformanceOfensores).ValueGeneratedOnAdd();

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.Tipo).IsUnicode(false);
            });

            modelBuilder.Entity<PlanejamentoFuturo>(entity =>
            {
                entity.Property(e => e.CodPlanejamento).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<PlantaoTecnico>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.HasOne(d => d.CodTecnicoNavigation)
                    .WithMany(p => p.PlantaoTecnicos)
                    .HasForeignKey(d => d.CodTecnico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PlantaoTecnico_Tecnico");
            });

            modelBuilder.Entity<PlantaoTecnicoCliente>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.HasOne(d => d.CodClienteNavigation)
                    .WithMany(p => p.PlantaoTecnicoClientes)
                    .HasForeignKey(d => d.CodCliente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PlantaoTecnicoCliente_Cliente");

                entity.HasOne(d => d.CodPlantaoTecnicoNavigation)
                    .WithMany(p => p.PlantaoTecnicoClientes)
                    .HasForeignKey(d => d.CodPlantaoTecnico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PlantaoTecnicoCliente_Tecnico");
            });

            modelBuilder.Entity<PlantaoTecnicoRegiao>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.HasOne(d => d.CodPlantaoTecnicoNavigation)
                    .WithMany(p => p.PlantaoTecnicoRegiaos)
                    .HasForeignKey(d => d.CodPlantaoTecnico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PlantaoTecnicoRegiao_Tecnico");

                entity.HasOne(d => d.CodRegiaoNavigation)
                    .WithMany(p => p.PlantaoTecnicoRegiaos)
                    .HasForeignKey(d => d.CodRegiao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PlantaoTecnicoRegiao_Regiao");
            });

            modelBuilder.Entity<Ponto>(entity =>
            {
                entity.HasKey(e => e.CodPonto)
                    .HasName("PK__Ponto__0C9BB83D");

                entity.HasIndex(e => new { e.DataHoraInicio, e.CodPontoTipoHora, e.IndAtivo }, "IX_PONTO_CODPONTOTIPHORA")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodUsuario, e.CodPontoPeriodo, e.CodPontoTipoHora, e.IndAtivo, e.DataHoraInicio, e.DataHoraFim }, "IX_PONTO_COLUMNS")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodUsuario, "_dta_index_Ponto_9_449709696__K2_3_7_8_9")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodPonto).ValueGeneratedNever();

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.CodUsuarioAprov).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("((1))");

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.HasOne(d => d.CodPontoPeriodoNavigation)
                    .WithMany(p => p.Pontos)
                    .HasForeignKey(d => d.CodPontoPeriodo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Ponto__CodPontoP__0E8400AF");

                entity.HasOne(d => d.CodPontoTipoHoraNavigation)
                    .WithMany(p => p.Pontos)
                    .HasForeignKey(d => d.CodPontoTipoHora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Ponto__CodPontoT__0F7824E8");

                entity.HasOne(d => d.CodUsuarioNavigation)
                    .WithMany(p => p.Pontos)
                    .HasForeignKey(d => d.CodUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ponto_Usuario");
            });

            modelBuilder.Entity<PontoColaborador>(entity =>
            {
                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.CodUsuarioAprov).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.HasOne(d => d.CodPontoPeriodoNavigation)
                    .WithMany(p => p.PontoColaboradors)
                    .HasForeignKey(d => d.CodPontoPeriodo)
                    .HasConstraintName("FK_PontoColaborador_PontoPeriodo");

                entity.HasOne(d => d.CodPontoTipoHoraNavigation)
                    .WithMany(p => p.PontoColaboradors)
                    .HasForeignKey(d => d.CodPontoTipoHora)
                    .HasConstraintName("FK_PontoColaborador_PontoTipoHora");

                entity.HasOne(d => d.CodUsuarioNavigation)
                    .WithMany(p => p.PontoColaboradors)
                    .HasForeignKey(d => d.CodUsuario)
                    .HasConstraintName("FK_PontoColaborador_Usuario");
            });

            modelBuilder.Entity<PontoMovel>(entity =>
            {
                entity.HasIndex(e => e.CodUsuario, "IX_PONTEMOVEL_CODUSU")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodPontoMovel, e.CodPontoMovelTipoHorario, e.CodUsuario, e.CodPontoPeriodo, e.DataHoraRegistro }, "IX_PontoMovel")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.HasOne(d => d.CodPontoMovelTipoHorarioNavigation)
                    .WithMany(p => p.PontoMovels)
                    .HasForeignKey(d => d.CodPontoMovelTipoHorario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PontoMovel_PontoMovelTipoHorario");

                entity.HasOne(d => d.CodPontoPeriodoNavigation)
                    .WithMany(p => p.PontoMovels)
                    .HasForeignKey(d => d.CodPontoPeriodo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PontoMovel_PontoPeriodo");

                entity.HasOne(d => d.CodUsuarioNavigation)
                    .WithMany(p => p.PontoMovels)
                    .HasForeignKey(d => d.CodUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PontoMovel_Usuario");
            });

            modelBuilder.Entity<PontoMovelTipoHorario>(entity =>
            {
                entity.HasKey(e => e.CodPontoMovelTipoHorario)
                    .HasName("PK_PontoTipoHorario");

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<PontoPeriodo>(entity =>
            {
                entity.HasKey(e => e.CodPontoPeriodo)
                    .HasName("PK__PontoPeriodo__7128A7F2");

                entity.HasIndex(e => e.CodPontoPeriodoStatus, "IX_PontoPeriodo_CodPontoPeriodoStatus")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodPontoPeriodo).ValueGeneratedNever();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.CodPontoPeriodoIntervaloAcessoDataNavigation)
                    .WithMany(p => p.PontoPeriodos)
                    .HasForeignKey(d => d.CodPontoPeriodoIntervaloAcessoData)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PontoPeriodo_PontoPeriodoIntervaloAcessoData");

                entity.HasOne(d => d.CodPontoPeriodoModoAprovacaoNavigation)
                    .WithMany(p => p.PontoPeriodos)
                    .HasForeignKey(d => d.CodPontoPeriodoModoAprovacao)
                    .HasConstraintName("FK_PontoPeriodo_PontoPeriodoModoAprovacao");

                entity.HasOne(d => d.CodPontoPeriodoStatusNavigation)
                    .WithMany(p => p.PontoPeriodos)
                    .HasForeignKey(d => d.CodPontoPeriodoStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__PontoPeri__CodPo__7AB2122C");
            });

            modelBuilder.Entity<PontoPeriodoIntervaloAcessoDatum>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<PontoPeriodoModoAprovacao>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<PontoPeriodoStatus>(entity =>
            {
                entity.HasKey(e => e.CodPontoPeriodoStatus)
                    .HasName("PK__PontoPeriodoStat__6E4C3B47");

                entity.Property(e => e.CodPontoPeriodoStatus).ValueGeneratedNever();

                entity.Property(e => e.NomePeriodoStatus).IsUnicode(false);
            });

            modelBuilder.Entity<PontoPeriodoUsuario>(entity =>
            {
                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.HasOne(d => d.CodPontoPeriodoNavigation)
                    .WithMany(p => p.PontoPeriodoUsuarios)
                    .HasForeignKey(d => d.CodPontoPeriodo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PontoPeriodoUsuario_PontoPeriodo");

                entity.HasOne(d => d.CodPontoPeriodoUsuarioStatusNavigation)
                    .WithMany(p => p.PontoPeriodoUsuarios)
                    .HasForeignKey(d => d.CodPontoPeriodoUsuarioStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PontoPeriodoUsuario_PontoPeriodoUsuarioStatus");
            });

            modelBuilder.Entity<PontoPeriodoUsuarioStatus>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<PontoSobreAviso>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.CodUsuarioPonto).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.HasOne(d => d.CodPontoPeriodoNavigation)
                    .WithMany(p => p.PontoSobreAvisos)
                    .HasForeignKey(d => d.CodPontoPeriodo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PontoSobreAviso_PontoPeriodo");

                entity.HasOne(d => d.CodUsuarioPontoNavigation)
                    .WithMany(p => p.PontoSobreAvisos)
                    .HasForeignKey(d => d.CodUsuarioPonto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PontoSobreAviso_Usuario");
            });

            modelBuilder.Entity<PontoTipoHora>(entity =>
            {
                entity.HasKey(e => e.CodPontoTipoHora)
                    .HasName("PK__PontoTipoHora__7405149D");

                entity.Property(e => e.CodPontoTipoHora).ValueGeneratedNever();

                entity.Property(e => e.NomeTipoHora).IsUnicode(false);
            });

            modelBuilder.Entity<PontoUsuario>(entity =>
            {
                entity.HasIndex(e => e.DataHoraRegistro, "IX_PONTOUSUARIO_DT_CODUSUARIO")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.CodUsuarioAprov).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("((1))");

                entity.Property(e => e.IndRevisado).HasDefaultValueSql("((0))");

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.HasOne(d => d.CodPontoPeriodoNavigation)
                    .WithMany(p => p.PontoUsuarios)
                    .HasForeignKey(d => d.CodPontoPeriodo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PontoUsuario_PontoPeriodo");

                entity.HasOne(d => d.CodUsuarioNavigation)
                    .WithMany(p => p.PontoUsuarios)
                    .HasForeignKey(d => d.CodUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PontoUsuario_Usuario");
            });

            modelBuilder.Entity<PontoUsuarioDataAdvertencium>(entity =>
            {
                entity.Property(e => e.CodUsuarioAdvertido).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.HasOne(d => d.CodPontoUsuarioDataNavigation)
                    .WithMany(p => p.PontoUsuarioDataAdvertencia)
                    .HasForeignKey(d => d.CodPontoUsuarioData)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PontoUsuarioDataAdvertencia_PontoUsuarioData");

                entity.HasOne(d => d.CodPontoUsuarioDataTipoAdvertenciaNavigation)
                    .WithMany(p => p.PontoUsuarioDataAdvertencia)
                    .HasForeignKey(d => d.CodPontoUsuarioDataTipoAdvertencia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PontoUsuarioDataAdvertencia_PontoUsuarioDataTipoAdvertencia");
            });

            modelBuilder.Entity<PontoUsuarioDataControleAlteracaoAcesso>(entity =>
            {
                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.HasOne(d => d.CodPontoUsuarioDataNavigation)
                    .WithMany(p => p.PontoUsuarioDataControleAlteracaoAcessos)
                    .HasForeignKey(d => d.CodPontoUsuarioData)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PontoUsuarioDataControleAlteracaoAcesso_PontoUsuarioData");

                entity.HasOne(d => d.CodPontoUsuarioDataJustificativaAlteracaoAcessoNavigation)
                    .WithMany(p => p.PontoUsuarioDataControleAlteracaoAcessos)
                    .HasForeignKey(d => d.CodPontoUsuarioDataJustificativaAlteracaoAcesso)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PontoUsuarioDataControleAlteracaoAcesso_PontoUsuarioDataJustificativaAlteracaoAcesso");

                entity.HasOne(d => d.CodPontoUsuarioDataModoAlteracaoAcessoNavigation)
                    .WithMany(p => p.PontoUsuarioDataControleAlteracaoAcessos)
                    .HasForeignKey(d => d.CodPontoUsuarioDataModoAlteracaoAcesso)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PontoUsuarioDataControleAlteracaoAcesso_PontoUsuarioDataModoAlteracaoAcesso");

                entity.HasOne(d => d.CodPontoUsuarioDataStatusAcessoNavigation)
                    .WithMany(p => p.PontoUsuarioDataControleAlteracaoAcessos)
                    .HasForeignKey(d => d.CodPontoUsuarioDataStatusAcesso)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PontoUsuarioDataControleAlteracaoAcesso_PontoUsuarioDataStatusAcesso");
            });

            modelBuilder.Entity<PontoUsuarioDataDivergenciaObservacao>(entity =>
            {
                entity.HasKey(e => e.CodPontoUsuarioDataDivergenciaObservacao)
                    .HasName("PK_PontoUsuarioObservacao");

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.Descricao).IsUnicode(false);

                entity.HasOne(d => d.CodPontoUsuarioDataDivergenciaNavigation)
                    .WithMany(p => p.PontoUsuarioDataDivergenciaObservacaos)
                    .HasForeignKey(d => d.CodPontoUsuarioDataDivergencia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PontoUsuarioDataDivergenciaObservacao_PontoUsuarioDataDivergencia");
            });

            modelBuilder.Entity<PontoUsuarioDataDivergenciaRat>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.HasOne(d => d.CodPontoUsuarioDataNavigation)
                    .WithMany(p => p.PontoUsuarioDataDivergenciaRats)
                    .HasForeignKey(d => d.CodPontoUsuarioData)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PontoUsuarioDataDivergenciaRat_PontoUsuarioData");
            });

            modelBuilder.Entity<PontoUsuarioDataDivergencium>(entity =>
            {
                entity.HasIndex(e => e.DataHoraCad, "IDX_PONTOUSUARIODATADIVERGENCIA_DATAHORACAD")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodPontoUsuarioDataModoDivergencia).HasDefaultValueSql("((1))");

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.HasOne(d => d.CodPontoUsuarioDataNavigation)
                    .WithMany(p => p.PontoUsuarioDataDivergencia)
                    .HasForeignKey(d => d.CodPontoUsuarioData)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PontoUsuarioDataDivergencia_PontoUsuarioData");

                entity.HasOne(d => d.CodPontoUsuarioDataModoDivergenciaNavigation)
                    .WithMany(p => p.PontoUsuarioDataDivergencia)
                    .HasForeignKey(d => d.CodPontoUsuarioDataModoDivergencia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PontoUsuarioDataDivergencia_PontoUsuarioDataModoDivergencia");

                entity.HasOne(d => d.CodPontoUsuarioDataMotivoDivergenciaNavigation)
                    .WithMany(p => p.PontoUsuarioDataDivergencia)
                    .HasForeignKey(d => d.CodPontoUsuarioDataMotivoDivergencia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PontoUsuarioDataDivergencia_PontoUsuarioDataMotivoDivergencia");
            });

            modelBuilder.Entity<PontoUsuarioDataJustificativaAlteracaoAcesso>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<PontoUsuarioDataJustificativaValidacao>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<PontoUsuarioDataModoAlteracaoAcesso>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<PontoUsuarioDataModoDivergencium>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<PontoUsuarioDataMotivoDivergencium>(entity =>
            {
                entity.HasKey(e => e.CodPontoUsuarioDataMotivoDivergencia)
                    .HasName("PK_PontoUsuarioMotivoDivergencia");

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<PontoUsuarioDataStatus>(entity =>
            {
                entity.HasKey(e => e.CodPontoUsuarioDataStatus)
                    .HasName("PK_PontoUsuarioTipoAprovacao");

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<PontoUsuarioDataStatusAcesso>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<PontoUsuarioDataTipoAdvertencium>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<PontoUsuarioDataValidacao>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.HasOne(d => d.CodPontoUsuarioDataNavigation)
                    .WithMany(p => p.PontoUsuarioDataValidacaos)
                    .HasForeignKey(d => d.CodPontoUsuarioData)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PontoUsuarioDataValidacao_PontoUsuarioData");

                entity.HasOne(d => d.CodPontoUsuarioDataJustificativaValidacaoNavigation)
                    .WithMany(p => p.PontoUsuarioDataValidacaos)
                    .HasForeignKey(d => d.CodPontoUsuarioDataJustificativaValidacao)
                    .HasConstraintName("FK_PontoUsuarioDataValidacao_PontoUsuarioDataJustificativaValidacao");
            });

            modelBuilder.Entity<PontoUsuarioDatum>(entity =>
            {
                entity.HasKey(e => e.CodPontoUsuarioData)
                    .HasName("PK_PontoUsuarioDataSituacao");

                entity.HasIndex(e => e.DataHoraCad, "IDX_PONTOUSUARIODATA_DATAHORACAD")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodPontoUsuarioDataStatusAcesso).HasDefaultValueSql("((2))");

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.HasOne(d => d.CodPontoPeriodoNavigation)
                    .WithMany(p => p.PontoUsuarioData)
                    .HasForeignKey(d => d.CodPontoPeriodo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PontoUsuarioData_PontoPeriodo");

                entity.HasOne(d => d.CodPontoUsuarioDataStatusNavigation)
                    .WithMany(p => p.PontoUsuarioData)
                    .HasForeignKey(d => d.CodPontoUsuarioDataStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PontoUsuarioData_PontoUsuarioDataStatus");

                entity.HasOne(d => d.CodPontoUsuarioDataStatusAcessoNavigation)
                    .WithMany(p => p.PontoUsuarioData)
                    .HasForeignKey(d => d.CodPontoUsuarioDataStatusAcesso)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PontoUsuarioData_PontoUsuarioDataStatusAcesso");
            });

            modelBuilder.Entity<PontoUsuarioRejeicao>(entity =>
            {
                entity.Property(e => e.ChaveSeguranca).IsUnicode(false);

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.ImeiCriptografado).IsUnicode(false);
            });

            modelBuilder.Entity<PosCpfcnpj>(entity =>
            {
                entity.Property(e => e.Cpfcnpj).IsUnicode(false);
            });

            modelBuilder.Entity<Poslogix>(entity =>
            {
                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.Estabelecimento).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.Observaçao).IsUnicode(false);

                entity.Property(e => e.Operacao).IsUnicode(false);

                entity.Property(e => e.Pagamento).IsUnicode(false);

                entity.Property(e => e.Valorarquivo).IsUnicode(false);

                entity.Property(e => e.Valorreceber).IsUnicode(false);
            });

            modelBuilder.Entity<PosvendaBanrisul>(entity =>
            {
                entity.HasIndex(e => e.CodUsuarioCadastro, "IX_POSVendaBanrisul")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NumeroNotaFiscal, "IX_POSVendaBanrisul_1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodUsuarioDesativacao, "IX_POSVendaBanrisul_2")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.CodUsuarioDesativacao).IsUnicode(false);

                entity.Property(e => e.NumeroNotaFiscal).IsUnicode(false);

                entity.Property(e => e.NumeroSerie).IsUnicode(false);

                entity.Property(e => e.Patrimonio).IsUnicode(false);

                entity.Property(e => e.SerieNotaFiscal).IsUnicode(false);

                entity.Property(e => e.Versao).IsUnicode(false);

                entity.HasOne(d => d.CodUsuarioCadastroNavigation)
                    .WithMany(p => p.PosvendaBanrisulCodUsuarioCadastroNavigations)
                    .HasForeignKey(d => d.CodUsuarioCadastro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POSVendaBanrisul_Usuario");

                entity.HasOne(d => d.CodUsuarioDesativacaoNavigation)
                    .WithMany(p => p.PosvendaBanrisulCodUsuarioDesativacaoNavigations)
                    .HasForeignKey(d => d.CodUsuarioDesativacao)
                    .HasConstraintName("FK_POSVendaBanrisul_Usuario1");
            });

            modelBuilder.Entity<Preventiva>(entity =>
            {
                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.Ativo).IsUnicode(false);

                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.Cnpj).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.Contrato).IsUnicode(false);

                entity.Property(e => e.CronogramaInstalacao).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Dc).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.DtHrOs).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.Equipamento).IsUnicode(false);

                entity.Property(e => e.Faturamento).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Id).IsUnicode(false);

                entity.Property(e => e.Local).IsUnicode(false);

                entity.Property(e => e.LoteImportacao).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NfPeca).IsUnicode(false);

                entity.Property(e => e.NfPecaDataEmissao).IsUnicode(false);

                entity.Property(e => e.NfVenda).IsUnicode(false);

                entity.Property(e => e.NfVendaDataEmissao).IsUnicode(false);

                entity.Property(e => e.NumRat).IsUnicode(false);

                entity.Property(e => e.Os).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Serie).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.Tecnico).IsUnicode(false);

                entity.Property(e => e.Termino).IsUnicode(false);

                entity.Property(e => e.Tipo).IsUnicode(false);

                entity.Property(e => e.TipoPendencia).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<PreventivaImportacao>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<ProducaoPo>(entity =>
            {
                entity.HasIndex(e => new { e.Op, e.NotaFiscal }, "IX_ProducaoPOS_OP_Nota")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodStatusProducaoPos, "IX_ProducaoPOS_Status")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodUsuarioCadastro, "IX_ProducaoPOS_Usuario")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.Destino).IsUnicode(false);

                entity.Property(e => e.Erro).IsUnicode(false);

                entity.Property(e => e.NotaFiscal).IsUnicode(false);

                entity.Property(e => e.NumeroLogicoFinal).IsUnicode(false);

                entity.Property(e => e.NumeroLogicoInicio).IsUnicode(false);

                entity.Property(e => e.NumeroOscliente).IsUnicode(false);

                entity.Property(e => e.Serie).IsUnicode(false);

                entity.Property(e => e.Versao).IsUnicode(false);

                entity.HasOne(d => d.CodStatusProducaoPosNavigation)
                    .WithMany(p => p.ProducaoPos)
                    .HasForeignKey(d => d.CodStatusProducaoPos)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProducaoPOS_StatusProducaoPOS");

                entity.HasOne(d => d.CodUsuarioCadastroNavigation)
                    .WithMany(p => p.ProducaoPos)
                    .HasForeignKey(d => d.CodUsuarioCadastro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProducaoPOS_Usuario");
            });

            modelBuilder.Entity<ProducaoPositem>(entity =>
            {
                entity.HasIndex(e => e.CodProducaoPos, "IX_ProducaoPOSItem_ProducaoPOS")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodProduto, "IX_ProducaoPOSItem_Produto")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodStatusProducaoPositem, "IX_ProducaoPOSItem_Status")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Erro).IsUnicode(false);

                entity.Property(e => e.NumeroLogico).IsUnicode(false);

                entity.HasOne(d => d.CodProducaoPosNavigation)
                    .WithMany(p => p.ProducaoPositems)
                    .HasForeignKey(d => d.CodProducaoPos)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProducaoPOSItem_ProducaoPOS");

                entity.HasOne(d => d.CodProdutoNavigation)
                    .WithMany(p => p.ProducaoPositems)
                    .HasForeignKey(d => d.CodProduto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProducaoPOSItem_Produto");

                entity.HasOne(d => d.CodStatusProducaoPositemNavigation)
                    .WithMany(p => p.ProducaoPositems)
                    .HasForeignKey(d => d.CodStatusProducaoPositem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProducaoPOSItem_StatusProducaoPOSItem");
            });

            modelBuilder.Entity<ProducaoVeloh3>(entity =>
            {
                entity.HasIndex(e => e.CodTipoVeloh3, "IX_ProducaoVeloh3")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NumeroSerie).IsUnicode(false);

                entity.Property(e => e.OpPqm).IsUnicode(false);

                entity.HasOne(d => d.CodTipoVeloh3Navigation)
                    .WithMany(p => p.ProducaoVeloh3s)
                    .HasForeignKey(d => d.CodTipoVeloh3)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProducaoVeloh3_TipoVeloh3");
            });

            modelBuilder.Entity<Produto>(entity =>
            {
                entity.HasIndex(e => new { e.CodEquip, e.CodGrupoEquip, e.CodTipoEquip }, "IX_Produto_Equipamento")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodProdutoLogix).IsUnicode(false);

                entity.HasOne(d => d.Cod)
                    .WithMany(p => p.Produtos)
                    .HasForeignKey(d => new { d.CodEquip, d.CodGrupoEquip, d.CodTipoEquip })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Produto_Equipamento");
            });

            modelBuilder.Entity<ProdutoCliente>(entity =>
            {
                entity.HasKey(e => new { e.CodProduto, e.CodCliente });

                entity.Property(e => e.CodProdutoCliente).IsUnicode(false);

                entity.HasOne(d => d.CodClienteNavigation)
                    .WithMany(p => p.ProdutoClientes)
                    .HasForeignKey(d => d.CodCliente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProdutoCliente_Cliente");

                entity.HasOne(d => d.CodProdutoNavigation)
                    .WithMany(p => p.ProdutoClientes)
                    .HasForeignKey(d => d.CodProduto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProdutoCliente_Produto");
            });

            modelBuilder.Entity<ProdutoRede>(entity =>
            {
                entity.HasIndex(e => e.CodProduto, "IX_ProdutoRede")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodRede).IsUnicode(false);

                entity.HasOne(d => d.CodProdutoNavigation)
                    .WithMany(p => p.ProdutoRedes)
                    .HasForeignKey(d => d.CodProduto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProdutoRede_Produto");
            });

            modelBuilder.Entity<ProtocoloChamadoStn>(entity =>
            {
                entity.HasKey(e => e.CodProtocoloChamadoStn)
                    .HasName("PK__Protocol__4A8A037CBADDF030");

                entity.Property(e => e.AcaoStn).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.TecnicoCampo).IsUnicode(false);
            });

            modelBuilder.Entity<ProtocoloStn>(entity =>
            {
                entity.HasIndex(e => e.CodOs, "IDX_ProtocoloSTN_CodOs_ADV")
                    .HasFillFactor((byte)90);
            });

            modelBuilder.Entity<Rat>(entity =>
            {
                entity.HasIndex(e => new { e.CodTecnico, e.CodStatusServico, e.CodRat, e.CodOs, e.NumRat, e.DataHoraInicio, e.DataHoraSolucao }, "IX_RAT_CODTEC_COLUMN")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodOs, e.CodRat }, "RAT76")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodRat).ValueGeneratedNever();

                entity.Property(e => e.AceitadorCedula).IsUnicode(false);

                entity.Property(e => e.BiosCpuMicroComputador).IsUnicode(false);

                entity.Property(e => e.CaminhoRatdigitalizada).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManutencao).IsUnicode(false);

                entity.Property(e => e.CpuAntiskimming).IsUnicode(false);

                entity.Property(e => e.CpuDispensadorEnvelope).IsUnicode(false);

                entity.Property(e => e.CpuImpressoraRecibo).IsUnicode(false);

                entity.Property(e => e.CpuMecanismoDepositarioEnvelope).IsUnicode(false);

                entity.Property(e => e.CpuMecanismoDispensadorCedula).IsUnicode(false);

                entity.Property(e => e.CpuPresenterFolhaCheque).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IndBrbatendeConfederal)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MotivoEspera).IsUnicode(false);

                entity.Property(e => e.MotivoInterrupcao).IsUnicode(false);

                entity.Property(e => e.NomeAcompanhante).IsUnicode(false);

                entity.Property(e => e.NomeRespCliente).IsUnicode(false);

                entity.Property(e => e.NroSerieMecanismo).IsUnicode(false);

                entity.Property(e => e.NumRat).IsUnicode(false);

                entity.Property(e => e.ObsRat).IsUnicode(false);

                entity.Property(e => e.PertoScan).IsUnicode(false);

                entity.Property(e => e.PlacaSensor).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.TemperaturaAmbiente).IsUnicode(false);

                entity.Property(e => e.TensaoComCarga).IsUnicode(false);

                entity.Property(e => e.TensaoSemCarga).IsUnicode(false);

                entity.Property(e => e.TensaoTerraNeutro).IsUnicode(false);
            });

            modelBuilder.Entity<RatArqMorto>(entity =>
            {
                entity.HasKey(e => e.CodRat)
                    .HasName("pk_rat_arq_morto");

                entity.HasIndex(e => e.CodRat, "_dta_index_RAT_ARQ_MORTO_7_1561264817__K1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodRat, e.CodOs, e.NumRat }, "_dta_index_RAT_ARQ_MORTO_9_1561264817__K1_K2_K5")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodOs, "in_rat_arq_morto")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodRat).ValueGeneratedNever();

                entity.Property(e => e.AceitadorCedula).IsUnicode(false);

                entity.Property(e => e.BiosCpuMicroComputador).IsUnicode(false);

                entity.Property(e => e.CaminhoRatdigitalizada).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManutencao).IsUnicode(false);

                entity.Property(e => e.CpuAntiskimming).IsUnicode(false);

                entity.Property(e => e.CpuDispensadorEnvelope).IsUnicode(false);

                entity.Property(e => e.CpuImpressoraRecibo).IsUnicode(false);

                entity.Property(e => e.CpuMecanismoDepositarioEnvelope).IsUnicode(false);

                entity.Property(e => e.CpuMecanismoDispensadorCedula).IsUnicode(false);

                entity.Property(e => e.CpuPresenterFolhaCheque).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IndBrbatendeConfederal)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MotivoEspera).IsUnicode(false);

                entity.Property(e => e.MotivoInterrupcao).IsUnicode(false);

                entity.Property(e => e.NomeAcompanhante).IsUnicode(false);

                entity.Property(e => e.NomeRespCliente).IsUnicode(false);

                entity.Property(e => e.NroSerieMecanismo).IsUnicode(false);

                entity.Property(e => e.NumRat).IsUnicode(false);

                entity.Property(e => e.ObsRat).IsUnicode(false);

                entity.Property(e => e.PertoScan).IsUnicode(false);

                entity.Property(e => e.PlacaSensor).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.TemperaturaAmbiente).IsUnicode(false);

                entity.Property(e => e.TensaoComCarga).IsUnicode(false);

                entity.Property(e => e.TensaoSemCarga).IsUnicode(false);

                entity.Property(e => e.TensaoTerraNeutro).IsUnicode(false);
            });

            modelBuilder.Entity<RatFotoSmartphoneInconsistente>(entity =>
            {
                entity.Property(e => e.NomeFoto).IsUnicode(false);
            });

            modelBuilder.Entity<Ratbanrisul>(entity =>
            {
                entity.HasIndex(e => e.CodMotivoComunicacao, "IX_RATBanrisul_MotivoComunicacao")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodOperadoraTelefoniaChipInstalado, "IX_RATBanrisul_OperadoraInst")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodOperadoraTelefoniaChipRetirado, "IX_RATBanrisul_OperadoraRet")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodTipoComunicacao, "IX_RATBanrisul_TipoComunicacao")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodRat).ValueGeneratedNever();

                entity.Property(e => e.CodRatbanrisul).ValueGeneratedOnAdd();

                entity.Property(e => e.NumSerieInst).IsUnicode(false);

                entity.Property(e => e.NumSerieRet).IsUnicode(false);

                entity.Property(e => e.NumeroChipInstalado).IsUnicode(false);

                entity.Property(e => e.NumeroChipRetirado).IsUnicode(false);

                entity.Property(e => e.ObsMotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.ObsMotivoComunicacao).IsUnicode(false);

                entity.Property(e => e.Rede).IsUnicode(false);

                entity.HasOne(d => d.CodMotivoComunicacaoNavigation)
                    .WithMany(p => p.Ratbanrisuls)
                    .HasForeignKey(d => d.CodMotivoComunicacao)
                    .HasConstraintName("FK_RATBanrisul_MotivoComunicacao");

                entity.HasOne(d => d.CodOperadoraTelefoniaChipInstaladoNavigation)
                    .WithMany(p => p.RatbanrisulCodOperadoraTelefoniaChipInstaladoNavigations)
                    .HasForeignKey(d => d.CodOperadoraTelefoniaChipInstalado)
                    .HasConstraintName("FK_RATBanrisul_OperadoraTelefonia");

                entity.HasOne(d => d.CodOperadoraTelefoniaChipRetiradoNavigation)
                    .WithMany(p => p.RatbanrisulCodOperadoraTelefoniaChipRetiradoNavigations)
                    .HasForeignKey(d => d.CodOperadoraTelefoniaChipRetirado)
                    .HasConstraintName("FK_RATBanrisul_OperadoraTelefonia1");

                entity.HasOne(d => d.CodRatNavigation)
                    .WithOne(p => p.Ratbanrisul)
                    .HasForeignKey<Ratbanrisul>(d => d.CodRat)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RATBanrisul_RAT");

                entity.HasOne(d => d.CodTipoComunicacaoNavigation)
                    .WithMany(p => p.Ratbanrisuls)
                    .HasForeignKey(d => d.CodTipoComunicacao)
                    .HasConstraintName("FK_RATBanrisul_TipoComunicacao");
            });

            modelBuilder.Entity<RatbanrisulArqMorto>(entity =>
            {
                entity.Property(e => e.NumSerieInst).IsUnicode(false);

                entity.Property(e => e.NumSerieRet).IsUnicode(false);

                entity.Property(e => e.NumeroChipInstalado).IsUnicode(false);

                entity.Property(e => e.NumeroChipRetirado).IsUnicode(false);

                entity.Property(e => e.ObsMotivoComunicacao).IsUnicode(false);

                entity.Property(e => e.Rede).IsUnicode(false);
            });

            modelBuilder.Entity<Ratdetalhe>(entity =>
            {
                entity.HasKey(e => e.CodRatdetalhe)
                    .HasName("PK__RATDetalhes__084B3915");

                entity.HasIndex(e => new { e.CodTipoCausa, e.CodDefeito, e.CodCausa, e.CodAcao, e.DataHoraCad }, "IX_RATDetalhes")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodOs, e.CodRat, e.CodRatdetalhe }, "RATDetalhes39")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodRat, "RATDetalhes44")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodRatdetalhe).ValueGeneratedNever();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);
            });

            modelBuilder.Entity<RatdetalhesArqMorto>(entity =>
            {
                entity.HasKey(e => e.CodRatdetalhe)
                    .HasName("pk_RATDetalhes_ARQ_MORTO");

                entity.Property(e => e.CodRatdetalhe).ValueGeneratedNever();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);
            });

            modelBuilder.Entity<RatdetalhesPeca>(entity =>
            {
                entity.HasKey(e => e.CodRatdetalhesPecas)
                    .HasName("PK__RATDetalhesPecas__123EB7A3");

                entity.HasIndex(e => new { e.CodRatDetalhe, e.CodPeca }, "IX_RATDETALHES_CODPECA_CODDET")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodPeca, e.AP }, "IX_RATDETPEC_CODPEC_A_C")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodRatDetalhe, "RATDetalhesPecas47")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodRatdetalhesPecas).ValueGeneratedNever();

                entity.Property(e => e.CodMagnusInconsistente).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManutencao).IsUnicode(false);

                entity.Property(e => e.DataManutencao).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DescStatus).IsUnicode(false);

                entity.Property(e => e.IndPassivelConserto).HasDefaultValueSql("((0))");

                entity.Property(e => e.MotivoSubstituicao).IsUnicode(false);

                entity.Property(e => e.NotaFiscal).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.HasOne(d => d.CodPecaNavigation)
                    .WithMany(p => p.RatdetalhesPecas)
                    .HasForeignKey(d => d.CodPeca)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RATDetalhesPecas_Peca");

                entity.HasOne(d => d.CodRatDetalheNavigation)
                    .WithMany(p => p.RatdetalhesPecas)
                    .HasForeignKey(d => d.CodRatDetalhe)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RATDetalh__CodRa__0FEC5ADD");
            });

            modelBuilder.Entity<RatdetalhesPecasStatus>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.Descricao).IsUnicode(false);

                entity.Property(e => e.NroMinuta).IsUnicode(false);

                entity.Property(e => e.NroNf).IsUnicode(false);

                entity.Property(e => e.Transportadora).IsUnicode(false);

                entity.HasOne(d => d.CodRatpecasStatusNavigation)
                    .WithMany(p => p.RatdetalhesPecasStatuses)
                    .HasForeignKey(d => d.CodRatpecasStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RATDetalhesPecasStatus_RATPecasStatus");
            });

            modelBuilder.Entity<Ratdigitalizadum>(entity =>
            {
                entity.Property(e => e.TipoTransmissao).IsUnicode(false);
            });

            modelBuilder.Entity<Ratfoto>(entity =>
            {
                entity.Property(e => e.Descricao).IsUnicode(false);

                entity.Property(e => e.NumRat).IsUnicode(false);

                entity.Property(e => e.Url).IsUnicode(false);
            });

            modelBuilder.Entity<RatfotoSmartphone>(entity =>
            {
                entity.Property(e => e.Modalidade).IsUnicode(false);

                entity.Property(e => e.NomeFoto).IsUnicode(false);

                entity.Property(e => e.NumRat).IsUnicode(false);
            });

            modelBuilder.Entity<RatpecasStatus>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<RebateRedutor>(entity =>
            {
                entity.Property(e => e.Criticidade).IsFixedLength(true);

                entity.Property(e => e.Motivo).IsUnicode(false);
            });

            modelBuilder.Entity<RedeBanrisul>(entity =>
            {
                entity.HasIndex(e => e.RedeBanrisul1, "UK_RedeBanrisul")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.RedeBanrisul1).IsUnicode(false);
            });

            modelBuilder.Entity<Regiao>(entity =>
            {
                entity.HasKey(e => e.CodRegiao)
                    .HasName("PK__Regiao__59B045BD");

                entity.HasIndex(e => e.NomeRegiao, "IX_Regiao")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodRegiao).ValueGeneratedNever();

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("(1)");

                entity.Property(e => e.NomeRegiao).IsUnicode(false);
            });

            modelBuilder.Entity<RegiaoAutorizadaNew>(entity =>
            {
                entity.Property(e => e.Cidade).IsUnicode(false);
            });

            modelBuilder.Entity<RegiaoAutorizadum>(entity =>
            {
                entity.HasKey(e => new { e.CodRegiao, e.CodAutorizada, e.CodFilial })
                    .HasName("PK__RegiaoAutorizada__59063A47");

                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.Cnpj).IsUnicode(false);

                entity.Property(e => e.ComplemEnd).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("((1))");

                entity.Property(e => e.NumeroEnd).IsUnicode(false);

                entity.Property(e => e.Pa).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<RegiaoBb>(entity =>
            {
                entity.Property(e => e.CodRegiaoBb).ValueGeneratedOnAdd();

                entity.Property(e => e.NomeRegiaoBb).IsUnicode(false);
            });

            modelBuilder.Entity<RegiaoEstadoPo>(entity =>
            {
                entity.HasIndex(e => e.CodEstadoPos, "IX_RegiaoEstadoPOS")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodIbge).IsUnicode(false);

                entity.Property(e => e.NomeRegiaoEstadoPos).IsUnicode(false);

                entity.HasOne(d => d.CodEstadoPosNavigation)
                    .WithMany(p => p.RegiaoEstadoPos)
                    .HasForeignKey(d => d.CodEstadoPos)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RegiaoEstadoPOS_EstadoPOS");
            });

            modelBuilder.Entity<RegiaoPo>(entity =>
            {
                entity.HasIndex(e => e.NomeRegiao, "IX_RegiaoPOS_NomeRegiao")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NomeRegiao).IsUnicode(false);
            });

            modelBuilder.Entity<Regional>(entity =>
            {
                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.NomeRegional).IsUnicode(false);
            });

            modelBuilder.Entity<RegistroReconfiguracao>(entity =>
            {
                entity.Property(e => e.AgenciaEstabelecimento).IsUnicode(false);

                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.Checksum).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.CnpjCpf).IsUnicode(false);

                entity.Property(e => e.CnpjCpfOrigem).IsUnicode(false);

                entity.Property(e => e.CodigoArea).IsUnicode(false);

                entity.Property(e => e.CodigoAreaOrigem).IsUnicode(false);

                entity.Property(e => e.ContaCorrenteEstabelecimento).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.Estabelecimento).IsUnicode(false);

                entity.Property(e => e.EstabelecimentoOrigem).IsUnicode(false);

                entity.Property(e => e.Filler).IsUnicode(false);

                entity.Property(e => e.HorarioEstabelecimentoTurno1).IsUnicode(false);

                entity.Property(e => e.HorarioEstabelecimentoTurno2).IsUnicode(false);

                entity.Property(e => e.InscricaoEstadual).IsUnicode(false);

                entity.Property(e => e.MacAddress).IsUnicode(false);

                entity.Property(e => e.ModoAquisicao).IsUnicode(false);

                entity.Property(e => e.NomeContato).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NumeroCelular).IsUnicode(false);

                entity.Property(e => e.NumeroCelularOrigem).IsUnicode(false);

                entity.Property(e => e.NumeroSerie).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.PessoaFiscal).IsUnicode(false);

                entity.Property(e => e.Prioridade).IsUnicode(false);

                entity.Property(e => e.RazaoSocial).IsUnicode(false);

                entity.Property(e => e.Reabertura).IsUnicode(false);

                entity.Property(e => e.Rede).IsUnicode(false);

                entity.Property(e => e.RedeOrigem).IsUnicode(false);

                entity.Property(e => e.SeqRegistro).IsUnicode(false);

                entity.Property(e => e.TelefoneContato).IsUnicode(false);

                entity.Property(e => e.Terminal).IsUnicode(false);

                entity.Property(e => e.TerminalOrigem).IsUnicode(false);

                entity.Property(e => e.TipoRegistro).IsUnicode(false);

                entity.Property(e => e.TipoTerminal).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);

                entity.Property(e => e.UsuarioCadastro).IsUnicode(false);
            });

            modelBuilder.Entity<Relatorio>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.CorRelatorio).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DataMemberName).IsUnicode(false);

                entity.Property(e => e.DescRelatorio).IsUnicode(false);

                entity.Property(e => e.NomeRelatorio).IsUnicode(false);

                entity.HasOne(d => d.CodConexaoNavigation)
                    .WithMany(p => p.Relatorios)
                    .HasForeignKey(d => d.CodConexao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Relatorio_Conexao");

                entity.HasOne(d => d.CodUsuarioCadNavigation)
                    .WithMany(p => p.RelatorioCodUsuarioCadNavigations)
                    .HasForeignKey(d => d.CodUsuarioCad)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Relatorio_UsuarioCad");

                entity.HasOne(d => d.CodUsuarioManutNavigation)
                    .WithMany(p => p.RelatorioCodUsuarioManutNavigations)
                    .HasForeignKey(d => d.CodUsuarioManut)
                    .HasConstraintName("FK_Relatorio_UsuarioManut");
            });

            modelBuilder.Entity<RelatorioApresentacao>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DescApresentacao).IsUnicode(false);

                entity.Property(e => e.NomeApresentacao).IsUnicode(false);

                entity.HasOne(d => d.CodUsuarioCadNavigation)
                    .WithMany(p => p.RelatorioApresentacaoCodUsuarioCadNavigations)
                    .HasForeignKey(d => d.CodUsuarioCad)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RelatorioApresentacao_UsuarioCad");

                entity.HasOne(d => d.CodUsuarioManutNavigation)
                    .WithMany(p => p.RelatorioApresentacaoCodUsuarioManutNavigations)
                    .HasForeignKey(d => d.CodUsuarioManut)
                    .HasConstraintName("FK_RelatorioApresentacao_UsuarioManut");
            });

            modelBuilder.Entity<RelatorioApresentacaoSlide>(entity =>
            {
                entity.HasKey(e => e.CodSlide)
                    .HasName("PK_RelatorioApresentacaoSlide_1");

                entity.Property(e => e.Intervalo).IsFixedLength(true);

                entity.Property(e => e.NomeSlide).IsUnicode(false);

                entity.HasOne(d => d.CodApresentacaoNavigation)
                    .WithMany(p => p.RelatorioApresentacaoSlides)
                    .HasForeignKey(d => d.CodApresentacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RelatorioApresentacaoSlide_RelatorioApresentacao");
            });

            modelBuilder.Entity<RelatorioApresentacaoSlideVisao>(entity =>
            {
                entity.HasKey(e => new { e.CodSlide, e.CodRelatorioVisao });

                entity.HasOne(d => d.CodRelatorioVisaoNavigation)
                    .WithMany(p => p.RelatorioApresentacaoSlideVisaos)
                    .HasForeignKey(d => d.CodRelatorioVisao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RelatorioApresentacaoSlideVisao_RelatorioVisao");

                entity.HasOne(d => d.CodSlideNavigation)
                    .WithMany(p => p.RelatorioApresentacaoSlideVisaos)
                    .HasForeignKey(d => d.CodSlide)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RelatorioApresentacaoSlideVisao_RelatorioApresentacaoSlideVisao");
            });

            modelBuilder.Entity<RelatorioDescricao>(entity =>
            {
                entity.Property(e => e.Definicoes).IsUnicode(false);

                entity.Property(e => e.Desenvolvedor).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.Objetivo).IsUnicode(false);

                entity.Property(e => e.Projeto).IsUnicode(false);

                entity.Property(e => e.Responsavel).IsUnicode(false);
            });

            modelBuilder.Entity<RelatorioPerfil>(entity =>
            {
                entity.HasKey(e => new { e.CodRelatorio, e.CodPerfil });

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.CodPerfilNavigation)
                    .WithMany(p => p.RelatorioPerfils)
                    .HasForeignKey(d => d.CodPerfil)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RelatorioPerfil_Perfil");

                entity.HasOne(d => d.CodRelatorioNavigation)
                    .WithMany(p => p.RelatorioPerfils)
                    .HasForeignKey(d => d.CodRelatorio)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RelatorioPerfil_Relatorio");

                entity.HasOne(d => d.CodUsuarioCadNavigation)
                    .WithMany(p => p.RelatorioPerfils)
                    .HasForeignKey(d => d.CodUsuarioCad)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RelatorioPerfil_UsuarioCad");
            });

            modelBuilder.Entity<RelatorioReporting>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DescRelatorioReporting).IsUnicode(false);

                entity.Property(e => e.LinkRelatorioReporting).IsUnicode(false);

                entity.Property(e => e.NomeRelatorioReporting).IsUnicode(false);
            });

            modelBuilder.Entity<RelatorioReportingUsuario>(entity =>
            {
                entity.Property(e => e.CodUsuario).IsUnicode(false);
            });

            modelBuilder.Entity<RelatorioUsuario>(entity =>
            {
                entity.HasKey(e => new { e.CodRelatorio, e.CodUsuario });

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.CodRelatorioNavigation)
                    .WithMany(p => p.RelatorioUsuarios)
                    .HasForeignKey(d => d.CodRelatorio)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RelatorioUsuario_Relatorio");

                entity.HasOne(d => d.CodUsuarioNavigation)
                    .WithMany(p => p.RelatorioUsuarioCodUsuarioNavigations)
                    .HasForeignKey(d => d.CodUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RelatorioUsuario_Usuario");

                entity.HasOne(d => d.CodUsuarioCadNavigation)
                    .WithMany(p => p.RelatorioUsuarioCodUsuarioCadNavigations)
                    .HasForeignKey(d => d.CodUsuarioCad)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RelatorioUsuario_UsuarioCad");
            });

            modelBuilder.Entity<RelatorioVisao>(entity =>
            {
                entity.HasKey(e => e.CodRelatorioVisao)
                    .HasName("RelatorioVisao_PK");

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NomeRelatorioVisao).IsUnicode(false);

                entity.HasOne(d => d.CodRelatorioNavigation)
                    .WithMany(p => p.RelatorioVisaos)
                    .HasForeignKey(d => d.CodRelatorio)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Relatorio_RelatorioVisao_FK1");

                entity.HasOne(d => d.CodUsuarioCadNavigation)
                    .WithMany(p => p.RelatorioVisaoCodUsuarioCadNavigations)
                    .HasForeignKey(d => d.CodUsuarioCad)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RelatorioVisao_UsuarioCad");

                entity.HasOne(d => d.CodUsuarioManutNavigation)
                    .WithMany(p => p.RelatorioVisaoCodUsuarioManutNavigations)
                    .HasForeignKey(d => d.CodUsuarioManut)
                    .HasConstraintName("FK_RelatorioVisao_UsuarioManut");
            });

            modelBuilder.Entity<RelatorioVisaoUsuario>(entity =>
            {
                entity.HasKey(e => new { e.CodRelatorioVisao, e.CodUsuario })
                    .HasName("RelatorioVisaoUsuario_PK");

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.CodRelatorioVisaoNavigation)
                    .WithMany(p => p.RelatorioVisaoUsuarios)
                    .HasForeignKey(d => d.CodRelatorioVisao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("RelatorioVisao_RelatorioVisaoUsuario_FK1");

                entity.HasOne(d => d.CodUsuarioNavigation)
                    .WithMany(p => p.RelatorioVisaoUsuarioCodUsuarioNavigations)
                    .HasForeignKey(d => d.CodUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_RelatorioVisaoUsuario_FK1");

                entity.HasOne(d => d.CodUsuarioCadNavigation)
                    .WithMany(p => p.RelatorioVisaoUsuarioCodUsuarioCadNavigations)
                    .HasForeignKey(d => d.CodUsuarioCad)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RelatorioVisaoUsuario_UsuarioCad");
            });

            modelBuilder.Entity<Report>(entity =>
            {
                entity.Property(e => e.DescricaoReport).IsUnicode(false);

                entity.Property(e => e.NomeReport).IsUnicode(false);
            });

            modelBuilder.Entity<ReportAgendamento>(entity =>
            {
                entity.Property(e => e.DescricaoReportAgendamento).IsUnicode(false);
            });

            modelBuilder.Entity<ReportCatalogoEmail>(entity =>
            {
                entity.Property(e => e.EmailDestinatario).IsUnicode(false);

                entity.Property(e => e.EmailRemetente).IsUnicode(false);
            });

            modelBuilder.Entity<ReportParametro>(entity =>
            {
                entity.Property(e => e.NomeParametro).IsUnicode(false);

                entity.Property(e => e.ValorParametro).IsUnicode(false);
            });

            modelBuilder.Entity<ReportRecorrencium>(entity =>
            {
                entity.HasKey(e => e.CodReportRecorrencia)
                    .HasName("PK_ReportTipoEnvio");

                entity.Property(e => e.DataHoraEnviado).IsUnicode(false);

                entity.Property(e => e.HoraFimEnvio).IsUnicode(false);

                entity.Property(e => e.HoraInicioEnvio).IsUnicode(false);

                entity.Property(e => e.IntervaloDiaMes).IsUnicode(false);

                entity.Property(e => e.IntervaloDiaSemana).IsUnicode(false);

                entity.Property(e => e.IntervaloDiasPeriodico).IsUnicode(false);

                entity.Property(e => e.IntervaloHoras).IsUnicode(false);
            });

            modelBuilder.Entity<ReportReincidenciaSicredi>(entity =>
            {
                entity.Property(e => e.Reincidencia).IsUnicode(false);
            });

            modelBuilder.Entity<ReportRelacao>(entity =>
            {
                entity.HasOne(d => d.CodReportNavigation)
                    .WithMany(p => p.ReportRelacaos)
                    .HasForeignKey(d => d.CodReport)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReportRelacao_Report");

                entity.HasOne(d => d.CodReportAgendamentoNavigation)
                    .WithMany(p => p.ReportRelacaos)
                    .HasForeignKey(d => d.CodReportAgendamento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReportRelacao_ReportAgendamento");

                entity.HasOne(d => d.CodReportParametroNavigation)
                    .WithMany(p => p.ReportRelacaos)
                    .HasForeignKey(d => d.CodReportParametro)
                    .HasConstraintName("FK_ReportRelacao_ReportParametro");
            });

            modelBuilder.Entity<ReportScript>(entity =>
            {
                entity.Property(e => e.DescricaoAgendamento).IsUnicode(false);

                entity.Property(e => e.DescricaoReport).IsUnicode(false);

                entity.Property(e => e.EmailDestinatario).IsUnicode(false);

                entity.Property(e => e.EmailRemetente).IsUnicode(false);

                entity.Property(e => e.NomeParametro).IsUnicode(false);

                entity.Property(e => e.NomeReport).IsUnicode(false);

                entity.Property(e => e.ValorParametro).IsUnicode(false);
            });

            modelBuilder.Entity<ReportingImagen>(entity =>
            {
                entity.Property(e => e.LocalImagem).IsUnicode(false);
            });

            modelBuilder.Entity<ReportingIndiceDePecasPendentesGeovane>(entity =>
            {
                entity.ToView("Reporting_Indice_de_Pecas_Pendentes_Geovane");
            });

            modelBuilder.Entity<Representante>(entity =>
            {
                entity.Property(e => e.CentroCusto).IsUnicode(false);

                entity.Property(e => e.NomeRepresentante).IsUnicode(false);
            });

            modelBuilder.Entity<Retrofit>(entity =>
            {
                entity.Property(e => e.CodRetrofit).ValueGeneratedOnAdd();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.DescricaoRetrofit).IsUnicode(false);

                entity.Property(e => e.NomeRetrofit).IsUnicode(false);
            });

            modelBuilder.Entity<RoboGoogleLocal>(entity =>
            {
                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.EnderecoSat).IsUnicode(false);

                entity.Property(e => e.Estado).IsUnicode(false);

                entity.Property(e => e.LatitudeGoogle).IsUnicode(false);

                entity.Property(e => e.LatitudeSat).IsUnicode(false);

                entity.Property(e => e.LongitudeGoogle).IsUnicode(false);

                entity.Property(e => e.LongitudeSat).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.Pais).IsUnicode(false);
            });

            modelBuilder.Entity<SatMobileAppUso>(entity =>
            {
                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<SatMobileAppVersao>(entity =>
            {
                entity.Property(e => e.AppVersao).IsUnicode(false);
            });

            modelBuilder.Entity<SatMobileAppVersaoLog>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.Versao).IsUnicode(false);
            });

            modelBuilder.Entity<Sequencium>(entity =>
            {
                entity.HasKey(e => new { e.Tabela, e.Coluna })
                    .HasName("PK_SEQUENCIA");

                entity.Property(e => e.Tabela).IsUnicode(false);

                entity.Property(e => e.Coluna).IsUnicode(false);
            });

            modelBuilder.Entity<Servico>(entity =>
            {
                entity.HasKey(e => e.CodServico)
                    .HasName("PK__Servico__31AE0CB2");

                entity.Property(e => e.NomeServico).IsUnicode(false);
            });

            modelBuilder.Entity<SessaoUsuario>(entity =>
            {
                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.Estado).IsUnicode(false);

                entity.Property(e => e.Ip).IsUnicode(false);

                entity.HasOne(d => d.CodUsuarioNavigation)
                    .WithMany(p => p.SessaoUsuarios)
                    .HasForeignKey(d => d.CodUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SessaoUsuario_Usuario");
            });

            modelBuilder.Entity<Severidade>(entity =>
            {
                entity.Property(e => e.Descricao).IsUnicode(false);

                entity.Property(e => e.Exemplos).IsUnicode(false);

                entity.Property(e => e.Nivel).IsUnicode(false);
            });

            modelBuilder.Entity<SimCard>(entity =>
            {
                entity.HasIndex(e => e.CodSimCard, "in_simcard_codsimcard")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SimCardNumber).IsUnicode(false);

                entity.Property(e => e.TrackerId).IsUnicode(false);
            });

            modelBuilder.Entity<Sistema>(entity =>
            {
                entity.HasKey(e => e.CodSistema)
                    .HasName("PK__Sistema__5AEE82B9");

                entity.Property(e => e.CodSistema).ValueGeneratedNever();

                entity.Property(e => e.DescSistema).IsUnicode(false);

                entity.Property(e => e.MsgSistema).IsUnicode(false);

                entity.Property(e => e.NomeSistema).IsUnicode(false);
            });

            modelBuilder.Entity<Sla>(entity =>
            {
                entity.HasKey(e => e.CodSla)
                    .HasName("PK__SLA__5AA469F6");

                entity.Property(e => e.CodSla).ValueGeneratedNever();

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManutencao).IsUnicode(false);

                entity.Property(e => e.DescSla).IsUnicode(false);

                entity.Property(e => e.NomeSla).IsUnicode(false);
            });

            modelBuilder.Entity<SlaNew>(entity =>
            {
                entity.HasKey(e => e.CodSla)
                    .HasName("PK__SLA_NEW__15BCA4D1");

                entity.Property(e => e.CodSla).ValueGeneratedNever();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManutencao).IsUnicode(false);

                entity.Property(e => e.DescSla).IsUnicode(false);

                entity.Property(e => e.NomeSla).IsUnicode(false);
            });

            modelBuilder.Entity<SladistanciaTempo>(entity =>
            {
                entity.HasKey(e => e.CodSladistanciaTempo)
                    .HasName("PK__SLADistanciaTemp__17A4ED43");

                entity.HasIndex(e => e.CodSla, "ix_sladistanciatempo_codsla")
                    .HasFillFactor((byte)90);

                entity.HasOne(d => d.CodSlaNavigation)
                    .WithMany(p => p.SladistanciaTempos)
                    .HasForeignKey(d => d.CodSla)
                    .HasConstraintName("FK__SLADistan__CodSL__1899117C");
            });

            modelBuilder.Entity<SlaparametroAdicional>(entity =>
            {
                entity.Property(e => e.CodSlaparametroAdicional).ValueGeneratedOnAdd();

                entity.Property(e => e.NomeSlaparametroAdicional).IsUnicode(false);
            });

            modelBuilder.Entity<SlasicrediPo>(entity =>
            {
                entity.HasKey(e => e.CodSlasicredi)
                    .HasName("PK_SLASicredi");

                entity.HasIndex(e => e.CodCidade, "IX_SLASicredi_Cidade")
                    .HasFillFactor((byte)90);

                entity.HasOne(d => d.CodCidadeNavigation)
                    .WithMany(p => p.SlasicrediPos)
                    .HasForeignKey(d => d.CodCidade)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLASicredi_Cidade");
            });

            modelBuilder.Entity<SlideContrato12mese>(entity =>
            {
                entity.Property(e => e.AnoMes).IsUnicode(false);
            });

            modelBuilder.Entity<SlideContratoDeclinado>(entity =>
            {
                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.NomeContrato).IsUnicode(false);

                entity.Property(e => e.NroContrato).IsUnicode(false);
            });

            modelBuilder.Entity<SlideContratoDetalhamento>(entity =>
            {
                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.NomeContrato).IsUnicode(false);

                entity.Property(e => e.NroContrato).IsUnicode(false);
            });

            modelBuilder.Entity<SlideContratoDetalhamento12Mese>(entity =>
            {
                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.NomeContrato).IsUnicode(false);

                entity.Property(e => e.NroContrato).IsUnicode(false);
            });

            modelBuilder.Entity<SlideContratoNovosContrato>(entity =>
            {
                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.NomeContrato).IsUnicode(false);

                entity.Property(e => e.NroContrato).IsUnicode(false);
            });

            modelBuilder.Entity<SlidechamadosAntigo>(entity =>
            {
                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Intervencao).IsUnicode(false);
            });

            modelBuilder.Entity<SmartCard>(entity =>
            {
                entity.HasKey(e => e.CodSmartCard)
                    .HasName("PK__SmartCard__3766E608");

                entity.Property(e => e.CodSmartCard).ValueGeneratedNever();

                entity.Property(e => e.CardKey).IsUnicode(false);

                entity.Property(e => e.Ic).IsUnicode(false);

                entity.Property(e => e.SerialNumber).IsUnicode(false);

                entity.Property(e => e.TerminalKey).IsUnicode(false);
            });

            modelBuilder.Entity<SolicPeca>(entity =>
            {
                entity.HasKey(e => e.CodSolicPeca)
                    .HasName("PK__SolicPeca__414EAC47");

                entity.Property(e => e.CodSolicPeca).ValueGeneratedNever();

                entity.Property(e => e.CodUsuarioSolic).IsUnicode(false);
            });

            modelBuilder.Entity<SolicPecaItem>(entity =>
            {
                entity.HasKey(e => e.CodSolicPecaItem)
                    .HasName("PK__SolicPecaItem__442B18F2");

                entity.Property(e => e.CodSolicPecaItem).ValueGeneratedNever();

                entity.Property(e => e.CodUsuarioManutencao).IsUnicode(false);

                entity.Property(e => e.CodUsuarioSolicPecaItem).IsUnicode(false);

                entity.Property(e => e.DataManutencao).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.HasOne(d => d.CodSolicPecaNavigation)
                    .WithMany(p => p.SolicPecaItems)
                    .HasForeignKey(d => d.CodSolicPeca)
                    .HasConstraintName("FK__SolicPeca__CodSo__4BCC3ABA");
            });

            modelBuilder.Entity<SolicPecaNf>(entity =>
            {
                entity.HasKey(e => new { e.CodSolicPeca, e.CodNf, e.CodSolicPecaItem })
                    .HasName("PK__SolicPecaNF__4707859D");

                entity.HasIndex(e => e.CodNf, "_dta_index_SolicPecaNF_7_1159675179__K2")
                    .HasFillFactor((byte)90);

                entity.HasOne(d => d.CodSolicPecaNavigation)
                    .WithMany(p => p.SolicPecaNfs)
                    .HasForeignKey(d => d.CodSolicPeca)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__SolicPeca__CodSo__4F9CCB9E");

                entity.HasOne(d => d.CodSolicPecaItemNavigation)
                    .WithMany(p => p.SolicPecaNfs)
                    .HasForeignKey(d => d.CodSolicPecaItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__SolicPeca__CodSo__4DB4832C");
            });

            modelBuilder.Entity<SolicitacaoNf>(entity =>
            {
                entity.HasKey(e => e.CodSolicitacaoNf)
                    .HasName("PK__SolicitacaoNF__77B67547");

                entity.Property(e => e.CodSolicitacaoNf).ValueGeneratedNever();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.IndEmitida).HasDefaultValueSql("(0)");

                entity.Property(e => e.Nf).IsUnicode(false);

                entity.HasOne(d => d.CodClienteNavigation)
                    .WithMany(p => p.SolicitacaoNfs)
                    .HasForeignKey(d => d.CodCliente)
                    .HasConstraintName("FK__Solicitac__CodCl__7B87062B");

                entity.HasOne(d => d.CodTransportadoraNavigation)
                    .WithMany(p => p.SolicitacaoNfs)
                    .HasForeignKey(d => d.CodTransportadora)
                    .HasConstraintName("FK__Solicitac__CodTr__7C7B2A64");
            });

            modelBuilder.Entity<SolicitantePatrimonio>(entity =>
            {
                entity.Property(e => e.NomeSolicitantePatrimonio).IsUnicode(false);
            });

            modelBuilder.Entity<Spa>(entity =>
            {
                entity.Property(e => e.CodSpa).ValueGeneratedOnAdd();

                entity.Property(e => e.StatusSpa).IsUnicode(false);
            });

            modelBuilder.Entity<SpaKpi>(entity =>
            {
                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.CodSpa).ValueGeneratedOnAdd();

                entity.Property(e => e.StatusSpa).IsUnicode(false);
            });

            modelBuilder.Entity<StatusChamado>(entity =>
            {
                entity.Property(e => e.CorStatusChamado).IsUnicode(false);

                entity.Property(e => e.NomeStatusChamado).IsUnicode(false);
            });

            modelBuilder.Entity<StatusChecklistStn>(entity =>
            {
                entity.HasKey(e => e.CodStatus)
                    .HasName("PK__StatusCh__C6B65D0066F77FDC");

                entity.Property(e => e.DescStatus).IsUnicode(false);
            });

            modelBuilder.Entity<StatusDocumentacao>(entity =>
            {
                entity.HasKey(e => e.CodStatusDocumentocao)
                    .HasName("PK__StatusDo__354D5378A88E064B");

                entity.Property(e => e.NomeStatusDocumentacao).IsUnicode(false);
            });

            modelBuilder.Entity<StatusEquipamentoPo>(entity =>
            {
                entity.HasIndex(e => e.NomeStatusEquipamentoPos, "IX_StatusEquipamentoPOS")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CorStatusEquipamentoPos).IsUnicode(false);

                entity.Property(e => e.NomeStatusEquipamentoPos).IsUnicode(false);
            });

            modelBuilder.Entity<StatusFaturamento>(entity =>
            {
                entity.HasKey(e => e.CodStatusFaturamento)
                    .HasName("PK__StatusFa__A140289FCC7C80E4");

                entity.Property(e => e.DescEnum).IsUnicode(false);

                entity.Property(e => e.DescStatusFaturamento).IsUnicode(false);
            });

            modelBuilder.Entity<StatusFaturamentoSicredi>(entity =>
            {
                entity.HasIndex(e => e.NomeStatusFaturamentoSicredi, "IX_StatusFaturamentoSicredi")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CorStatusFaturamentoSicredi).IsUnicode(false);

                entity.Property(e => e.NomeStatusFaturamentoSicredi).IsUnicode(false);
            });

            modelBuilder.Entity<StatusInstalacao>(entity =>
            {
                entity.HasKey(e => e.CodStatusInstalacao)
                    .HasName("PK__StatusIn__488075096ED1FBED");

                entity.Property(e => e.NomeStatusInstalacao).IsUnicode(false);
            });

            modelBuilder.Entity<StatusLaboratorioPo>(entity =>
            {
                entity.Property(e => e.Icon).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);
            });

            modelBuilder.Entity<StatusLaboratorioPositem>(entity =>
            {
                entity.Property(e => e.Icon).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);
            });

            modelBuilder.Entity<StatusProducaoPo>(entity =>
            {
                entity.Property(e => e.Background).IsUnicode(false);

                entity.Property(e => e.Icon).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);
            });

            modelBuilder.Entity<StatusProducaoPositem>(entity =>
            {
                entity.Property(e => e.Icon).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);
            });

            modelBuilder.Entity<StatusServico>(entity =>
            {
                entity.HasKey(e => e.CodStatusServico)
                    .HasName("PK__StatusServico__5DCAEF64");

                entity.Property(e => e.CodStatusServico).ValueGeneratedNever();

                entity.Property(e => e.Abrev).IsUnicode(false);

                entity.Property(e => e.CorFonte).IsUnicode(false);

                entity.Property(e => e.CorFundo).IsUnicode(false);

                entity.Property(e => e.NomeStatusServico).IsUnicode(false);
            });

            modelBuilder.Entity<StatusServicoStn>(entity =>
            {
                entity.HasKey(e => e.CodStatusServicoStn)
                    .HasName("PK__StatusSe__492F3FBFE92A510B");

                entity.Property(e => e.DescStatusServicoStn).IsUnicode(false);
            });

            modelBuilder.Entity<StatusSlaosabertaInst>(entity =>
            {
                entity.HasIndex(e => e.CodOs, "_dta_index_StatusSLAOSAbertaInst_9_502501069__K2_4")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodStatusSlaosabertaInst).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<StatusSlaosabertum>(entity =>
            {
                entity.HasIndex(e => e.CodOs, "_dta_index_StatusSLAOSAberta_7_1733737379__K2_4")
                    .HasFillFactor((byte)90);
            });

            modelBuilder.Entity<StatusSlaosfechadaInst>(entity =>
            {
                entity.HasIndex(e => e.CodOs, "_dta_index_StatusSLAOSFechadaInst_9_486501012__K2_6")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodStatusSlaosfechadaInst).ValueGeneratedOnAdd();

                entity.Property(e => e.StatusSlaos).IsUnicode(false);
            });

            modelBuilder.Entity<StatusSlaosfechadum>(entity =>
            {
                entity.HasIndex(e => e.CodOs, "_dta_index_StatusSLAOSFechada_7_1173735384__K2_4")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodOs, "_dta_index_StatusSLAOSFechada_7_1173735384__K2_4_5")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodOs, "_dta_index_StatusSLAOSFechada_7_1173735384__K2_6_1771")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodOs, e.CodStatusSlaosfechada }, "_dta_index_StatusSLAOSFechada_7_1173735384__K2_K1_6")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.StatusSlaos).IsUnicode(false);
            });

            modelBuilder.Entity<TabelaFiliai>(entity =>
            {
                entity.Property(e => e.NomeFilial).IsUnicode(false);
            });

            modelBuilder.Entity<TabelaInconsistencia>(entity =>
            {
                entity.Property(e => e.DescricaoMotivoInconsistencia).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);
            });

            modelBuilder.Entity<TabelaMotivosInconsistencia>(entity =>
            {
                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<Table1>(entity =>
            {
                entity.Property(e => e.Sdf).IsFixedLength(true);
            });

            modelBuilder.Entity<TamanhoBaseHistorico>(entity =>
            {
                entity.Property(e => e.Caminho).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.TipoDado).IsUnicode(false);
            });

            modelBuilder.Entity<TamanhoBaseHistoricoObjeto>(entity =>
            {
                entity.Property(e => e.Data).IsUnicode(false);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.NomeTabela).IsUnicode(false);

                entity.Property(e => e.Reserved).IsUnicode(false);

                entity.Property(e => e.TamanhoIndex).IsUnicode(false);

                entity.Property(e => e.Unused).IsUnicode(false);
            });

            modelBuilder.Entity<Tarefa>(entity =>
            {
                entity.Property(e => e.Autorizador).IsUnicode(false);

                entity.Property(e => e.CodTarefaImpactoGrupo).HasDefaultValueSql("((41))");

                entity.Property(e => e.CodTarefaStatus).HasDefaultValueSql("((1))");

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.DataHoraCadastro).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DescricaoStatus).IsUnicode(false);

                entity.Property(e => e.DescricaoTarefa).IsUnicode(false);

                entity.Property(e => e.IndLista).HasDefaultValueSql("((1))");

                entity.Property(e => e.IndSla).HasDefaultValueSql("((1))");

                entity.Property(e => e.Modulo).IsUnicode(false);

                entity.Property(e => e.RamalSolicitante).IsUnicode(false);

                entity.Property(e => e.ResponsavelSat).IsUnicode(false);

                entity.Property(e => e.Tecnologia).IsUnicode(false);

                entity.Property(e => e.TipoSolucao).IsUnicode(false);

                entity.Property(e => e.TituloTarefa).IsUnicode(false);

                entity.HasOne(d => d.CodTarefaModuloNavigation)
                    .WithMany(p => p.Tarefas)
                    .HasForeignKey(d => d.CodTarefaModulo)
                    .HasConstraintName("FK_Tarefas_TarefasModulos");

                entity.HasOne(d => d.CodTarefaStatusNavigation)
                    .WithMany(p => p.Tarefas)
                    .HasForeignKey(d => d.CodTarefaStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Tarefas_Tarefas");

                entity.HasOne(d => d.CodUsuarioNavigation)
                    .WithMany(p => p.Tarefas)
                    .HasForeignKey(d => d.CodUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Tarefas_Usuario");
            });

            modelBuilder.Entity<TarefaImpacto>(entity =>
            {
                entity.HasKey(e => e.CodTarefaImpacto)
                    .HasName("PK_TarefaImpactoTempo");

                entity.Property(e => e.PorcentImpacto).IsUnicode(false);
            });

            modelBuilder.Entity<TarefaImpactoGrupo>(entity =>
            {
                entity.HasKey(e => e.CodTarefaImpactoGrupo)
                    .HasName("PK_TarefaImpacto");

                entity.Property(e => e.CodTarefaImpacto).IsFixedLength(true);

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("((1))");

                entity.Property(e => e.IndResolucaoSat).HasDefaultValueSql("((1))");

                entity.Property(e => e.NomeTarefaImpactoGrupo).IsUnicode(false);
            });

            modelBuilder.Entity<TarefaNotificacao>(entity =>
            {
                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.Descricao).IsUnicode(false);

                entity.HasOne(d => d.CodTarefaNavigation)
                    .WithMany(p => p.TarefaNotificacaos)
                    .HasForeignKey(d => d.CodTarefa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TarefaNotificacao_Tarefas");

                entity.HasOne(d => d.CodUsuarioNavigation)
                    .WithMany(p => p.TarefaNotificacaos)
                    .HasForeignKey(d => d.CodUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TarefaNotificacao_Usuario");
            });

            modelBuilder.Entity<TarefasAnalista>(entity =>
            {
                entity.Property(e => e.CodAnalista).ValueGeneratedOnAdd();

                entity.Property(e => e.NomeAnalista).IsUnicode(false);
            });

            modelBuilder.Entity<TarefasAnexo>(entity =>
            {
                entity.Property(e => e.DescricaoTarefaAnexo).IsUnicode(false);

                entity.Property(e => e.NomeArquivo).IsUnicode(false);

                entity.Property(e => e.NomeTarefaAnexo).IsUnicode(false);

                entity.HasOne(d => d.CodTarefaNavigation)
                    .WithMany(p => p.TarefasAnexos)
                    .HasForeignKey(d => d.CodTarefa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TarefasAnexos_Tarefas");
            });

            modelBuilder.Entity<TarefasModulo>(entity =>
            {
                entity.Property(e => e.IndAtivo).HasDefaultValueSql("((1))");

                entity.Property(e => e.NomeTarefaModulo).IsUnicode(false);

                entity.Property(e => e.NomeTarefaModuloAbrev).IsUnicode(false);
            });

            modelBuilder.Entity<TarefasObjetosAlterado>(entity =>
            {
                entity.HasKey(e => e.CodTarefaObjetoAlterado)
                    .HasName("PK_TarefasObjetosAfetados");

                entity.Property(e => e.DescricaoObjetoAlterado).IsUnicode(false);

                entity.Property(e => e.NomeObjetoAlterado).IsUnicode(false);
            });

            modelBuilder.Entity<TarefasOcorrencia>(entity =>
            {
                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.DataHoraTarefaOcorrencia).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DescricaoTarefaOcorrencia).IsUnicode(false);
            });

            modelBuilder.Entity<TarefasPausa>(entity =>
            {
                entity.Property(e => e.CodTarefaPausa).ValueGeneratedNever();

                entity.Property(e => e.DescricaoTarefaPausa).IsUnicode(false);
            });

            modelBuilder.Entity<TarefasStatus>(entity =>
            {
                entity.HasKey(e => e.CodTarefaStatus)
                    .HasName("PK_StatusTarefas");

                entity.Property(e => e.NomeTarefaStatus).IsUnicode(false);

                entity.Property(e => e.NomeTarefaStatusAbrev).IsUnicode(false);
            });

            modelBuilder.Entity<TarefasTipo>(entity =>
            {
                entity.Property(e => e.IndDesenvolvimento).HasDefaultValueSql("((1))");

                entity.Property(e => e.NomeTarefaTipo).IsUnicode(false);
            });

            modelBuilder.Entity<TbLogisticaBackUpTecnico>(entity =>
            {
                entity.HasIndex(e => e.CodTecnico, "_dta_index_tb_LogisticaBackUpTecnico_7_1296931892__K1_2_4")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodTecnico, e.CodPeca }, "_dta_index_tb_LogisticaBackUpTecnico_9_1296931892__K1_K2_4")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodTecnico, e.CodPeca }, "_dta_index_tb_LogisticaBackUpTecnico_c_9_1296931892__K1_K2")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodPeca, "in_tb_logisbkptecnico_codpeca")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodTecnico, "in_tb_logisticabackuptecnico_codtecnico")
                    .HasFillFactor((byte)90);
            });

            modelBuilder.Entity<TbLogisticaBackupMinimoPadrao>(entity =>
            {
                entity.Property(e => e.CodMagnus).IsUnicode(false);
            });

            modelBuilder.Entity<Tecnico>(entity =>
            {
                entity.HasKey(e => e.CodTecnico)
                    .HasName("PK__Tecnico__267ABA7A");

                entity.HasIndex(e => e.Apelido, "IX_TECNICO_APELIDO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.Nome, e.SimCardMobile }, "MelhoriasGPS_dta_index_Tecnico_7_302064262__K5_K34")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodFilial, e.CodAutorizada, e.IndAtivo, e.Nome, e.CodTecnico }, "Tecnico50")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodTecnico, "_dta_index_Tecnico_7_1839449727__K1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodTecnico, "_dta_index_Tecnico_7_1839449727__K1_4_9_15")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodAutorizada, e.CodTecnico, e.Nome }, "_dta_index_Tecnico_7_1839449727__K2_K1_K4")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.SimCardMobile, e.IndAtivo, e.Nome }, "_dta_index_Tecnico_7_2114262737__K34_K27_K5")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.SimCardMobile, e.CodFilial, e.CodTecnico }, "_dta_index_Tecnico_7_2114262737__K34_K3_K1_5_33")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IndTecnicoBancada, e.IndAtivo }, "_dta_index_Tecnico_7_302064262__K26_K27_1_5")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodTecnico, "_dta_index_Tecnico_7_636021497__K1_5")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IndAtivo, e.CodTecnico, e.Cpflogix, e.CodFilial, e.Nome }, "_dta_index_Tecnico_7_636021497__K27_K1_K38_K3_K5")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodFilial, "_dta_index_Tecnico_7_636021497__K3_34")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.Nome, e.CodAutorizada, e.IndAtivo, e.CodFilial }, "_dta_index_Tecnico_7_636021497__K5_K2_K27_K3_1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IndFerias, e.IndAtivo, e.IndTecnicoBancada, e.CodTecnico, e.CodFilial, e.CodSimCard }, "_dta_index_Tecnico_9_636021497__K40_K27_K26_K1_K3_K37_5_33")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodSimCard, "in_tecnico_codsimcard")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Cpflogix, "in_tecnico_cpflogix")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.Nome, e.IndAtivo }, "in_tecnico_nome_indativo")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodTecnico).ValueGeneratedNever();

                entity.Property(e => e.Apelido).IsUnicode(false);

                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.BairroCoordenadas).IsUnicode(false);

                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.CidadeCoordenadas).IsUnicode(false);

                entity.Property(e => e.Cnh).IsUnicode(false);

                entity.Property(e => e.Cnhcategorias).IsUnicode(false);

                entity.Property(e => e.Cnhvalidade).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.Cpf)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cpflogix).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.EnderecoComplemento).IsUnicode(false);

                entity.Property(e => e.EnderecoCoordenadas).IsUnicode(false);

                entity.Property(e => e.FinalidadesUso).IsUnicode(false);

                entity.Property(e => e.Fone).IsUnicode(false);

                entity.Property(e => e.FoneParticular).IsUnicode(false);

                entity.Property(e => e.FonePerto).IsUnicode(false);

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("((1))");

                entity.Property(e => e.Latitude).IsUnicode(false);

                entity.Property(e => e.Longitude).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.NumCrea).IsUnicode(false);

                entity.Property(e => e.PaisCoordenadas).IsUnicode(false);

                entity.Property(e => e.Rg).IsUnicode(false);

                entity.Property(e => e.SimCardMobile).IsUnicode(false);

                entity.Property(e => e.TrackerId).IsUnicode(false);

                entity.Property(e => e.Ufcoordenadas).IsUnicode(false);

                entity.HasOne(d => d.CodTipoRotaNavigation)
                    .WithMany(p => p.Tecnicos)
                    .HasForeignKey(d => d.CodTipoRota)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Tecnico_TipoRota");
            });

            modelBuilder.Entity<TecnicoAnalisador>(entity =>
            {
                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.Latitude).IsUnicode(false);

                entity.Property(e => e.Longitude).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<TecnicoContum>(entity =>
            {
                entity.HasKey(e => e.CodTecnicoConta)
                    .HasName("TecnicoConta_PK");

                entity.HasIndex(e => new { e.NumAgencia, e.NumBanco, e.NumConta }, "BancoAgenciaConta")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("((1))");

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumBanco).IsUnicode(false);

                entity.Property(e => e.NumConta).IsUnicode(false);

                entity.HasOne(d => d.CodTecnicoNavigation)
                    .WithMany(p => p.TecnicoConta)
                    .HasForeignKey(d => d.CodTecnico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Tecnico_TecnicoConta_FK1");
            });

            modelBuilder.Entity<TecnicoDeslocamento>(entity =>
            {
                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EnderecoDestino).IsUnicode(false);

                entity.Property(e => e.EnderecoOrigem).IsUnicode(false);

                entity.Property(e => e.NomeCidadeDestino).IsUnicode(false);

                entity.Property(e => e.NomeCidadeOrigem).IsUnicode(false);

                entity.Property(e => e.NumDestino).IsUnicode(false);

                entity.Property(e => e.NumOrigem).IsUnicode(false);

                entity.Property(e => e.Ufdestino).IsUnicode(false);

                entity.Property(e => e.Uforigem).IsUnicode(false);
            });

            modelBuilder.Entity<TecnicoDeslocamentoAnalise>(entity =>
            {
                entity.HasKey(e => e.CodTecnicoDeslocamentoAnalise)
                    .HasName("PK_DeslocamentoAnalise");

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Destino).IsUnicode(false);

                entity.Property(e => e.LatDestino).IsUnicode(false);

                entity.Property(e => e.LatOrigem).IsUnicode(false);

                entity.Property(e => e.LngDestino).IsUnicode(false);

                entity.Property(e => e.LngOrigem).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.Notificacao).IsUnicode(false);

                entity.Property(e => e.Origem).IsUnicode(false);
            });

            modelBuilder.Entity<TecnicoEquipamento>(entity =>
            {
                entity.HasKey(e => e.CodTechEquip)
                    .HasName("PK__TecnicoE__AB11E63CD9395000");

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.HasOne(d => d.CodEquipContratoNavigation)
                    .WithMany(p => p.TecnicoEquipamentos)
                    .HasForeignKey(d => d.CodEquipContrato)
                    .HasConstraintName("FK__TecnicoEq__CodEq__3BE36B7E");

                entity.HasOne(d => d.CodFilialNavigation)
                    .WithMany(p => p.TecnicoEquipamentos)
                    .HasForeignKey(d => d.CodFilial)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__TecnicoEq__CodFi__3CD78FB7");

                entity.HasOne(d => d.CodUsuarioNavigation)
                    .WithMany(p => p.TecnicoEquipamentos)
                    .HasForeignKey(d => d.CodUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__TecnicoEq__CodUs__3DCBB3F0");
            });

            modelBuilder.Entity<TecnicoProdutividade>(entity =>
            {
                entity.Property(e => e.Controle).IsUnicode(false);

                entity.Property(e => e.DataHoraManut).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<TecnicoReincidencium>(entity =>
            {
                entity.HasKey(e => e.CodTecnicoReincidencia)
                    .HasName("PK_TecnicoPendencia");

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.NomeTecnico).IsUnicode(false);
            });

            modelBuilder.Entity<TecnicoVeiculo>(entity =>
            {
                entity.HasKey(e => e.CodTecnicoVeiculo)
                    .HasName("TecnicoVeiculo_PK");

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("((1))");

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.Placa).IsUnicode(false);

                entity.HasOne(d => d.CodTecnicoNavigation)
                    .WithMany(p => p.TecnicoVeiculos)
                    .HasForeignKey(d => d.CodTecnico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Tecnico_TecnicoVeiculo_FK1");

                entity.HasOne(d => d.CodVeiculoCombustivelNavigation)
                    .WithMany(p => p.TecnicoVeiculos)
                    .HasForeignKey(d => d.CodVeiculoCombustivel)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("VeiculoCombustivel_TecnicoVeiculo_FK1");
            });

            modelBuilder.Entity<TecnicoXlider>(entity =>
            {
                entity.Property(e => e.CodTecnicoXlider).ValueGeneratedOnAdd();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioLider).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<Temp>(entity =>
            {
                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);
            });

            modelBuilder.Entity<TempGraficoTarefa>(entity =>
            {
                entity.Property(e => e.DataHora).IsUnicode(false);
            });

            modelBuilder.Entity<TempGraficoTarefas2>(entity =>
            {
                entity.Property(e => e.DataHora).IsUnicode(false);
            });

            modelBuilder.Entity<TempOsPonto>(entity =>
            {
                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.MesAno).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.SimCard).IsUnicode(false);
            });

            modelBuilder.Entity<TempPecasConsolidado>(entity =>
            {
                entity.Property(e => e.CodItem).IsUnicode(false);
            });

            modelBuilder.Entity<TempPecasLogix>(entity =>
            {
                entity.Property(e => e.CodFornecedor).IsUnicode(false);

                entity.Property(e => e.CodItem).IsUnicode(false);

                entity.Property(e => e.CpfTecnico).IsUnicode(false);

                entity.Property(e => e.DenItem).IsUnicode(false);

                entity.Property(e => e.NomTecnico).IsUnicode(false);
            });

            modelBuilder.Entity<TempPecasRat>(entity =>
            {
                entity.Property(e => e.CodItem).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);
            });

            modelBuilder.Entity<TempSlabancoob>(entity =>
            {
                entity.Property(e => e.SiglaUf).IsUnicode(false);
            });

            modelBuilder.Entity<TempSlabanrisul>(entity =>
            {
                entity.Property(e => e.SiglaUf).IsUnicode(false);
            });

            modelBuilder.Entity<TempSlabanrisulpo>(entity =>
            {
                entity.Property(e => e.SiglaUf).IsUnicode(false);
            });

            modelBuilder.Entity<TempSlabasa>(entity =>
            {
                entity.Property(e => e.SiglaUf).IsUnicode(false);
            });

            modelBuilder.Entity<TempSlabb>(entity =>
            {
                entity.Property(e => e.SiglaUf).IsUnicode(false);
            });

            modelBuilder.Entity<TempSlabbd>(entity =>
            {
                entity.Property(e => e.SiglaUf).IsUnicode(false);
            });

            modelBuilder.Entity<TempSlabbdfilial>(entity =>
            {
                entity.Property(e => e.CodFilial).IsUnicode(false);
            });

            modelBuilder.Entity<TempSlabnb>(entity =>
            {
                entity.Property(e => e.SiglaUf).IsUnicode(false);
            });

            modelBuilder.Entity<TempSlabnbfilial>(entity =>
            {
                entity.Property(e => e.CodFilial).IsUnicode(false);
            });

            modelBuilder.Entity<TempSlabrb>(entity =>
            {
                entity.Property(e => e.SiglaUf).IsUnicode(false);
            });

            modelBuilder.Entity<TempSlacef>(entity =>
            {
                entity.Property(e => e.SiglaUf).IsUnicode(false);
            });

            modelBuilder.Entity<TempSlacef5853>(entity =>
            {
                entity.Property(e => e.CodFilial).IsUnicode(false);
            });

            modelBuilder.Entity<TempSlacef5855>(entity =>
            {
                entity.Property(e => e.CodFilial).IsUnicode(false);
            });

            modelBuilder.Entity<TempSlacefcontrato>(entity =>
            {
                entity.Property(e => e.NomeContrato1).IsUnicode(false);

                entity.Property(e => e.NomeContrato2).IsUnicode(false);

                entity.Property(e => e.NomeContrato3).IsUnicode(false);

                entity.Property(e => e.SiglaUf1).IsUnicode(false);

                entity.Property(e => e.SiglaUf2).IsUnicode(false);

                entity.Property(e => e.SiglaUf3).IsUnicode(false);
            });

            modelBuilder.Entity<TempSlaceffilial>(entity =>
            {
                entity.Property(e => e.CodFilial).IsUnicode(false);
            });

            modelBuilder.Entity<TempSlaceffilialEc>(entity =>
            {
                entity.Property(e => e.CodFilial).IsUnicode(false);
            });

            modelBuilder.Entity<TempSlacobra>(entity =>
            {
                entity.Property(e => e.SiglaUf).IsUnicode(false);
            });

            modelBuilder.Entity<TempSlacobraDispBb>(entity =>
            {
                entity.Property(e => e.CodFilial).IsUnicode(false);
            });

            modelBuilder.Entity<TempSlacobraFilial>(entity =>
            {
                entity.Property(e => e.CodFilial).IsUnicode(false);
            });

            modelBuilder.Entity<TempSlacobraFilial2>(entity =>
            {
                entity.Property(e => e.CodFilial).IsUnicode(false);
            });

            modelBuilder.Entity<TempSlacobraFilial3>(entity =>
            {
                entity.Property(e => e.CodFilial).IsUnicode(false);
            });

            modelBuilder.Entity<TempSlacorreio>(entity =>
            {
                entity.Property(e => e.SiglaUf).IsUnicode(false);
            });

            modelBuilder.Entity<TempSladicico>(entity =>
            {
                entity.Property(e => e.SiglaUf).IsUnicode(false);
            });

            modelBuilder.Entity<TempSladigicon>(entity =>
            {
                entity.Property(e => e.SiglaUf).IsUnicode(false);
            });

            modelBuilder.Entity<TempSlageral>(entity =>
            {
                entity.Property(e => e.SiglaUf).IsUnicode(false);
            });

            modelBuilder.Entity<TempSlageralFilial>(entity =>
            {
                entity.Property(e => e.CodFilial).IsUnicode(false);
            });

            modelBuilder.Entity<TempSlahering>(entity =>
            {
                entity.Property(e => e.SiglaUf).IsUnicode(false);
            });

            modelBuilder.Entity<TempSlahsbc>(entity =>
            {
                entity.Property(e => e.SiglaUf).IsUnicode(false);
            });

            modelBuilder.Entity<TempSlasicredi24>(entity =>
            {
                entity.Property(e => e.SiglaUf).IsUnicode(false);
            });

            modelBuilder.Entity<TempSlasicredi48>(entity =>
            {
                entity.Property(e => e.SiglaUf).IsUnicode(false);
            });

            modelBuilder.Entity<TempSlasicredi72>(entity =>
            {
                entity.Property(e => e.SiglaUf).IsUnicode(false);
            });

            modelBuilder.Entity<TempSlatendtudo>(entity =>
            {
                entity.Property(e => e.SiglaUf).IsUnicode(false);
            });

            modelBuilder.Entity<TempSlideReinc7Dia>(entity =>
            {
                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeTecnico).IsUnicode(false);
            });

            modelBuilder.Entity<TempoAtendimentoPo>(entity =>
            {
                entity.Property(e => e.Cor).IsUnicode(false);

                entity.Property(e => e.NomeTempoAtendimentoPos).IsUnicode(false);
            });

            modelBuilder.Entity<Testeinterop>(entity =>
            {
                entity.Property(e => e.Teste1).IsFixedLength(true);

                entity.Property(e => e.Teste2).IsFixedLength(true);
            });

            modelBuilder.Entity<TextoArqBanri>(entity =>
            {
                entity.Property(e => e.Texto).IsUnicode(false);
            });

            modelBuilder.Entity<TicketLogCredito>(entity =>
            {
                entity.Property(e => e.CodigoCredito).IsUnicode(false);

                entity.Property(e => e.DataHoraConsulta).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdentificadorCartao).IsUnicode(false);

                entity.Property(e => e.Justificativa).IsUnicode(false);

                entity.Property(e => e.NomeCompleto).IsUnicode(false);

                entity.Property(e => e.NumeroCartao).IsUnicode(false);

                entity.Property(e => e.Placa).IsUnicode(false);

                entity.Property(e => e.Situacao).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e.TipoCredito).IsUnicode(false);
            });

            modelBuilder.Entity<TicketLogFaturamento>(entity =>
            {
                entity.Property(e => e.DescricaoGrupo).IsUnicode(false);

                entity.Property(e => e.NumeroCartao).IsUnicode(false);
            });

            modelBuilder.Entity<TicketLogPedidoCredito>(entity =>
            {
                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NumeroCartao).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);
            });

            modelBuilder.Entity<TicketLogTransacao>(entity =>
            {
                entity.Property(e => e.CnpjEstabelecimento).IsUnicode(false);

                entity.Property(e => e.CodigoServico).IsUnicode(false);

                entity.Property(e => e.ControlaHodometro).IsUnicode(false);

                entity.Property(e => e.ControlaHorimetro).IsUnicode(false);

                entity.Property(e => e.ControleDesempenho).IsUnicode(false);

                entity.Property(e => e.Cor).IsUnicode(false);

                entity.Property(e => e.DataHoraConsulta).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DescricaoSeriePos).IsUnicode(false);

                entity.Property(e => e.ExibeMediaQuilometragem).IsUnicode(false);

                entity.Property(e => e.GrupoRestricaoTransacao).IsUnicode(false);

                entity.Property(e => e.GrupoRestricaoVeiculo).IsUnicode(false);

                entity.Property(e => e.NomeCidade).IsUnicode(false);

                entity.Property(e => e.NomeMotorista).IsUnicode(false);

                entity.Property(e => e.NomeReduzidoEstabelecimento).IsUnicode(false);

                entity.Property(e => e.NumeroCartao).IsUnicode(false);

                entity.Property(e => e.NumeroTerminal).IsUnicode(false);

                entity.Property(e => e.Placa).IsUnicode(false);

                entity.Property(e => e.Principal).IsUnicode(false);

                entity.Property(e => e.Responsavel).IsUnicode(false);

                entity.Property(e => e.SegmentoVeiculo).IsUnicode(false);

                entity.Property(e => e.Servico).IsUnicode(false);

                entity.Property(e => e.TipoCombustivel).IsUnicode(false);

                entity.Property(e => e.TipoFrota).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);

                entity.Property(e => e.VeiculoFabricante).IsUnicode(false);

                entity.Property(e => e.VeiculoModelo).IsUnicode(false);
            });

            modelBuilder.Entity<TicketLogUsuarioCartaoPlaca>(entity =>
            {
                entity.Property(e => e.ControlaHodometro).IsUnicode(false);

                entity.Property(e => e.ControlaHorimetro).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DescricaoModeloVeiculo).IsUnicode(false);

                entity.Property(e => e.DescricaoTipoCombustivel).IsUnicode(false);

                entity.Property(e => e.DescricaoTipoFrota).IsUnicode(false);

                entity.Property(e => e.NomeResponsavel).IsUnicode(false);

                entity.Property(e => e.NumeroCartao).IsUnicode(false);

                entity.Property(e => e.Placa).IsUnicode(false);

                entity.Property(e => e.Situacao).IsUnicode(false);

                entity.Property(e => e.SituacaoVeiculo).IsUnicode(false);

                entity.Property(e => e.Temporario).IsUnicode(false);

                entity.Property(e => e.TrackOnline).IsUnicode(false);

                entity.Property(e => e.VeiculoCidade).IsUnicode(false);

                entity.Property(e => e.VeiculoFabricante).IsUnicode(false);

                entity.Property(e => e.VeiculoUf).IsUnicode(false);
            });

            modelBuilder.Entity<TipoCausa>(entity =>
            {
                entity.HasKey(e => e.CodTipoCausa)
                    .HasName("PK__TipoCausa__619B8048");

                entity.Property(e => e.CodTipoCausa).ValueGeneratedNever();

                entity.Property(e => e.CodEtipoCausa).IsUnicode(false);

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("(1)");

                entity.Property(e => e.NomeTipoCausa).IsUnicode(false);
            });

            modelBuilder.Entity<TipoChamadoStn>(entity =>
            {
                entity.HasKey(e => e.CodTipoChamadoStn)
                    .HasName("PK__TipoCham__4328E0ED1F8ADB60");

                entity.Property(e => e.DescTipoChamadoStn).IsUnicode(false);
            });

            modelBuilder.Entity<TipoComunicacao>(entity =>
            {
                entity.HasIndex(e => e.TipoComunicacao1, "UK_TipoComunicacao")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TipoComunicacao1).IsUnicode(false);
            });

            modelBuilder.Entity<TipoComunicacaoDePara>(entity =>
            {
                entity.HasIndex(e => e.CodTipoComunicacao, "IX_TipoComunicacaoDePara")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodCliente, "IX_TipoComunicacaoDePara_1")
                    .HasFillFactor((byte)90);

                entity.HasOne(d => d.CodClienteNavigation)
                    .WithMany(p => p.TipoComunicacaoDeParas)
                    .HasForeignKey(d => d.CodCliente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TipoComunicacaoDePara_Cliente");

                entity.HasOne(d => d.CodTipoComunicacaoNavigation)
                    .WithMany(p => p.TipoComunicacaoDeParas)
                    .HasForeignKey(d => d.CodTipoComunicacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TipoComunicacaoDePara_TipoComunicacao");
            });

            modelBuilder.Entity<TipoContrato>(entity =>
            {
                entity.HasKey(e => e.CodTipoContrato)
                    .HasName("PK__TipoContrato__5B988E2F");

                entity.Property(e => e.CodTipoContrato).ValueGeneratedNever();

                entity.Property(e => e.NomeTipoContrato).IsUnicode(false);
            });

            modelBuilder.Entity<TipoDeParaEquipamentoPo>(entity =>
            {
                entity.HasIndex(e => e.NomeTipoDeParaEquipamentoPos, "IX_TipoDeParaEquipamentoPOS")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NomeTipoDeParaEquipamentoPos).IsUnicode(false);
            });

            modelBuilder.Entity<TipoDesconto>(entity =>
            {
                entity.HasKey(e => e.CodTipoDesconto)
                    .HasName("PK__TipoDesconto__20988F49");

                entity.Property(e => e.CodTipoDesconto).ValueGeneratedNever();

                entity.Property(e => e.NomeTipoDesc).IsUnicode(false);

                entity.Property(e => e.SiglaTipoDesc).IsUnicode(false);
            });

            modelBuilder.Entity<TipoEquipamento>(entity =>
            {
                entity.HasKey(e => e.CodTipoEquip)
                    .HasName("PK__TipoEquipamento__7A9C383C");

                entity.Property(e => e.CodTipoEquip).ValueGeneratedNever();

                entity.Property(e => e.CodEtipoEquip).IsUnicode(false);

                entity.Property(e => e.NomeTipoEquip).IsUnicode(false);
            });

            modelBuilder.Entity<TipoFrete>(entity =>
            {
                entity.HasKey(e => e.CodTipoFrete)
                    .HasName("PK__Frete__69B26EB3");

                entity.Property(e => e.CodTipoFrete).ValueGeneratedNever();

                entity.Property(e => e.DescTipoFrete).IsUnicode(false);

                entity.Property(e => e.NomeTipoFrete).IsUnicode(false);

                entity.Property(e => e.SiglaTipoFrete).IsUnicode(false);
            });

            modelBuilder.Entity<TipoGarantium>(entity =>
            {
                entity.HasKey(e => e.CodTipoGarantia)
                    .HasName("PK__TipoGarantia__6379A719");

                entity.Property(e => e.CodTipoGarantia).ValueGeneratedNever();

                entity.Property(e => e.DescTipoGarantia).IsUnicode(false);

                entity.Property(e => e.NomeTipoGarantia).IsUnicode(false);

                entity.Property(e => e.SiglaTipoGarantia).IsUnicode(false);
            });

            modelBuilder.Entity<TipoHistoricoEquipamentoPo>(entity =>
            {
                entity.Property(e => e.Nome).IsUnicode(false);
            });

            modelBuilder.Entity<TipoIndiceReajuste>(entity =>
            {
                entity.Property(e => e.NomeTipoIndiceReajuste).IsUnicode(false);
            });

            modelBuilder.Entity<TipoIntervencao>(entity =>
            {
                entity.HasKey(e => e.CodTipoIntervencao)
                    .HasName("PK__TipoIntervencao__66603565");

                entity.Property(e => e.CodTipoIntervencao).ValueGeneratedNever();

                entity.Property(e => e.CodEtipoIntervencao).IsUnicode(false);

                entity.Property(e => e.NomTipoIntervencao).IsUnicode(false);
            });

            modelBuilder.Entity<TipoLocalAtendimento>(entity =>
            {
                entity.Property(e => e.NomeTipoLocalAtendimento).IsUnicode(false);
            });

            modelBuilder.Entity<TipoMercado>(entity =>
            {
                entity.Property(e => e.CodTipoMercado).ValueGeneratedNever();

                entity.Property(e => e.NomeTipoMercado).IsUnicode(false);
            });

            modelBuilder.Entity<TipoMidiaPo>(entity =>
            {
                entity.HasIndex(e => e.NomeTipoMidiaPos, "IX_TipoMidiaPOS")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NomeTipoMidiaPos).IsUnicode(false);
            });

            modelBuilder.Entity<TipoMultum>(entity =>
            {
                entity.HasKey(e => e.CodTipoMulta)
                    .HasName("PK__TipoMulta__6932806F");

                entity.Property(e => e.CodTipoMulta).ValueGeneratedNever();

                entity.Property(e => e.DescTipoMulta).IsUnicode(false);

                entity.Property(e => e.NomeTipoMulta).IsUnicode(false);
            });

            modelBuilder.Entity<TipoOr>(entity =>
            {
                entity.HasKey(e => e.CodTipoOr)
                    .HasName("PK__TipoOR__4437CDD6D8080FA3");

                entity.Property(e => e.CodTipoOr).ValueGeneratedNever();

                entity.Property(e => e.DescricaoTipo).IsUnicode(false);
            });

            modelBuilder.Entity<TipoOsgeracao>(entity =>
            {
                entity.HasIndex(e => e.NomeTipoOsGeracao, "IX_TipoOSGeracao")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NomeTipoOsGeracao).IsUnicode(false);
            });

            modelBuilder.Entity<TipoPercMultum>(entity =>
            {
                entity.HasKey(e => e.CodTipoPercMulta)
                    .HasName("PK__TipoPercMulta__665613C4");

                entity.Property(e => e.CodTipoPercMulta).ValueGeneratedNever();

                entity.Property(e => e.DescTipoPercMulta).IsUnicode(false);

                entity.Property(e => e.NomeTipoPercMulta).IsUnicode(false);
            });

            modelBuilder.Entity<TipoReinc>(entity =>
            {
                entity.Property(e => e.NomeTipoReinc).IsUnicode(false);
            });

            modelBuilder.Entity<TipoRetencao>(entity =>
            {
                entity.HasKey(e => e.CodTipoRetencao)
                    .HasName("PK__TipoRetencao__6FDF7DFE");

                entity.Property(e => e.CodTipoRetencao).ValueGeneratedNever();

                entity.Property(e => e.DescTipoRetencao).IsUnicode(false);

                entity.Property(e => e.NomeTipoRetencao).IsUnicode(false);
            });

            modelBuilder.Entity<TipoRotum>(entity =>
            {
                entity.Property(e => e.CodTipoRota).ValueGeneratedNever();

                entity.Property(e => e.NomeTipoRota).IsUnicode(false);
            });

            modelBuilder.Entity<TipoServico>(entity =>
            {
                entity.HasKey(e => e.CodServico)
                    .HasName("PK__TipoServico__20C1E124");

                entity.Property(e => e.CodServico).ValueGeneratedNever();

                entity.Property(e => e.CodEtipoServico).IsUnicode(false);

                entity.Property(e => e.NomeServico).IsUnicode(false);
            });

            modelBuilder.Entity<TipoTecnicoLaboratorio>(entity =>
            {
                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.TipoItens).IsUnicode(false);
            });

            modelBuilder.Entity<TipoUsuario>(entity =>
            {
                entity.HasIndex(e => e.CodUsuarioCadastro, "IX_TipoUsuario")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.NomeTipoUsuario).IsUnicode(false);

                entity.HasOne(d => d.CodUsuarioCadastroNavigation)
                    .WithMany(p => p.TipoUsuarios)
                    .HasForeignKey(d => d.CodUsuarioCadastro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TipoUsuario_Usuario");
            });

            modelBuilder.Entity<TipoUsuarioMenuPo>(entity =>
            {
                entity.HasIndex(e => e.CodTipoUsuario, "IX_TipoUsuarioMenuPOS")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodMenu, "IX_TipoUsuarioMenuPOS_1")
                    .HasFillFactor((byte)90);

                entity.HasOne(d => d.CodMenuNavigation)
                    .WithMany(p => p.TipoUsuarioMenuPos)
                    .HasForeignKey(d => d.CodMenu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TipoUsuarioMenuPOS_MenuPOS");

                entity.HasOne(d => d.CodTipoUsuarioNavigation)
                    .WithMany(p => p.TipoUsuarioMenuPos)
                    .HasForeignKey(d => d.CodTipoUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TipoUsuarioMenuPOS_TipoUsuario");
            });

            modelBuilder.Entity<TipoVeloh3>(entity =>
            {
                entity.HasKey(e => e.CodTipoVeloh3)
                    .HasName("PK_TipoVelo3");

                entity.HasIndex(e => e.TipoVeloh31, "UK_TipoVelo3")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TipoVeloh31).IsUnicode(false);
            });

            modelBuilder.Entity<TmpCalculaIndiceQuebra>(entity =>
            {
                entity.Property(e => e.DescricaoPeca).IsUnicode(false);

                entity.Property(e => e.MagnusPeca).IsUnicode(false);

                entity.Property(e => e.Pai).IsUnicode(false);
            });

            modelBuilder.Entity<TmpCalculaIndiceQuebraPorCliente>(entity =>
            {
                entity.Property(e => e.DescricaoPeca).IsUnicode(false);

                entity.Property(e => e.MagnusPeca).IsUnicode(false);

                entity.Property(e => e.Pai).IsUnicode(false);
            });

            modelBuilder.Entity<TmpCalculaParque>(entity =>
            {
                entity.Property(e => e.Pai).IsUnicode(false);
            });

            modelBuilder.Entity<TmpCalculaParqueMese>(entity =>
            {
                entity.Property(e => e.Pai).IsUnicode(false);
            });

            modelBuilder.Entity<TmpCalculaParqueTotal>(entity =>
            {
                entity.Property(e => e.Pai).IsUnicode(false);
            });

            modelBuilder.Entity<TmpMonitoramento>(entity =>
            {
                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<TmpPecasPendente>(entity =>
            {
                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);
            });

            modelBuilder.Entity<TmpPecasPendentes2>(entity =>
            {
                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);

                entity.Property(e => e.Ordem).IsUnicode(false);
            });

            modelBuilder.Entity<TmpPecasPendentes2Filial>(entity =>
            {
                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);

                entity.Property(e => e.Ordem).IsUnicode(false);
            });

            modelBuilder.Entity<TmpVeloh>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.NumSerie).IsUnicode(false);
            });

            modelBuilder.Entity<Traducao>(entity =>
            {
                entity.HasIndex(e => new { e.CodTraducao, e.CodLingua }, "XAK1TraducaoLingua")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodEtraducao).IsUnicode(false);

                entity.Property(e => e.DescTraducao).IsUnicode(false);

                entity.Property(e => e.NomeTraducao).IsUnicode(false);

                entity.HasOne(d => d.CodLinguaNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodLingua)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Traducao__CodLin__493AB229");
            });

            modelBuilder.Entity<TraducaoInterface>(entity =>
            {
                entity.Property(e => e.Portugues).IsUnicode(false);

                entity.Property(e => e.CodTraducaoInterface).ValueGeneratedOnAdd();

                entity.Property(e => e.Espanhol).IsUnicode(false);

                entity.Property(e => e.Ingles).IsUnicode(false);
            });

            modelBuilder.Entity<Transportadora>(entity =>
            {
                entity.HasKey(e => e.CodTransportadora)
                    .HasName("PK__Transportadoras__477199F1");

                entity.Property(e => e.CodTransportadora).ValueGeneratedNever();

                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.Celular).IsUnicode(false);

                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.Cnpj).IsUnicode(false);

                entity.Property(e => e.ComplemEnd).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.Fax).IsUnicode(false);

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("(1)");

                entity.Property(e => e.NomeResponsavel).IsUnicode(false);

                entity.Property(e => e.NomeTransportadora).IsUnicode(false);

                entity.Property(e => e.NumeroEnd).IsUnicode(false);

                entity.Property(e => e.Pais).IsUnicode(false);

                entity.Property(e => e.RazaoSocial).IsUnicode(false);

                entity.Property(e => e.Site).IsUnicode(false);

                entity.Property(e => e.Telefone1).IsUnicode(false);

                entity.Property(e => e.Telefone2).IsUnicode(false);

                entity.HasOne(d => d.CodCidadeNavigation)
                    .WithMany(p => p.Transportadoras)
                    .HasForeignKey(d => d.CodCidade)
                    .HasConstraintName("FK_Transportadoras_Cidade");
            });

            modelBuilder.Entity<Turno>(entity =>
            {
                entity.HasKey(e => e.CodTurno)
                    .HasName("PK__Turno__143CDA05");

                entity.Property(e => e.CodTurno).ValueGeneratedNever();

                entity.Property(e => e.DescTurno).IsUnicode(false);

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("(1)");
            });

            modelBuilder.Entity<Uf>(entity =>
            {
                entity.HasKey(e => e.CodUf)
                    .HasName("PK__UF__7C255952");

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("((1))");

                entity.Property(e => e.NomeUf).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.HasOne(d => d.CodUsuarioCadNavigation)
                    .WithMany(p => p.UfCodUsuarioCadNavigations)
                    .HasForeignKey(d => d.CodUsuarioCad)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UF_UsuarioCad");

                entity.HasOne(d => d.CodUsuarioManutNavigation)
                    .WithMany(p => p.UfCodUsuarioManutNavigations)
                    .HasForeignKey(d => d.CodUsuarioManut)
                    .HasConstraintName("FK_UF_UsuarioManut");
            });

            modelBuilder.Entity<Ufregiao>(entity =>
            {
                entity.Property(e => e.CodUfregiao).ValueGeneratedOnAdd();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);
            });

            modelBuilder.Entity<Usuario>(entity =>
            {
                entity.HasKey(e => e.CodUsuario)
                    .HasName("PK__Usuario__1293BD5E");

                entity.HasIndex(e => new { e.IndAtivo, e.CodTecnico, e.CodPerfil }, "IDX_USUARIO_IndAtivo_CodTecnico_CodPerfil_ADV")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodTecnico, "IX_USUARIO_CODTECNICO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IndAtivo, "IX_USUARIO_INDATIVO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodUsuario, e.NomeUsuario }, "Usuario81")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodUsuario, e.CodTecnico }, "_dta_index_Usuario_7_1737161334__K1_K4_10_15")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodCliente, e.IndAtivo, e.CodUsuario, e.CodTurno, e.CodCargo, e.CodFilialPonto, e.CodPerfil, e.NomeUsuario, e.NumCracha }, "_dta_index_Usuario_7_1737161334__K5_K29_K1_K8_K6_K10_K13_K15_K25")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IndAtivo, e.IndPonto, e.CodUsuario, e.CodTecnico, e.CodTurno }, "_dta_index_Usuario_9_912264413__K31_K37_K1_K4_K8_2")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IndAtivo, e.CodTecnico, e.CodPerfil }, "idx_Usuario")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodUsuario, "ix_usuario_codnome")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.CodContrato).IsUnicode(false);

                entity.Property(e => e.CodRelatorioNaoMostrado).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.Complemento).IsUnicode(false);

                entity.Property(e => e.Cpf).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.Fax).IsUnicode(false);

                entity.Property(e => e.Fone).IsUnicode(false);

                entity.Property(e => e.InstalPerfilPagina).IsUnicode(false);

                entity.Property(e => e.NomeUsuario).IsUnicode(false);

                entity.Property(e => e.NumCracha).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.Ramal).IsUnicode(false);

                entity.HasOne(d => d.CodAutorizadaNavigation)
                    .WithMany(p => p.Usuarios)
                    .HasForeignKey(d => d.CodAutorizada)
                    .HasConstraintName("FK_Usuario_Autorizada");

                entity.HasOne(d => d.CodCidadeNavigation)
                    .WithMany(p => p.Usuarios)
                    .HasForeignKey(d => d.CodCidade)
                    .HasConstraintName("FK_Usuario_Cidade");

                entity.HasOne(d => d.CodFilialNavigation)
                    .WithMany(p => p.UsuarioCodFilialNavigations)
                    .HasForeignKey(d => d.CodFilial)
                    .HasConstraintName("FK_Usuario_Filial");

                entity.HasOne(d => d.CodFilialPontoNavigation)
                    .WithMany(p => p.UsuarioCodFilialPontoNavigations)
                    .HasForeignKey(d => d.CodFilialPonto)
                    .HasConstraintName("FK_Usuario_FilialPonto");
            });

            modelBuilder.Entity<UsuarioDashboard>(entity =>
            {
                entity.HasKey(e => e.CodUsuarioDashboard)
                    .HasName("PK_UsuarioHD");

                entity.HasIndex(e => e.CodUsuario, "IX_UsuarioHD")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.HasOne(d => d.CodDashboardNavigation)
                    .WithMany(p => p.UsuarioDashboards)
                    .HasForeignKey(d => d.CodDashboard)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsuarioDashboard_Dashboard");

                entity.HasOne(d => d.CodUsuarioNavigation)
                    .WithMany(p => p.UsuarioDashboards)
                    .HasForeignKey(d => d.CodUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsuarioHD_Usuario");
            });

            modelBuilder.Entity<UsuarioFoto>(entity =>
            {
                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NomeFoto).IsUnicode(false);
            });

            modelBuilder.Entity<UsuarioMenu>(entity =>
            {
                entity.HasKey(e => new { e.CodUsuario, e.CodMenu });

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.CodMenuNavigation)
                    .WithMany(p => p.UsuarioMenus)
                    .HasForeignKey(d => d.CodMenu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsuarioMenu_Menu");

                entity.HasOne(d => d.CodUsuarioNavigation)
                    .WithMany(p => p.UsuarioMenus)
                    .HasForeignKey(d => d.CodUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsuarioMenu_Usuario");
            });

            modelBuilder.Entity<UsuarioNovaSenha>(entity =>
            {
                entity.HasIndex(e => e.CodUsuario, "IX_UsuarioNovaSenha")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.Token).IsUnicode(false);

                entity.Property(e => e.Url).IsUnicode(false);

                entity.HasOne(d => d.CodUsuarioNavigation)
                    .WithMany(p => p.UsuarioNovaSenhas)
                    .HasForeignKey(d => d.CodUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsuarioNovaSenha_Usuario");
            });

            modelBuilder.Entity<UsuarioPermissaoEspecial>(entity =>
            {
                entity.HasIndex(e => e.CodUsuario, "IX_UsuarioPermissaoEspecial")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.HasOne(d => d.CodUsuarioNavigation)
                    .WithOne(p => p.UsuarioPermissaoEspecial)
                    .HasForeignKey<UsuarioPermissaoEspecial>(d => d.CodUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsuarioPermissaoEspecial_Usuario");
            });

            modelBuilder.Entity<UsuarioSeguranca>(entity =>
            {
                entity.HasKey(e => e.CodUsuario)
                    .HasName("PK_UsuarioSeguranca_1");

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);
            });

            modelBuilder.Entity<UsuarioTipoUsuario>(entity =>
            {
                entity.HasIndex(e => e.CodTipoUsuario, "IX_UsuarioTipoUsuario")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodUsuarioCadastro, "IX_UsuarioTipoUsuario_1")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.HasOne(d => d.CodTipoUsuarioNavigation)
                    .WithMany(p => p.UsuarioTipoUsuarios)
                    .HasForeignKey(d => d.CodTipoUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsuarioTipoUsuario_TipoUsuario");

                entity.HasOne(d => d.CodUsuarioNavigation)
                    .WithOne(p => p.UsuarioTipoUsuarioCodUsuarioNavigation)
                    .HasForeignKey<UsuarioTipoUsuario>(d => d.CodUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsuarioTipoUsuario_Usuario");

                entity.HasOne(d => d.CodUsuarioCadastroNavigation)
                    .WithMany(p => p.UsuarioTipoUsuarioCodUsuarioCadastroNavigations)
                    .HasForeignKey(d => d.CodUsuarioCadastro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsuarioTipoUsuario_Usuario1");
            });

            modelBuilder.Entity<ValorServico>(entity =>
            {
                entity.HasKey(e => e.CodValorServico)
                    .HasName("PK__ValorServico__5CF6C6BC");

                entity.HasIndex(e => new { e.CodServico, e.CodSla, e.CodAutorizada, e.CodFilial, e.CodContrato, e.CodTipoEquip, e.CodGrupoEquip, e.CodEquip, e.CodRegiao, e.CodCliente }, "_dta_index_ValorServico_7_1633545003__K9_K3_K4_K5_K2_K6_K7_K8_K16_K18_1_10_11")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CodServico, e.CodAutorizada, e.CodFilial, e.CodCliente, e.CodContrato, e.CodSla }, "_dta_index_ValorServico_7_1633545003__K9_K4_K5_K18_K2_K3_6_7_8_10_11_16")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManutencao).IsUnicode(false);

                entity.Property(e => e.DataHoraCadastro).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("((1))");

                entity.Property(e => e.ValorInstalacao).HasDefaultValueSql("((0))");

                entity.Property(e => e.ValorServico1).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.CodClienteNavigation)
                    .WithMany(p => p.ValorServicos)
                    .HasForeignKey(d => d.CodCliente)
                    .HasConstraintName("FK_ValorServico_Cliente");

                entity.HasOne(d => d.CodContratoNavigation)
                    .WithMany(p => p.ValorServicos)
                    .HasForeignKey(d => d.CodContrato)
                    .HasConstraintName("FK__ValorServ__CodCo__5DEAEAF5");

                entity.HasOne(d => d.CodRegiaoNavigation)
                    .WithMany(p => p.ValorServicos)
                    .HasForeignKey(d => d.CodRegiao)
                    .HasConstraintName("FK_ValorServico_Regiao");

                entity.HasOne(d => d.CodServicoNavigation)
                    .WithMany(p => p.ValorServicos)
                    .HasForeignKey(d => d.CodServico)
                    .HasConstraintName("FK__ValorServ__CodSe__62AFA012");

                entity.HasOne(d => d.CodSlaNavigation)
                    .WithMany(p => p.ValorServicos)
                    .HasForeignKey(d => d.CodSla)
                    .HasConstraintName("FK__ValorServ__CodSL__5EDF0F2E");
            });

            modelBuilder.Entity<ValoresAutorizadaPo>(entity =>
            {
                entity.HasIndex(e => e.CodAutorizada, "IX_ValoresAutorizadaPOS")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CodUsuario, "IX_ValoresAutorizadaPOS_1")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.Descricao).IsUnicode(false);

                entity.HasOne(d => d.CodAutorizadaNavigation)
                    .WithMany(p => p.ValoresAutorizadaPos)
                    .HasForeignKey(d => d.CodAutorizada)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ValoresAutorizadaPOS_Autorizada");

                entity.HasOne(d => d.CodUsuarioNavigation)
                    .WithMany(p => p.ValoresAutorizadaPos)
                    .HasForeignKey(d => d.CodUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ValoresAutorizadaPOS_Usuario");
            });

            modelBuilder.Entity<VariacaoEquipamento>(entity =>
            {
                entity.HasKey(e => e.CodVariacaoEquipamento)
                    .HasName("PK__VariacaoEquipame__11158940");

                entity.Property(e => e.CodVariacaoEquipamento).ValueGeneratedNever();

                entity.Property(e => e.LocalVariacao).IsUnicode(false);

                entity.Property(e => e.NomeVariacao).IsUnicode(false);
            });

            modelBuilder.Entity<VeiculoCombustivel>(entity =>
            {
                entity.HasKey(e => e.CodVeiculoCombustivel)
                    .HasName("VeiculoCombustivel_PK");

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DataHoraCad).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IndAtivo).HasDefaultValueSql("((1))");

                entity.Property(e => e.Tipo).IsUnicode(false);
            });

            modelBuilder.Entity<View2>(entity =>
            {
                entity.ToView("View_2");

                entity.Property(e => e.DatEmisNf).IsUnicode(false);

                entity.Property(e => e.DataEmissaoAntiga).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.QtdTotRecebida).IsUnicode(false);

                entity.Property(e => e.QtdTotRemessa).IsUnicode(false);
            });

            modelBuilder.Entity<ViewRelatorio>(entity =>
            {
                entity.ToView("View_Relatorio");

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.DescNumSerieNi).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NomTipoIntervencao).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.NomeAcao).IsUnicode(false);

                entity.Property(e => e.NomeCausa).IsUnicode(false);

                entity.Property(e => e.NomeContrato).IsUnicode(false);

                entity.Property(e => e.NomeDefeito).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeEquipSns).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFantasiaCliente).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);

                entity.Property(e => e.NomeRegiao).IsUnicode(false);

                entity.Property(e => e.NomeServico).IsUnicode(false);

                entity.Property(e => e.NomeSla).IsUnicode(false);

                entity.Property(e => e.NomeStatusServico).IsUnicode(false);

                entity.Property(e => e.NomeTipoCausa).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumBanco).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumOsquarteirizada).IsUnicode(false);

                entity.Property(e => e.NumRat).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Rg).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.StatusRat).IsUnicode(false);

                entity.Property(e => e.TecnicoOs).IsUnicode(false);

                entity.Property(e => e.TecnicoRat).IsUnicode(false);
            });

            modelBuilder.Entity<ViewReportOsDia01>(entity =>
            {
                entity.ToView("View_Report_OS_Dia_01");

                entity.Property(e => e.NomeCliente).IsUnicode(false);
            });

            modelBuilder.Entity<ViewReportOsDia02>(entity =>
            {
                entity.ToView("View_Report_OS_Dia_02");

                entity.Property(e => e.NomeCliente).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);
            });

            modelBuilder.Entity<ViewReportOsDia03>(entity =>
            {
                entity.ToView("View_Report_OS_Dia_03");

                entity.Property(e => e.Nomecliente).IsUnicode(false);

                entity.Property(e => e.Nomefilial).IsUnicode(false);
            });

            modelBuilder.Entity<ViewReportOsDia04>(entity =>
            {
                entity.ToView("View_Report_OS_Dia_04");

                entity.Property(e => e.Nomecliente).IsUnicode(false);

                entity.Property(e => e.Nomefilial).IsUnicode(false);
            });

            modelBuilder.Entity<ViewReportOsDium>(entity =>
            {
                entity.ToView("View_Report_OS_Dia");

                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.NomeAcompanhante).IsUnicode(false);

                entity.Property(e => e.NomeCidade).IsUnicode(false);

                entity.Property(e => e.NomeRespCliente).IsUnicode(false);

                entity.Property(e => e.NomeSolicitante).IsUnicode(false);

                entity.Property(e => e.NomeUf).IsUnicode(false);

                entity.Property(e => e.Nomecliente).IsUnicode(false);

                entity.Property(e => e.Nomefilial).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.TelefoneSolicitante).IsUnicode(false);
            });

            modelBuilder.Entity<VioladosPosbanrisul>(entity =>
            {
                entity.HasIndex(e => e.CodUsuario, "IX_VioladosPOSBanrisul")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.IntervaloReferencia).IsUnicode(false);

                entity.Property(e => e.MesReferencia).IsUnicode(false);

                entity.HasOne(d => d.CodUsuarioNavigation)
                    .WithMany(p => p.VioladosPosbanrisuls)
                    .HasForeignKey(d => d.CodUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VioladosPOSBanrisul_Usuario");
            });

            modelBuilder.Entity<VioladosPosbanrisulDesconsiderado>(entity =>
            {
                entity.HasKey(e => e.CodVioladosPosbanrisulDesconsiderados)
                    .HasName("PK_VioladosPOSBanrisulDesconsiderados");

                entity.HasIndex(e => e.CodVioladosPosbanrisul, "IX_VioladosPOSBanrisulDesconsiderados")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Descricao).IsUnicode(false);

                entity.HasOne(d => d.CodVioladosPosbanrisulNavigation)
                    .WithMany(p => p.VioladosPosbanrisulDesconsiderados)
                    .HasForeignKey(d => d.CodVioladosPosbanrisul)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VioladosPOSBanrisulDesconsiderados_VioladosPOSBanrisul");
            });

            modelBuilder.Entity<VwCausa>(entity =>
            {
                entity.ToView("vw_causa");

                entity.Property(e => e.CodEcausa).IsUnicode(false);

                entity.Property(e => e.CodEgrupoCausa).IsUnicode(false);

                entity.Property(e => e.CodEtipoCausa).IsUnicode(false);

                entity.Property(e => e.NomeCausa).IsUnicode(false);

                entity.Property(e => e.NomeGrupoCausa).IsUnicode(false);

                entity.Property(e => e.NomeTipoCausa).IsUnicode(false);
            });

            modelBuilder.Entity<VwChamadosUploadRatDigitalizadum>(entity =>
            {
                entity.ToView("vw_chamados_upload_rat_digitalizada");

                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.Contrato).IsUnicode(false);

                entity.Property(e => e.Dc).IsUnicode(false);

                entity.Property(e => e.Equipamento).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Intervenção).IsUnicode(false);

                entity.Property(e => e.Local).IsUnicode(false);

                entity.Property(e => e.NSerie).IsUnicode(false);

                entity.Property(e => e.NumRat).IsUnicode(false);

                entity.Property(e => e.OsCliente).IsUnicode(false);

                entity.Property(e => e.Pat).IsUnicode(false);

                entity.Property(e => e.Região).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusRat).IsUnicode(false);

                entity.Property(e => e.TipoContrato).IsUnicode(false);

                entity.Property(e => e.Técnico).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwCodLogixContratoAtivo>(entity =>
            {
                entity.ToView("vw_CodLogixContratoAtivo");

                entity.Property(e => e.Codlogix).IsUnicode(false);

                entity.Property(e => e.ObjetoContrato).IsUnicode(false);
            });

            modelBuilder.Entity<VwColaboradoresPonto>(entity =>
            {
                entity.ToView("vw_colaboradores_ponto");

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.DescTurno).IsUnicode(false);

                entity.Property(e => e.NomeCargo).IsUnicode(false);

                entity.Property(e => e.NomeUsuario).IsUnicode(false);

                entity.Property(e => e.NumCracha).IsUnicode(false);

                entity.Property(e => e.RazaoSocial).IsUnicode(false);
            });

            modelBuilder.Entity<VwConsumo>(entity =>
            {
                entity.ToView("vw_Consumo");

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.NomeContrato).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);
            });

            modelBuilder.Entity<VwEstruturaPeca>(entity =>
            {
                entity.ToView("vw_estrutura_peca");

                entity.Property(e => e.CodItemCompon)
                    .IsUnicode(false)
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.CodItemPai).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);

                entity.Property(e => e.QtdNecessaria).IsUnicode(false);
            });

            modelBuilder.Entity<VwExportaChamado>(entity =>
            {
                entity.ToView("vw_ExportaChamados");

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.DescNumSerieNi).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NomTipoIntervencao).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.NomeAcao).IsUnicode(false);

                entity.Property(e => e.NomeCausa).IsUnicode(false);

                entity.Property(e => e.NomeContrato).IsUnicode(false);

                entity.Property(e => e.NomeDefeito).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeEquipSns).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFantasiaCliente).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);

                entity.Property(e => e.NomeRegiao).IsUnicode(false);

                entity.Property(e => e.NomeServico).IsUnicode(false);

                entity.Property(e => e.NomeSla).IsUnicode(false);

                entity.Property(e => e.NomeStatusServico).IsUnicode(false);

                entity.Property(e => e.NomeTipoCausa).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumBanco).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumOsquarteirizada).IsUnicode(false);

                entity.Property(e => e.NumRat).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.ObsRat).IsUnicode(false);

                entity.Property(e => e.Observ).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Rg).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.StatusRat).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.TecnicoOs).IsUnicode(false);

                entity.Property(e => e.TecnicoRat).IsUnicode(false);

                entity.Property(e => e.TipoMaquina).IsUnicode(false);
            });

            modelBuilder.Entity<VwExportaChamadosArquivoMorto>(entity =>
            {
                entity.ToView("vw_ExportaChamadosArquivoMorto");

                entity.Property(e => e.Cnpj).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.ModeloEquipamento).IsUnicode(false);

                entity.Property(e => e.Nomecidade).IsUnicode(false);

                entity.Property(e => e.Nomelocal).IsUnicode(false);

                entity.Property(e => e.Nomeuf).IsUnicode(false);

                entity.Property(e => e.Numagencia).IsUnicode(false);
            });

            modelBuilder.Entity<VwExportaEquipamento>(entity =>
            {
                entity.ToView("vw_Exporta_Equipamentos");

                entity.Property(e => e.Cnpj).IsUnicode(false);

                entity.Property(e => e.Cnpjcontrato).IsUnicode(false);

                entity.Property(e => e.Cnpjfaturamento).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.Indativo).IsUnicode(false);

                entity.Property(e => e.Indgarantia).IsUnicode(false);

                entity.Property(e => e.Indinstalacao).IsUnicode(false);

                entity.Property(e => e.Indreceita).IsUnicode(false);

                entity.Property(e => e.Indrepasse).IsUnicode(false);

                entity.Property(e => e.Nomecidade).IsUnicode(false);

                entity.Property(e => e.Nomecliente).IsUnicode(false);

                entity.Property(e => e.Nomecontrato).IsUnicode(false);

                entity.Property(e => e.Nomeequip).IsUnicode(false);

                entity.Property(e => e.Nomefilial).IsUnicode(false);

                entity.Property(e => e.Nomegrupoequip).IsUnicode(false);

                entity.Property(e => e.Nomelocal).IsUnicode(false);

                entity.Property(e => e.Nomepat).IsUnicode(false);

                entity.Property(e => e.Nomeregiao).IsUnicode(false);

                entity.Property(e => e.Nomesla).IsUnicode(false);

                entity.Property(e => e.Nometipocontrato).IsUnicode(false);

                entity.Property(e => e.Nometipoequip).IsUnicode(false);

                entity.Property(e => e.Numagencia).IsUnicode(false);

                entity.Property(e => e.Numserie).IsUnicode(false);

                entity.Property(e => e.Siglauf).IsUnicode(false);
            });

            modelBuilder.Entity<VwExportacaoChamado>(entity =>
            {
                entity.ToView("vw_Exportacao_Chamados");

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.DescNumSerieNi).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NomTipoIntervencao).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.NomeAcao).IsUnicode(false);

                entity.Property(e => e.NomeCausa).IsUnicode(false);

                entity.Property(e => e.NomeDefeito).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeEquipSns).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFantasiaCliente).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);

                entity.Property(e => e.NomeRegiao).IsUnicode(false);

                entity.Property(e => e.NomeServico).IsUnicode(false);

                entity.Property(e => e.NomeSla).IsUnicode(false);

                entity.Property(e => e.NomeStatusServico).IsUnicode(false);

                entity.Property(e => e.NomeTipoCausa).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumBanco).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumOsquarteirizada).IsUnicode(false);

                entity.Property(e => e.NumRat).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.ObsRat).IsUnicode(false);

                entity.Property(e => e.Observ).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Rg).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.StatusRat).IsUnicode(false);

                entity.Property(e => e.TecnicoOs).IsUnicode(false);

                entity.Property(e => e.TecnicoRat).IsUnicode(false);
            });

            modelBuilder.Entity<VwExportacaoInstalaco>(entity =>
            {
                entity.ToView("vw_ExportacaoInstalacoes");

                entity.Property(e => e.AgenciaEnt).IsUnicode(false);

                entity.Property(e => e.AgenciaIns).IsUnicode(false);

                entity.Property(e => e.Agência).IsUnicode(false);

                entity.Property(e => e.Autorizada).IsUnicode(false);

                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.Cnpj).IsUnicode(false);

                entity.Property(e => e.CodUsuarioBlock).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Lote).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.Nfaut).IsUnicode(false);

                entity.Property(e => e.Nfremessa).IsUnicode(false);

                entity.Property(e => e.NomeCidade).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NomeLocalEnt).IsUnicode(false);

                entity.Property(e => e.NomeLocalIns).IsUnicode(false);

                entity.Property(e => e.NomeRespBancoBi).IsUnicode(false);

                entity.Property(e => e.NomeRespBancoBt).IsUnicode(false);

                entity.Property(e => e.NomeStatusServico).IsUnicode(false);

                entity.Property(e => e.NomeTransportadora).IsUnicode(false);

                entity.Property(e => e.NumFaturaTransp).IsUnicode(false);

                entity.Property(e => e.NumMatriculaBi).IsUnicode(false);

                entity.Property(e => e.NumMatriculaBt).IsUnicode(false);

                entity.Property(e => e.NumRat).IsUnicode(false);

                entity.Property(e => e.NºBem).IsUnicode(false);

                entity.Property(e => e.NºSérie).IsUnicode(false);

                entity.Property(e => e.Região).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);
            });

            modelBuilder.Entity<VwFechamentoBanrisul>(entity =>
            {
                entity.ToView("vw_FechamentoBanrisul");

                entity.Property(e => e.DataHoraInicio).IsUnicode(false);

                entity.Property(e => e.DataHoraSolucao).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);
            });

            modelBuilder.Entity<VwForeignKey>(entity =>
            {
                entity.ToView("vw_ForeignKey");
            });

            modelBuilder.Entity<VwListaFilialComEquipamento>(entity =>
            {
                entity.ToView("vw_ListaFilial_Com_Equipamento");
            });

            modelBuilder.Entity<VwListaUfComEquipamento>(entity =>
            {
                entity.ToView("vw_ListaUF_Com_Equipamento");
            });

            modelBuilder.Entity<VwLocaisListagem>(entity =>
            {
                entity.ToView("vw_Locais_Listagem");

                entity.Property(e => e.Autorizada).IsUnicode(false);

                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Fone).IsUnicode(false);

                entity.Property(e => e.Latitude).IsUnicode(false);

                entity.Property(e => e.LocalStatus).IsUnicode(false);

                entity.Property(e => e.Longitude).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);
            });

            modelBuilder.Entity<VwLogixEstoque>(entity =>
            {
                entity.ToView("vw_LogixEstoque");

                entity.Property(e => e.CodItem).IsUnicode(false);

                entity.Property(e => e.DatUltEntrada).IsUnicode(false);

                entity.Property(e => e.DatUltInvent).IsUnicode(false);

                entity.Property(e => e.DatUltSaida).IsUnicode(false);
            });

            modelBuilder.Entity<VwMtbfRegis1>(entity =>
            {
                entity.ToView("vw_MTBF_Regis_1");

                entity.Property(e => e.CodEcausa).IsUnicode(false);

                entity.Property(e => e.CodEcausaAbrev).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.Ind).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NroContrato).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);
            });

            modelBuilder.Entity<VwMtbfRegis2>(entity =>
            {
                entity.ToView("vw_MTBF_Regis_2");

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.Ind).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NroContrato).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);
            });

            modelBuilder.Entity<VwMtbfRegis3>(entity =>
            {
                entity.ToView("vw_MTBF_Regis_3");

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.Ind).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NroContrato).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);
            });

            modelBuilder.Entity<VwOsPeca>(entity =>
            {
                entity.ToView("vw_OS_pecas");

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.DescrIngles).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);
            });

            modelBuilder.Entity<VwPaisUfcidade>(entity =>
            {
                entity.ToView("vw_PaisUFCidade");

                entity.Property(e => e.NomeCidade).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);
            });

            modelBuilder.Entity<VwPecaNailton2006>(entity =>
            {
                entity.ToView("vw_Peca_Nailton_2006");

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);
            });

            modelBuilder.Entity<VwPedidoPeca>(entity =>
            {
                entity.ToView("vw_PedidoPeca");

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.IndObs).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);

                entity.Property(e => e.NomeStatus).IsUnicode(false);

                entity.Property(e => e.SiglaStatus).IsUnicode(false);

                entity.Property(e => e.SiglaTipoDesc).IsUnicode(false);
            });

            modelBuilder.Entity<VwPedidoPecaComDesconto>(entity =>
            {
                entity.ToView("vw_PedidoPecaComDesconto");

                entity.Property(e => e.CodPedidoPeca).ValueGeneratedOnAdd();

                entity.Property(e => e.IndObs).IsUnicode(false);

                entity.Property(e => e.NomeStatus).IsUnicode(false);

                entity.Property(e => e.SiglaStatus).IsUnicode(false);

                entity.Property(e => e.SiglaTipoDesc).IsUnicode(false);
            });

            modelBuilder.Entity<VwPedidoPecaComDescontoOld>(entity =>
            {
                entity.ToView("vw_PedidoPecaComDesconto_OLD");

                entity.Property(e => e.CodPedidoPeca).ValueGeneratedOnAdd();

                entity.Property(e => e.IndObs).IsUnicode(false);

                entity.Property(e => e.NomeStatus).IsUnicode(false);

                entity.Property(e => e.SiglaStatus).IsUnicode(false);

                entity.Property(e => e.SiglaTipoDesc).IsUnicode(false);
            });

            modelBuilder.Entity<VwPedidoPecaOld>(entity =>
            {
                entity.ToView("vw_PedidoPeca_OLD");

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.CodPedidoPeca).ValueGeneratedOnAdd();

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.IndObs).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);

                entity.Property(e => e.NomeStatus).IsUnicode(false);

                entity.Property(e => e.SiglaStatus).IsUnicode(false);

                entity.Property(e => e.SiglaTipoDesc).IsUnicode(false);
            });

            modelBuilder.Entity<VwRelatorioGenerico>(entity =>
            {
                entity.ToView("vw_RelatorioGenerico");

                entity.Property(e => e.BairroCobranca).IsUnicode(false);

                entity.Property(e => e.Cepcobranca).IsUnicode(false);

                entity.Property(e => e.CidadeCobranca).IsUnicode(false);

                entity.Property(e => e.Cnpj).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCancelamento).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManutencao).IsUnicode(false);

                entity.Property(e => e.ComplemEnd).IsUnicode(false);

                entity.Property(e => e.EnderecoCobranca).IsUnicode(false);

                entity.Property(e => e.Faxcobranca).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NomeContrato).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeResponsavelCliente).IsUnicode(false);

                entity.Property(e => e.NomeResponsavelPerto).IsUnicode(false);

                entity.Property(e => e.NomeTipoContrato).IsUnicode(false);

                entity.Property(e => e.NroContrato).IsUnicode(false);

                entity.Property(e => e.NumeroEnd).IsUnicode(false);

                entity.Property(e => e.ObjetoContrato).IsUnicode(false);

                entity.Property(e => e.SemCobertura).IsUnicode(false);

                entity.Property(e => e.SiglaUfcobranca).IsUnicode(false);

                entity.Property(e => e.TelefoneCobranca).IsUnicode(false);
            });

            modelBuilder.Entity<VwRelatorioGenericoAline>(entity =>
            {
                entity.ToView("vw_RelatorioGenericoAline");

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.DescNumSerieNi).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NomTipoIntervencao).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.NomeAcao).IsUnicode(false);

                entity.Property(e => e.NomeCausa).IsUnicode(false);

                entity.Property(e => e.NomeContrato).IsUnicode(false);

                entity.Property(e => e.NomeDefeito).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeEquipSns).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFantasiaCliente).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);

                entity.Property(e => e.NomeRegiao).IsUnicode(false);

                entity.Property(e => e.NomeServico).IsUnicode(false);

                entity.Property(e => e.NomeSla).IsUnicode(false);

                entity.Property(e => e.NomeStatusServico).IsUnicode(false);

                entity.Property(e => e.NomeTipoCausa).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumBanco).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumOsquarteirizada).IsUnicode(false);

                entity.Property(e => e.NumRat).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.ObsRat).IsUnicode(false);

                entity.Property(e => e.Observ).IsUnicode(false);

                entity.Property(e => e.Pendencia).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Rg).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.StatusRat).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.TecnicoOs).IsUnicode(false);

                entity.Property(e => e.TecnicoRat).IsUnicode(false);
            });

            modelBuilder.Entity<VwRelatorioGenericoDadosDeConfiabilidadeComExtraMaquina>(entity =>
            {
                entity.ToView("vw_RelatorioGenerico_DadosDeConfiabilidadeComExtraMaquina");

                entity.Property(e => e.Acao).IsUnicode(false);

                entity.Property(e => e.Celular).IsUnicode(false);

                entity.Property(e => e.CodEcausa).IsUnicode(false);

                entity.Property(e => e.CodEcausaAbrev).IsUnicode(false);

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.DataDefeito).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.Defeito).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.FoneParticular).IsUnicode(false);

                entity.Property(e => e.FonePerto).IsUnicode(false);

                entity.Property(e => e.HoraDefeito).IsUnicode(false);

                entity.Property(e => e.Ind).IsUnicode(false);

                entity.Property(e => e.Lote).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NroContrato).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Servico).IsUnicode(false);

                entity.Property(e => e.TecnicoRat).IsUnicode(false);

                entity.Property(e => e.UsuarioCadastroRat).IsUnicode(false);
            });

            modelBuilder.Entity<VwRelatorioGenericoEquipamentoContrato>(entity =>
            {
                entity.ToView("vw_RelatorioGenericoEquipamentoContrato");

                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.Contrato).IsUnicode(false);

                entity.Property(e => e.NomeCidade).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NomePat).IsUnicode(false);

                entity.Property(e => e.NomeRegiao).IsUnicode(false);

                entity.Property(e => e.NomeSla).IsUnicode(false);

                entity.Property(e => e.NomeTipoContrato).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);
            });

            modelBuilder.Entity<VwRelatorioGenericoPecasPendente>(entity =>
            {
                entity.ToView("vw_RelatorioGenerico_PecasPendentes");

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.Rat).IsUnicode(false);
            });

            modelBuilder.Entity<VwRelatorioGenericoPendenciaPeca>(entity =>
            {
                entity.ToView("vw_RelatorioGenericoPendenciaPecas");

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.DescNumSerieNi).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NomTipoIntervencao).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.NomeAcao).IsUnicode(false);

                entity.Property(e => e.NomeCausa).IsUnicode(false);

                entity.Property(e => e.NomeContrato).IsUnicode(false);

                entity.Property(e => e.NomeDefeito).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeEquipSns).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFantasiaCliente).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);

                entity.Property(e => e.NomeRegiao).IsUnicode(false);

                entity.Property(e => e.NomeServico).IsUnicode(false);

                entity.Property(e => e.NomeSla).IsUnicode(false);

                entity.Property(e => e.NomeStatusServico).IsUnicode(false);

                entity.Property(e => e.NomeTipoCausa).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumBanco).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumOsquarteirizada).IsUnicode(false);

                entity.Property(e => e.NumRat).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.ObsRat).IsUnicode(false);

                entity.Property(e => e.Observ).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Rg).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.StatusRat).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.TecnicoOs).IsUnicode(false);

                entity.Property(e => e.TecnicoRat).IsUnicode(false);
            });

            modelBuilder.Entity<VwRelatorioVandalismo>(entity =>
            {
                entity.ToView("vw_RelatorioVandalismo");

                entity.Property(e => e.CausaCofreFechadura).IsUnicode(false);

                entity.Property(e => e.CausaVandalismo).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.CofreFechadura).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.DescNumSerieNi).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NomTipoIntervencao).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.NomeAcao).IsUnicode(false);

                entity.Property(e => e.NomeCausa).IsUnicode(false);

                entity.Property(e => e.NomeDefeito).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeEquipSns).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFantasiaCliente).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);

                entity.Property(e => e.NomeRegiao).IsUnicode(false);

                entity.Property(e => e.NomeServico).IsUnicode(false);

                entity.Property(e => e.NomeSla).IsUnicode(false);

                entity.Property(e => e.NomeStatusServico).IsUnicode(false);

                entity.Property(e => e.NomeTipoCausa).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumBanco).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumOsquarteirizada).IsUnicode(false);

                entity.Property(e => e.NumRat).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.ObsRat).IsUnicode(false);

                entity.Property(e => e.Observ).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Rg).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.StatusRat).IsUnicode(false);

                entity.Property(e => e.TecnicoOs).IsUnicode(false);

                entity.Property(e => e.TecnicoRat).IsUnicode(false);

                entity.Property(e => e.Vandalismo).IsUnicode(false);
            });

            modelBuilder.Entity<VwRepasseAutorizadum>(entity =>
            {
                entity.ToView("vw_RepasseAutorizada");

                entity.Property(e => e.Autorizada).IsUnicode(false);

                entity.Property(e => e.Local).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.Série).IsUnicode(false);
            });

            modelBuilder.Entity<VwSarmento>(entity =>
            {
                entity.ToView("vw_Sarmento");

                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.BairroCoordenadas).IsUnicode(false);

                entity.Property(e => e.BairroEntregaDel).IsUnicode(false);

                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.CepentregaDel).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.CidadeCoordenadas).IsUnicode(false);

                entity.Property(e => e.CidadeEntregaDel).IsUnicode(false);

                entity.Property(e => e.Cnpj).IsUnicode(false);

                entity.Property(e => e.Cnpjfaturamento).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCadastroDel).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManutencaoDel).IsUnicode(false);

                entity.Property(e => e.ComplemEndDel).IsUnicode(false);

                entity.Property(e => e.ComplemEndEntregaDel).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.DcpostoClienteDel).IsUnicode(false);

                entity.Property(e => e.DescTurno).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.EnderecoComplemento).IsUnicode(false);

                entity.Property(e => e.EnderecoCoordenadas).IsUnicode(false);

                entity.Property(e => e.EnderecoEntregaDel).IsUnicode(false);

                entity.Property(e => e.Fax).IsUnicode(false);

                entity.Property(e => e.FaxEntregaDel).IsUnicode(false);

                entity.Property(e => e.Fone).IsUnicode(false);

                entity.Property(e => e.InscricaoEstadual).IsUnicode(false);

                entity.Property(e => e.Latitude).IsUnicode(false);

                entity.Property(e => e.Longitude).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumAgencia2Del).IsUnicode(false);

                entity.Property(e => e.NumAgenciaClienteDel).IsUnicode(false);

                entity.Property(e => e.NumeroEnd).IsUnicode(false);

                entity.Property(e => e.NumeroEndEntregaDel).IsUnicode(false);

                entity.Property(e => e.ObsClienteDel).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.OrigemDel).IsUnicode(false);

                entity.Property(e => e.PaisCoordenadas).IsUnicode(false);

                entity.Property(e => e.SenhaAcessoNotaFiscal).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.SiglaUfentregaDel).IsUnicode(false);

                entity.Property(e => e.Site).IsUnicode(false);

                entity.Property(e => e.Telefone1Del).IsUnicode(false);

                entity.Property(e => e.Telefone2Del).IsUnicode(false);

                entity.Property(e => e.TelefoneEntregaDel).IsUnicode(false);

                entity.Property(e => e.Ufcoordenadas).IsUnicode(false);
            });

            modelBuilder.Entity<VwSarmentoExportacaoChamado>(entity =>
            {
                entity.ToView("vw_Sarmento_exportacao_chamados");

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.DescNumSerieNi).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NomTipoIntervencao).IsUnicode(false);

                entity.Property(e => e.NomeContrato).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeEquipSns).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFantasiaCliente).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NomeRegiao).IsUnicode(false);

                entity.Property(e => e.NomeSla).IsUnicode(false);

                entity.Property(e => e.NomeStatusServico).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumBanco).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumOsquarteirizada).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.Observ).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.Rat).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Semat).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);
            });

            modelBuilder.Entity<VwSarmentoExportacaoEquipamento>(entity =>
            {
                entity.ToView("vw_Sarmento_exportacao_equipamentos");

                entity.Property(e => e.AgênciaDcposto).IsUnicode(false);

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.NomeCidade).IsUnicode(false);

                entity.Property(e => e.NomeContrato).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);
            });

            modelBuilder.Entity<VwTarefa>(entity =>
            {
                entity.ToView("vw_tarefas");

                entity.Property(e => e.Analista).IsUnicode(false);

                entity.Property(e => e.CodTarefaImpacto).IsFixedLength(true);

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.DataEncerramento).IsUnicode(false);

                entity.Property(e => e.DescricaoStatus).IsUnicode(false);

                entity.Property(e => e.DescricaoTarefa).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.NomeCargo).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomePerfil).IsUnicode(false);

                entity.Property(e => e.NomePrevisaoSolucao).IsUnicode(false);

                entity.Property(e => e.NomeTarefaImpactoGrupo).IsUnicode(false);

                entity.Property(e => e.NomeTarefaModulo).IsUnicode(false);

                entity.Property(e => e.NomeTarefaStatus).IsUnicode(false);

                entity.Property(e => e.NomeTarefaTipo).IsUnicode(false);

                entity.Property(e => e.NomeTipoDuracao).IsUnicode(false);

                entity.Property(e => e.NomeTipoSolucao).IsUnicode(false);

                entity.Property(e => e.NomeUsuario).IsUnicode(false);

                entity.Property(e => e.PorcentImpacto).IsUnicode(false);

                entity.Property(e => e.Prioridade).IsUnicode(false);

                entity.Property(e => e.RamalSolicitante).IsUnicode(false);

                entity.Property(e => e.Tecnologia).IsUnicode(false);

                entity.Property(e => e.Tipo).IsUnicode(false);

                entity.Property(e => e.TipoSolucao).IsUnicode(false);

                entity.Property(e => e.TituloTarefa).IsUnicode(false);

                entity.Property(e => e.Urgência).IsUnicode(false);
            });

            modelBuilder.Entity<VwTarefasAberta>(entity =>
            {
                entity.ToView("vw_tarefas_abertas");

                entity.Property(e => e.CodTarefa).ValueGeneratedOnAdd();

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.DataEncerramento).IsUnicode(false);

                entity.Property(e => e.DescricaoStatus).IsUnicode(false);

                entity.Property(e => e.DescricaoTarefa).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeTarefaModulo).IsUnicode(false);

                entity.Property(e => e.NomeTarefaStatus).IsUnicode(false);

                entity.Property(e => e.NomeTarefaTipo).IsUnicode(false);

                entity.Property(e => e.NomeUsuario).IsUnicode(false);

                entity.Property(e => e.Prioridade).IsUnicode(false);

                entity.Property(e => e.RamalSolicitante).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.TipoDuracao).IsUnicode(false);

                entity.Property(e => e.TipoSolucao).IsUnicode(false);

                entity.Property(e => e.TituloTarefa).IsUnicode(false);
            });

            modelBuilder.Entity<VwTarefasFull>(entity =>
            {
                entity.ToView("vw_tarefas_full");

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.DataEncerramento).IsUnicode(false);

                entity.Property(e => e.DescricaoTarefa).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeTarefaModulo).IsUnicode(false);

                entity.Property(e => e.NomeTarefaStatus).IsUnicode(false);

                entity.Property(e => e.NomeTarefaTipo).IsUnicode(false);

                entity.Property(e => e.NomeUsuario).IsUnicode(false);

                entity.Property(e => e.Prioridade).IsUnicode(false);

                entity.Property(e => e.TipoDuracao).IsUnicode(false);

                entity.Property(e => e.TipoSolucao).IsUnicode(false);

                entity.Property(e => e.TituloTarefa).IsUnicode(false);
            });

            modelBuilder.Entity<VwTarefasSla>(entity =>
            {
                entity.ToView("vw_tarefas_SLA");

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.Dataencerramento).IsUnicode(false);

                entity.Property(e => e.DescricaoStatus).IsUnicode(false);

                entity.Property(e => e.Descricaotarefa).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Impacto).IsUnicode(false);

                entity.Property(e => e.NomeTarefaModulo).IsUnicode(false);

                entity.Property(e => e.NomeTarefaTipo).IsUnicode(false);

                entity.Property(e => e.NomeUsuario).IsUnicode(false);

                entity.Property(e => e.Nomefilial).IsUnicode(false);

                entity.Property(e => e.Nometarefastatus).IsUnicode(false);

                entity.Property(e => e.Nometipoduracao).IsUnicode(false);

                entity.Property(e => e.Nometiposolucao).IsUnicode(false);

                entity.Property(e => e.Prioridade).IsUnicode(false);

                entity.Property(e => e.RamalSolicitante).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.Tecnologia).IsUnicode(false);

                entity.Property(e => e.Tempo).IsUnicode(false);

                entity.Property(e => e.Tipo).IsUnicode(false);

                entity.Property(e => e.TipoSolucao).IsUnicode(false);

                entity.Property(e => e.TituloTarefa).IsUnicode(false);

                entity.Property(e => e.Urgência).IsUnicode(false);
            });

            modelBuilder.Entity<VwTarefasSlaAux>(entity =>
            {
                entity.ToView("vw_tarefas_sla_Aux");

                entity.Property(e => e.CodTarefa).ValueGeneratedOnAdd();

                entity.Property(e => e.Sla).IsUnicode(false);
            });

            modelBuilder.Entity<VwTarefasSlaDesenvolvimento>(entity =>
            {
                entity.ToView("vw_tarefas_SLA_Desenvolvimento");

                entity.Property(e => e.Autorizador).IsUnicode(false);

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.Dataencerramento).IsUnicode(false);

                entity.Property(e => e.DescricaoStatus).IsUnicode(false);

                entity.Property(e => e.Descricaotarefa).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Impacto).IsUnicode(false);

                entity.Property(e => e.NomeTarefaModulo).IsUnicode(false);

                entity.Property(e => e.NomeTarefaModuloAbrev).IsUnicode(false);

                entity.Property(e => e.NomeTarefaTipo).IsUnicode(false);

                entity.Property(e => e.NomeUsuario).IsUnicode(false);

                entity.Property(e => e.Nomefilial).IsUnicode(false);

                entity.Property(e => e.Nometarefastatus).IsUnicode(false);

                entity.Property(e => e.Nometipoduracao).IsUnicode(false);

                entity.Property(e => e.Nometiposolucao).IsUnicode(false);

                entity.Property(e => e.Prioridade).IsUnicode(false);

                entity.Property(e => e.RamalSolicitante).IsUnicode(false);

                entity.Property(e => e.Relatosolucao).IsUnicode(false);

                entity.Property(e => e.ResponsavelSat).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.Tecnologia).IsUnicode(false);

                entity.Property(e => e.Tempo).IsUnicode(false);

                entity.Property(e => e.Tipo).IsUnicode(false);

                entity.Property(e => e.TipoSolucao).IsUnicode(false);

                entity.Property(e => e.TituloTarefa).IsUnicode(false);

                entity.Property(e => e.Urgência).IsUnicode(false);
            });

            modelBuilder.Entity<VwTarefasSlaDesenvolvimentoMonitoramento>(entity =>
            {
                entity.ToView("vw_tarefas_SLA_Desenvolvimento_Monitoramento");

                entity.Property(e => e.Autorizador).IsUnicode(false);

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.Dataencerramento).IsUnicode(false);

                entity.Property(e => e.DescricaoStatus).IsUnicode(false);

                entity.Property(e => e.Descricaotarefa).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Impacto).IsUnicode(false);

                entity.Property(e => e.NomeTarefaModulo).IsUnicode(false);

                entity.Property(e => e.NomeTarefaModuloAbrev).IsUnicode(false);

                entity.Property(e => e.NomeTarefaTipo).IsUnicode(false);

                entity.Property(e => e.NomeUsuario).IsUnicode(false);

                entity.Property(e => e.Nomefilial).IsUnicode(false);

                entity.Property(e => e.Nometarefastatus).IsUnicode(false);

                entity.Property(e => e.Nometipoduracao).IsUnicode(false);

                entity.Property(e => e.Nometiposolucao).IsUnicode(false);

                entity.Property(e => e.Prioridade).IsUnicode(false);

                entity.Property(e => e.RamalSolicitante).IsUnicode(false);

                entity.Property(e => e.Relatosolucao).IsUnicode(false);

                entity.Property(e => e.ResponsavelSat).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.Tecnologia).IsUnicode(false);

                entity.Property(e => e.Tempo).IsUnicode(false);

                entity.Property(e => e.Tipo).IsUnicode(false);

                entity.Property(e => e.TipoSolucao).IsUnicode(false);

                entity.Property(e => e.TituloTarefa).IsUnicode(false);

                entity.Property(e => e.Urgência).IsUnicode(false);
            });

            modelBuilder.Entity<VwTarefasSlaDesenvolvimentoOrdenado>(entity =>
            {
                entity.ToView("vw_tarefas_SLA_Desenvolvimento_Ordenado");

                entity.Property(e => e.Autorizador).IsUnicode(false);

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.Dataencerramento).IsUnicode(false);

                entity.Property(e => e.DescricaoStatus).IsUnicode(false);

                entity.Property(e => e.Descricaotarefa).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Impacto).IsUnicode(false);

                entity.Property(e => e.NomeTarefaModulo).IsUnicode(false);

                entity.Property(e => e.NomeTarefaModuloAbrev).IsUnicode(false);

                entity.Property(e => e.NomeTarefaTipo).IsUnicode(false);

                entity.Property(e => e.NomeUsuario).IsUnicode(false);

                entity.Property(e => e.Nomefilial).IsUnicode(false);

                entity.Property(e => e.Nometarefastatus).IsUnicode(false);

                entity.Property(e => e.Nometipoduracao).IsUnicode(false);

                entity.Property(e => e.Nometiposolucao).IsUnicode(false);

                entity.Property(e => e.Prioridade).IsUnicode(false);

                entity.Property(e => e.RamalSolicitante).IsUnicode(false);

                entity.Property(e => e.Relatosolucao).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.Tecnologia).IsUnicode(false);

                entity.Property(e => e.Tempo).IsUnicode(false);

                entity.Property(e => e.Tipo).IsUnicode(false);

                entity.Property(e => e.TipoSolucao).IsUnicode(false);

                entity.Property(e => e.TituloTarefa).IsUnicode(false);

                entity.Property(e => e.Urgência).IsUnicode(false);
            });

            modelBuilder.Entity<VwTarefasSlaGraficoAberta>(entity =>
            {
                entity.ToView("vw_tarefas_SLA_Grafico_Abertas");

                entity.Property(e => e.Status).IsUnicode(false);
            });

            modelBuilder.Entity<VwTarefasSlaGraficoConsolidado>(entity =>
            {
                entity.ToView("vw_tarefas_SLA_Grafico_Consolidado");

                entity.Property(e => e.Status).IsUnicode(false);
            });

            modelBuilder.Entity<VwTarefasSlaGraficoDiario>(entity =>
            {
                entity.ToView("vw_tarefas_SLA_Grafico_Diario");

                entity.Property(e => e.Status).IsUnicode(false);
            });

            modelBuilder.Entity<VwTarefasSlaGraficoDiasRetorno>(entity =>
            {
                entity.ToView("vw_Tarefas_SLA_Grafico_Dias_Retorno");

                entity.Property(e => e.AnoMesAux).IsUnicode(false);

                entity.Property(e => e.MesAno).IsUnicode(false);
            });

            modelBuilder.Entity<VwTarefasSlaGraficoMensal>(entity =>
            {
                entity.ToView("vw_tarefas_SLA_Grafico_Mensal");

                entity.Property(e => e.Status).IsUnicode(false);
            });

            modelBuilder.Entity<VwTarefasSlaGraficoSemanal>(entity =>
            {
                entity.ToView("vw_tarefas_SLA_Grafico_Semanal");

                entity.Property(e => e.Status).IsUnicode(false);
            });

            modelBuilder.Entity<VwTarefasStatusDium>(entity =>
            {
                entity.ToView("vw_tarefas_status_dia");

                entity.Property(e => e.Status).IsUnicode(false);
            });

            modelBuilder.Entity<VwcAlexandre>(entity =>
            {
                entity.ToView("vwc_Alexandre");

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.DescNumSerieNi).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NomTipoIntervencao).IsUnicode(false);

                entity.Property(e => e.NomeContrato).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeEquipSns).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFantasiaCliente).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NomeRegiao).IsUnicode(false);

                entity.Property(e => e.NomeSla).IsUnicode(false);

                entity.Property(e => e.NomeStatusServico).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumBanco).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumOsquarteirizada).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.Observ).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.Rat).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Semat2).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);
            });

            modelBuilder.Entity<VwcAline>(entity =>
            {
                entity.ToView("vwc_Aline");

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.DescNumSerieNi).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NomTipoIntervencao).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.NomeAcao).IsUnicode(false);

                entity.Property(e => e.NomeCausa).IsUnicode(false);

                entity.Property(e => e.NomeContrato).IsUnicode(false);

                entity.Property(e => e.NomeDefeito).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeEquipSns).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFantasiaCliente).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);

                entity.Property(e => e.NomeRegiao).IsUnicode(false);

                entity.Property(e => e.NomeServico).IsUnicode(false);

                entity.Property(e => e.NomeSla).IsUnicode(false);

                entity.Property(e => e.NomeStatusServico).IsUnicode(false);

                entity.Property(e => e.NomeTipoCausa).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumBanco).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumOsquarteirizada).IsUnicode(false);

                entity.Property(e => e.NumRat).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.ObsRat).IsUnicode(false);

                entity.Property(e => e.Observ).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Rg).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.StatusRat).IsUnicode(false);

                entity.Property(e => e.TecnicoOs).IsUnicode(false);

                entity.Property(e => e.TecnicoRat).IsUnicode(false);
            });

            modelBuilder.Entity<VwcAnalisadorEndereco>(entity =>
            {
                entity.ToView("VWC_Analisador_Enderecos");

                entity.Property(e => e.Agência).IsUnicode(false);

                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.BairroAnalisador).IsUnicode(false);

                entity.Property(e => e.BairroCoordenadas).IsUnicode(false);

                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.CidadeAnalisador).IsUnicode(false);

                entity.Property(e => e.ComparaçãoCidadeAnalisador).IsUnicode(false);

                entity.Property(e => e.ComparaçãoCidadeCoordenadas).IsUnicode(false);

                entity.Property(e => e.ComparaçãoCoordenadas).IsUnicode(false);

                entity.Property(e => e.ComparaçãoUfAnalisador).IsUnicode(false);

                entity.Property(e => e.ComparaçãoUfCoordenadas).IsUnicode(false);

                entity.Property(e => e.Endereço).IsUnicode(false);

                entity.Property(e => e.EndereçoAnalisador).IsUnicode(false);

                entity.Property(e => e.Latitude).IsUnicode(false);

                entity.Property(e => e.LatitudeAnalisador).IsUnicode(false);

                entity.Property(e => e.Local).IsUnicode(false);

                entity.Property(e => e.Longitude).IsUnicode(false);

                entity.Property(e => e.LongitudeAnalisador).IsUnicode(false);

                entity.Property(e => e.NumeroAnalisador).IsUnicode(false);

                entity.Property(e => e.PossuiEquipamentos).IsUnicode(false);

                entity.Property(e => e.PossuiEquipamentosAtivos).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);

                entity.Property(e => e.UfAnalisador).IsUnicode(false);

                entity.Property(e => e.UfCoordenadas).IsUnicode(false);
            });

            modelBuilder.Entity<VwcAnaliseBasa>(entity =>
            {
                entity.ToView("vwc_Analise_BASA");

                entity.Property(e => e.Agência).IsUnicode(false);

                entity.Property(e => e.AnaliseAbertura).IsUnicode(false);

                entity.Property(e => e.AnaliseFechamento).IsUnicode(false);

                entity.Property(e => e.Causa).IsUnicode(false);

                entity.Property(e => e.Contrato).IsUnicode(false);

                entity.Property(e => e.ContratoPerto).IsUnicode(false);

                entity.Property(e => e.Excedente).IsUnicode(false);

                entity.Property(e => e.ExistePerto).IsUnicode(false);

                entity.Property(e => e.Fator).IsUnicode(false);

                entity.Property(e => e.FilialPerto).IsUnicode(false);

                entity.Property(e => e.HoraAb).IsUnicode(false);

                entity.Property(e => e.HoraFech).IsUnicode(false);

                entity.Property(e => e.Localização).IsUnicode(false);

                entity.Property(e => e.MaquinaExtraMaquina).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.ModeloPerto).IsUnicode(false);

                entity.Property(e => e.Município).IsUnicode(false);

                entity.Property(e => e.NºSérie).IsUnicode(false);

                entity.Property(e => e.Obs).IsUnicode(false);

                entity.Property(e => e.PatPerto).IsUnicode(false);

                entity.Property(e => e.RatPendente).IsUnicode(false);

                entity.Property(e => e.RegiãoPerto).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.StatusSla1).IsUnicode(false);

                entity.Property(e => e.SériePerto).IsUnicode(false);

                entity.Property(e => e.TipoIntervencao).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcAnaliseBasa2>(entity =>
            {
                entity.ToView("vwc_Analise_BASA2");

                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.AnaliseAbertura).IsUnicode(false);

                entity.Property(e => e.AnaliseFechamento).IsUnicode(false);

                entity.Property(e => e.Ação).IsUnicode(false);

                entity.Property(e => e.Causa).IsUnicode(false);

                entity.Property(e => e.CausaPerto).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.Contrato).IsUnicode(false);

                entity.Property(e => e.ContratoPerto).IsUnicode(false);

                entity.Property(e => e.CódCausa).IsUnicode(false);

                entity.Property(e => e.CódMagnus).IsUnicode(false);

                entity.Property(e => e.Dc).IsUnicode(false);

                entity.Property(e => e.Defeito).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.ExistePerto).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.FilialPerto).IsUnicode(false);

                entity.Property(e => e.Intervenção).IsUnicode(false);

                entity.Property(e => e.IntervençãoPerto).IsUnicode(false);

                entity.Property(e => e.Local).IsUnicode(false);

                entity.Property(e => e.MaquinaExtraMaquina).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.ModeloPerto).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NSerie).IsUnicode(false);

                entity.Property(e => e.NumRat).IsUnicode(false);

                entity.Property(e => e.Obs).IsUnicode(false);

                entity.Property(e => e.ObsRat).IsUnicode(false);

                entity.Property(e => e.Observação).IsUnicode(false);

                entity.Property(e => e.Os4a).IsUnicode(false);

                entity.Property(e => e.OsCliente).IsUnicode(false);

                entity.Property(e => e.Pa).IsUnicode(false);

                entity.Property(e => e.Pat).IsUnicode(false);

                entity.Property(e => e.PatPerto).IsUnicode(false);

                entity.Property(e => e.PontoEstratégico).IsUnicode(false);

                entity.Property(e => e.Qtd).IsUnicode(false);

                entity.Property(e => e.Racesso).IsUnicode(false);

                entity.Property(e => e.RatPendente).IsUnicode(false);

                entity.Property(e => e.Região).IsUnicode(false);

                entity.Property(e => e.RegiãoPerto).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Rg).IsUnicode(false);

                entity.Property(e => e.Rhorario).IsUnicode(false);

                entity.Property(e => e.Semat).IsUnicode(false);

                entity.Property(e => e.SeriePerto).IsUnicode(false);

                entity.Property(e => e.Serviço).IsUnicode(false);

                entity.Property(e => e.SlaPerto).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusRat).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.StatusSla1).IsUnicode(false);

                entity.Property(e => e.TipoCausa).IsUnicode(false);

                entity.Property(e => e.TipoContrato).IsUnicode(false);

                entity.Property(e => e.Técnico).IsUnicode(false);

                entity.Property(e => e.TécnicoTransf).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcAnaliseCaixa>(entity =>
            {
                entity.ToView("vwc_Analise_Caixa");

                entity.Property(e => e.AnaliseAbertura).IsUnicode(false);

                entity.Property(e => e.AnaliseAgendamento).IsUnicode(false);

                entity.Property(e => e.AnaliseFechamento).IsUnicode(false);

                entity.Property(e => e.AnaliseFechamentoPa).IsUnicode(false);

                entity.Property(e => e.Causa).IsUnicode(false);

                entity.Property(e => e.Chamado).IsUnicode(false);

                entity.Property(e => e.ExistePerto).IsUnicode(false);

                entity.Property(e => e.FilialPerto).IsUnicode(false);

                entity.Property(e => e.MaquinaExtraMaquina).IsUnicode(false);

                entity.Property(e => e.Obs).IsUnicode(false);

                entity.Property(e => e.OsClientePerto).IsUnicode(false);

                entity.Property(e => e.PatPerto).IsUnicode(false);

                entity.Property(e => e.RatPendente).IsUnicode(false);

                entity.Property(e => e.RegiãoPerto).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.StatusSla1).IsUnicode(false);

                entity.Property(e => e.TipoIntervencao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcAnaliseCaixa20062009>(entity =>
            {
                entity.ToView("vwc_Analise_Caixa_2006_2009");

                entity.Property(e => e.AnaliseAbertura).IsUnicode(false);

                entity.Property(e => e.AnaliseFechamento).IsUnicode(false);

                entity.Property(e => e.AnaliseFechamentoPa).IsUnicode(false);

                entity.Property(e => e.Causa).IsUnicode(false);

                entity.Property(e => e.ExistePerto).IsUnicode(false);

                entity.Property(e => e.FilialPerto).IsUnicode(false);

                entity.Property(e => e.MaquinaExtraMaquina).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.ModeloPerto).IsUnicode(false);

                entity.Property(e => e.Obs).IsUnicode(false);

                entity.Property(e => e.OsClientePerto).IsUnicode(false);

                entity.Property(e => e.PatPerto).IsUnicode(false);

                entity.Property(e => e.RatPendente).IsUnicode(false);

                entity.Property(e => e.RegiãoPerto).IsUnicode(false);

                entity.Property(e => e.Siate).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.StatusSla1).IsUnicode(false);

                entity.Property(e => e.Série).IsUnicode(false);

                entity.Property(e => e.SériePerto).IsUnicode(false);

                entity.Property(e => e.TipoIntervencao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcAnaliseCaixaCofre>(entity =>
            {
                entity.ToView("vwc_Analise_Caixa_Cofre");

                entity.Property(e => e.ExistePerto).IsUnicode(false);

                entity.Property(e => e.FilialPerto).IsUnicode(false);

                entity.Property(e => e.Obs).IsUnicode(false);

                entity.Property(e => e.OsClientePerto).IsUnicode(false);

                entity.Property(e => e.PatPerto).IsUnicode(false);

                entity.Property(e => e.RatPendente).IsUnicode(false);

                entity.Property(e => e.RegiãoPerto).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.TipoIntervencao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcAnaliseCaixaContrato0077>(entity =>
            {
                entity.ToView("vwc_Analise_Caixa_Contrato0077");

                entity.Property(e => e.AnaliseAbertura).IsUnicode(false);

                entity.Property(e => e.AnaliseFechamento).IsUnicode(false);

                entity.Property(e => e.AnaliseFechamentoPa).IsUnicode(false);

                entity.Property(e => e.Causa).IsUnicode(false);

                entity.Property(e => e.CoChamado).IsUnicode(false);

                entity.Property(e => e.CoChamado1).IsUnicode(false);

                entity.Property(e => e.ExistePerto).IsUnicode(false);

                entity.Property(e => e.FilialPerto).IsUnicode(false);

                entity.Property(e => e.MaquinaExtraMaquina).IsUnicode(false);

                entity.Property(e => e.Obs).IsUnicode(false);

                entity.Property(e => e.OsClientePerto).IsUnicode(false);

                entity.Property(e => e.PatPerto).IsUnicode(false);

                entity.Property(e => e.RatPendente).IsUnicode(false);

                entity.Property(e => e.RegiãoPerto).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.StatusSla1).IsUnicode(false);

                entity.Property(e => e.TipoIntervencao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcAtendimento>(entity =>
            {
                entity.ToView("vwc_Atendimento");

                entity.Property(e => e.Ativo).IsUnicode(false);

                entity.Property(e => e.Garantia).IsUnicode(false);

                entity.Property(e => e.Intervencao).IsUnicode(false);

                entity.Property(e => e.MesOs).IsUnicode(false);
            });

            modelBuilder.Entity<VwcAuditoria>(entity =>
            {
                entity.ToView("vwc_Auditorias");

                entity.Property(e => e.AuditoriaStatus).IsUnicode(false);

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeUsuario).IsUnicode(false);

                entity.Property(e => e.Observacoes).IsUnicode(false);
            });

            modelBuilder.Entity<VwcBuscaCodMagnu>(entity =>
            {
                entity.ToView("vwc_BuscaCodMagnus");

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);
            });

            modelBuilder.Entity<VwcCaixa>(entity =>
            {
                entity.ToView("vwc_caixa");

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.DescNumSerieNi).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NomTipoIntervencao).IsUnicode(false);

                entity.Property(e => e.NomeContrato).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeEquipSns).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFantasiaCliente).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NomeRegiao).IsUnicode(false);

                entity.Property(e => e.NomeSla).IsUnicode(false);

                entity.Property(e => e.NomeStatusServico).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumBanco).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumOsquarteirizada).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.Observ).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.Rat).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);
            });

            modelBuilder.Entity<VwcCalculaIndiceQuebra>(entity =>
            {
                entity.ToView("vwc_Calcula_Indice_Quebra");

                entity.Property(e => e.DescricaoPeca).IsUnicode(false);

                entity.Property(e => e.MagnusPeca).IsUnicode(false);

                entity.Property(e => e.Pai).IsUnicode(false);
            });

            modelBuilder.Entity<VwcCalculaIndiceQuebra2>(entity =>
            {
                entity.ToView("vwc_Calcula_Indice_Quebra2");

                entity.Property(e => e.DescriçãoPeça).IsUnicode(false);

                entity.Property(e => e.Magnus).IsUnicode(false);

                entity.Property(e => e.Pai).IsUnicode(false);
            });

            modelBuilder.Entity<VwcCalculaParque>(entity =>
            {
                entity.ToView("vwc_Calcula_Parque");

                entity.Property(e => e.Pai).IsUnicode(false);
            });

            modelBuilder.Entity<VwcCaminhoRatfoto>(entity =>
            {
                entity.ToView("vwc_CaminhoRATFoto");

                entity.Property(e => e.Descricao).IsUnicode(false);

                entity.Property(e => e.NumRat).IsUnicode(false);

                entity.Property(e => e.Url).IsUnicode(false);
            });

            modelBuilder.Entity<VwcCesarBessaExpChamado>(entity =>
            {
                entity.ToView("vwc_CesarBessaExpChamados");

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.DescNumSerieNi).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NomTipoIntervencao).IsUnicode(false);

                entity.Property(e => e.NomeContrato).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeEquipSns).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFantasiaCliente).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NomeRegiao).IsUnicode(false);

                entity.Property(e => e.NomeSla).IsUnicode(false);

                entity.Property(e => e.NomeStatusServico).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumBanco).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumOsquarteirizada).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.Observ).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.Rat).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);
            });

            modelBuilder.Entity<VwcCesarBessaExpEquipamento>(entity =>
            {
                entity.ToView("vwc_CesarBessaExpEquipamentos");

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.Codigopai).IsUnicode(false);

                entity.Property(e => e.Contrato).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.Grupo).IsUnicode(false);

                entity.Property(e => e.Indativo).IsUnicode(false);

                entity.Property(e => e.Indgarantia).IsUnicode(false);

                entity.Property(e => e.Indinstalacao).IsUnicode(false);

                entity.Property(e => e.Indreceita).IsUnicode(false);

                entity.Property(e => e.Indrepasse).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.Nomefilial).IsUnicode(false);

                entity.Property(e => e.Nomelocal).IsUnicode(false);

                entity.Property(e => e.Numagencia).IsUnicode(false);

                entity.Property(e => e.Pat).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.Tipo).IsUnicode(false);

                entity.Property(e => e.Tipocontrato).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcCesarBessaExportacaoChamados20152018>(entity =>
            {
                entity.ToView("vwc_CesarBessaExportacaoChamados2015_2018");

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.DescNumSerieNi).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NomTipoIntervencao).IsUnicode(false);

                entity.Property(e => e.NomeContrato).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeEquipSns).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFantasiaCliente).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NomeRegiao).IsUnicode(false);

                entity.Property(e => e.NomeSla).IsUnicode(false);

                entity.Property(e => e.NomeStatusServico).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumBanco).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumOsquarteirizada).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.Observ).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.Rat).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);
            });

            modelBuilder.Entity<VwcChamadosAnual>(entity =>
            {
                entity.ToView("vwc_ChamadosAnual");

                entity.Property(e => e.EquipamentoEmGarantia).IsUnicode(false);

                entity.Property(e => e.ModeloEquipamento).IsUnicode(false);

                entity.Property(e => e.NomeDaAgência).IsUnicode(false);

                entity.Property(e => e.NomeDoCliente).IsUnicode(false);

                entity.Property(e => e.NomeDoContrato).IsUnicode(false);

                entity.Property(e => e.TipoDaIntervenção).IsUnicode(false);
            });

            modelBuilder.Entity<VwcChamadosAnual2011>(entity =>
            {
                entity.ToView("vwc_ChamadosAnual2011");

                entity.Property(e => e.EquipamentoEmGarantia).IsUnicode(false);

                entity.Property(e => e.ModeloEquipamento).IsUnicode(false);

                entity.Property(e => e.NomeDaAgência).IsUnicode(false);

                entity.Property(e => e.NomeDoCliente).IsUnicode(false);

                entity.Property(e => e.NomeDoContrato).IsUnicode(false);

                entity.Property(e => e.TipoDaIntervenção).IsUnicode(false);
            });

            modelBuilder.Entity<VwcChamadosPorDataHoraFechamento>(entity =>
            {
                entity.ToView("vwc_ChamadosPorDataHoraFechamento");

                entity.Property(e => e.StatusSla).IsUnicode(false);
            });

            modelBuilder.Entity<VwcClienteLocalAtendimento>(entity =>
            {
                entity.ToView("vwc_Cliente_LocalAtendimento");

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcCodTecnico>(entity =>
            {
                entity.ToView("vwc_CodTecnico");
            });

            modelBuilder.Entity<VwcComparacaoPo>(entity =>
            {
                entity.ToView("vwc_ComparacaoPOS");

                entity.Property(e => e.Cnpj).IsUnicode(false);
            });

            modelBuilder.Entity<VwcConsAdiantMediaDespesa>(entity =>
            {
                entity.ToView("vwc_ConsAdiantMediaDespesas");

                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.Banco).IsUnicode(false);

                entity.Property(e => e.ContaCorrente).IsUnicode(false);

                entity.Property(e => e.Cpf).IsUnicode(false);

                entity.Property(e => e.EmailDefault).IsUnicode(false);

                entity.Property(e => e.Tecnico).IsUnicode(false);
            });

            modelBuilder.Entity<VwcConsAdiantRd>(entity =>
            {
                entity.ToView("vwc_ConsAdiantRDs");

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Protocolo).IsUnicode(false);

                entity.Property(e => e.Situacao).IsUnicode(false);

                entity.Property(e => e.Tecnico).IsUnicode(false);
            });

            modelBuilder.Entity<VwcConsAdiantRdsPendente>(entity =>
            {
                entity.ToView("vwc_ConsAdiantRDsPendentes");

                entity.Property(e => e.Cor).IsUnicode(false);

                entity.Property(e => e.NomeDespesaPeriodoTecnicoStatus).IsUnicode(false);

                entity.Property(e => e.Protocolo).IsUnicode(false);

                entity.Property(e => e.Situacao).IsUnicode(false);

                entity.Property(e => e.Tecnico).IsUnicode(false);
            });

            modelBuilder.Entity<VwcConsumo>(entity =>
            {
                entity.ToView("vwc_consumo");

                entity.Property(e => e.Ação).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.Contrato).IsUnicode(false);

                entity.Property(e => e.CpfLogix).IsUnicode(false);

                entity.Property(e => e.DescriçãoPeça).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Magnus).IsUnicode(false);

                entity.Property(e => e.Mes).IsUnicode(false);

                entity.Property(e => e.NomTipoIntervencao).IsUnicode(false);

                entity.Property(e => e.Pai).IsUnicode(false);

                entity.Property(e => e.Técnico).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcContratoLogistica>(entity =>
            {
                entity.ToView("vwc_Contrato_Logistica");

                entity.Property(e => e.NomeContrato).IsUnicode(false);
            });

            modelBuilder.Entity<VwcContratoModelo>(entity =>
            {
                entity.ToView("vwc_Contrato_Modelo");

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NroContrato).IsUnicode(false);
            });

            modelBuilder.Entity<VwcContratoSla>(entity =>
            {
                entity.ToView("vwc_Contrato_SLA");

                entity.Property(e => e.NomeSla).IsUnicode(false);

                entity.Property(e => e.NroContrato).IsUnicode(false);
            });

            modelBuilder.Entity<VwcDadosConfiabilidade>(entity =>
            {
                entity.ToView("vwc_Dados_Confiabilidade");

                entity.Property(e => e.Acao).IsUnicode(false);

                entity.Property(e => e.Celular).IsUnicode(false);

                entity.Property(e => e.CodEcausa).IsUnicode(false);

                entity.Property(e => e.CodEcausaAbrev).IsUnicode(false);

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.DataDefeito).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.Defeito).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.FoneParticular).IsUnicode(false);

                entity.Property(e => e.FonePerto).IsUnicode(false);

                entity.Property(e => e.HoraDefeito).IsUnicode(false);

                entity.Property(e => e.Ind).IsUnicode(false);

                entity.Property(e => e.Lote).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NroContrato).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.TecnicoRat).IsUnicode(false);

                entity.Property(e => e.UsuarioCadastroRat).IsUnicode(false);
            });

            modelBuilder.Entity<VwcDadosConfiabilidade2>(entity =>
            {
                entity.ToView("vwc_Dados_Confiabilidade2");

                entity.Property(e => e.Acao).IsUnicode(false);

                entity.Property(e => e.Celular).IsUnicode(false);

                entity.Property(e => e.CodEcausa).IsUnicode(false);

                entity.Property(e => e.CodEcausaAbrev).IsUnicode(false);

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.DataDefeito).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.Defeito).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.FoneParticular).IsUnicode(false);

                entity.Property(e => e.FonePerto).IsUnicode(false);

                entity.Property(e => e.HoraDefeito).IsUnicode(false);

                entity.Property(e => e.Ind).IsUnicode(false);

                entity.Property(e => e.Lote).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NroContrato).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Servico).IsUnicode(false);

                entity.Property(e => e.TecnicoRat).IsUnicode(false);

                entity.Property(e => e.UsuarioCadastroRat).IsUnicode(false);
            });

            modelBuilder.Entity<VwcDadosConfiabilidade2Backup>(entity =>
            {
                entity.ToView("vwc_Dados_Confiabilidade2_backup");

                entity.Property(e => e.Acao).IsUnicode(false);

                entity.Property(e => e.Celular).IsUnicode(false);

                entity.Property(e => e.CodEcausa).IsUnicode(false);

                entity.Property(e => e.CodEcausaAbrev).IsUnicode(false);

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.DataDefeito).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.Defeito).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.FoneParticular).IsUnicode(false);

                entity.Property(e => e.FonePerto).IsUnicode(false);

                entity.Property(e => e.HoraDefeito).IsUnicode(false);

                entity.Property(e => e.Ind).IsUnicode(false);

                entity.Property(e => e.Lote).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NroContrato).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Servico).IsUnicode(false);

                entity.Property(e => e.TecnicoRat).IsUnicode(false);

                entity.Property(e => e.UsuarioCadastroRat).IsUnicode(false);
            });

            modelBuilder.Entity<VwcDadosConfiabilidade2Old2>(entity =>
            {
                entity.ToView("vwc_Dados_Confiabilidade2_old2");

                entity.Property(e => e.Acao).IsUnicode(false);

                entity.Property(e => e.Celular).IsUnicode(false);

                entity.Property(e => e.CodEcausaAbrev).IsUnicode(false);

                entity.Property(e => e.Codecausa).IsUnicode(false);

                entity.Property(e => e.Codmagnus).IsUnicode(false);

                entity.Property(e => e.Datadefeito).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.Defeito).IsUnicode(false);

                entity.Property(e => e.Defeitorelatado).IsUnicode(false);

                entity.Property(e => e.Foneparticular).IsUnicode(false);

                entity.Property(e => e.Foneperto).IsUnicode(false);

                entity.Property(e => e.Horadefeito).IsUnicode(false);

                entity.Property(e => e.Ind).IsUnicode(false);

                entity.Property(e => e.Lote).IsUnicode(false);

                entity.Property(e => e.Nomeequip).IsUnicode(false);

                entity.Property(e => e.Nomefantasia).IsUnicode(false);

                entity.Property(e => e.Nomefilial).IsUnicode(false);

                entity.Property(e => e.Nomelocal).IsUnicode(false);

                entity.Property(e => e.Nrocontrato).IsUnicode(false);

                entity.Property(e => e.Numagencia).IsUnicode(false);

                entity.Property(e => e.Numserie).IsUnicode(false);

                entity.Property(e => e.Relatosolucao).IsUnicode(false);

                entity.Property(e => e.Servico).IsUnicode(false);

                entity.Property(e => e.Tecnicorat).IsUnicode(false);

                entity.Property(e => e.Usuariocadastrorat).IsUnicode(false);
            });

            modelBuilder.Entity<VwcDadosConfiabilidadeBackup>(entity =>
            {
                entity.ToView("vwc_Dados_Confiabilidade_backup");

                entity.Property(e => e.Acao).IsUnicode(false);

                entity.Property(e => e.Celular).IsUnicode(false);

                entity.Property(e => e.CodEcausa).IsUnicode(false);

                entity.Property(e => e.CodEcausaAbrev).IsUnicode(false);

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.DataDefeito).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.Defeito).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.FoneParticular).IsUnicode(false);

                entity.Property(e => e.FonePerto).IsUnicode(false);

                entity.Property(e => e.HoraDefeito).IsUnicode(false);

                entity.Property(e => e.Ind).IsUnicode(false);

                entity.Property(e => e.Lote).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NroContrato).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.TecnicoRat).IsUnicode(false);

                entity.Property(e => e.UsuarioCadastroRat).IsUnicode(false);
            });

            modelBuilder.Entity<VwcDadosConfiabilidadeRetrofit>(entity =>
            {
                entity.ToView("vwc_Dados_ConfiabilidadeRetrofit");

                entity.Property(e => e.Acao).IsUnicode(false);

                entity.Property(e => e.Celular).IsUnicode(false);

                entity.Property(e => e.CodEcausa).IsUnicode(false);

                entity.Property(e => e.CodEcausaAbrev).IsUnicode(false);

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.Defeito).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.DescricaoRetrofit).IsUnicode(false);

                entity.Property(e => e.FoneParticular).IsUnicode(false);

                entity.Property(e => e.FonePerto).IsUnicode(false);

                entity.Property(e => e.HoraDefeito).IsUnicode(false);

                entity.Property(e => e.Ind).IsUnicode(false);

                entity.Property(e => e.Indice).IsUnicode(false);

                entity.Property(e => e.Lote).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NomeRetrofit).IsUnicode(false);

                entity.Property(e => e.NroContrato).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.TecnicoRat).IsUnicode(false);

                entity.Property(e => e.UsuarioCadastroRat).IsUnicode(false);
            });

            modelBuilder.Entity<VwcDadosDashboard>(entity =>
            {
                entity.ToView("vwc_DadosDashboard");

                entity.Property(e => e.ColunaA).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);
            });

            modelBuilder.Entity<VwcDadosDashboardBackup>(entity =>
            {
                entity.ToView("vwc_DadosDashboardBackup");

                entity.Property(e => e.ColunaA).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);
            });

            modelBuilder.Entity<VwcDadosDashboardCliente>(entity =>
            {
                entity.ToView("vwc_DadosDashboardCliente");

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcDadosDashboardDisponibilidadeTechApp>(entity =>
            {
                entity.ToView("vwc_DadosDashboardDisponibilidadeTechApp");

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeUsuario).IsUnicode(false);
            });

            modelBuilder.Entity<VwcDashboardChamadosAntigo>(entity =>
            {
                entity.ToView("vwc_DashboardChamadosAntigos");

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.Img).IsUnicode(false);

                entity.Property(e => e.Intervencao).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.ModeloCompleto).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);
            });

            modelBuilder.Entity<VwcDashboardLiderTecnico>(entity =>
            {
                entity.ToView("vwc_DashboardLiderTecnico");

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.CodUsuarioLider).IsUnicode(false);

                entity.Property(e => e.Lider).IsUnicode(false);

                entity.Property(e => e.NomeUsuario).IsUnicode(false);
            });

            modelBuilder.Entity<VwcDashboardPerformance>(entity =>
            {
                entity.ToView("vwc_DashboardPerformance");

                entity.Property(e => e.AnoMes).IsUnicode(false);
            });

            modelBuilder.Entity<VwcDashboardPerformanceGeral>(entity =>
            {
                entity.ToView("vwc_DashboardPerformanceGeral");

                entity.Property(e => e.AnoMes).IsUnicode(false);
            });

            modelBuilder.Entity<VwcDashboardSpadado>(entity =>
            {
                entity.ToView("vwc_DashboardSPADados");

                entity.Property(e => e.StatusSpa).IsUnicode(false);
            });

            modelBuilder.Entity<VwcDefeito>(entity =>
            {
                entity.ToView("vwc_Defeito");

                entity.Property(e => e.NumRat).IsUnicode(false);
            });

            modelBuilder.Entity<VwcDefeitoPeca>(entity =>
            {
                entity.ToView("vwc_DefeitoPeca");

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);
            });

            modelBuilder.Entity<VwcDespesaItem>(entity =>
            {
                entity.ToView("vwc_DespesaItem");
            });

            modelBuilder.Entity<VwcDespesasFrotaTecnico>(entity =>
            {
                entity.ToView("vwc_Despesas_Frota_Tecnicos");

                entity.Property(e => e.Autonomia).IsUnicode(false);

                entity.Property(e => e.DespesaCombustivel).IsUnicode(false);

                entity.Property(e => e.DespesaOutras).IsUnicode(false);

                entity.Property(e => e.DespesaTotal).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeRegiao).IsUnicode(false);

                entity.Property(e => e.NumeroCartao).IsUnicode(false);

                entity.Property(e => e.PrecoLitro).IsUnicode(false);
            });

            modelBuilder.Entity<VwcDespesasFrotaTecnicosPagamento>(entity =>
            {
                entity.ToView("vwc_Despesas_Frota_Tecnicos_Pagamentos");

                entity.Property(e => e.Ativo).IsUnicode(false);

                entity.Property(e => e.CodDespesaProtocolo).IsUnicode(false);

                entity.Property(e => e.DespesaCombustivel).IsUnicode(false);

                entity.Property(e => e.DespesaOutras).IsUnicode(false);

                entity.Property(e => e.DespesaTotal).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeRegiao).IsUnicode(false);

                entity.Property(e => e.NumeroCartao).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.PrecoLitro).IsUnicode(false);
            });

            modelBuilder.Entity<VwcDespesasTecnico>(entity =>
            {
                entity.ToView("vwc_Despesas_Tecnicos");

                entity.Property(e => e.CodUsuarioCompensacao).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCredito).IsUnicode(false);

                entity.Property(e => e.DespesaCombustivel).IsUnicode(false);

                entity.Property(e => e.DespesaOutras).IsUnicode(false);

                entity.Property(e => e.DespesaTotal).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);
            });

            modelBuilder.Entity<VwcEmailReincidencium>(entity =>
            {
                entity.ToView("vwc_EmailReincidencia");

                entity.Property(e => e.Email).IsUnicode(false);
            });

            modelBuilder.Entity<VwcEnderecoSatCoordenadum>(entity =>
            {
                entity.ToView("vwc_endereco_sat_coordenada");

                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.CidadeCoordenada)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1251_CS_AS");

                entity.Property(e => e.CidadeSat)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1251_CS_AS");

                entity.Property(e => e.EnderecoCoordenada).IsUnicode(false);

                entity.Property(e => e.EnderecoSat).IsUnicode(false);

                entity.Property(e => e.Latitude).IsUnicode(false);

                entity.Property(e => e.Longitude).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.Nomelocal).IsUnicode(false);

                entity.Property(e => e.PossuiEquipamentoAtivo).IsUnicode(false);

                entity.Property(e => e.Ufcoordenadas).IsUnicode(false);

                entity.Property(e => e.Ufsat).IsUnicode(false);
            });

            modelBuilder.Entity<VwcEnderecosDespesa>(entity =>
            {
                entity.ToView("vwc_EnderecosDespesa");

                entity.Property(e => e.BairroDestino).IsUnicode(false);

                entity.Property(e => e.BairroOrigem).IsUnicode(false);

                entity.Property(e => e.CidadeDestino).IsUnicode(false);

                entity.Property(e => e.CidadeOrigem).IsUnicode(false);

                entity.Property(e => e.Destino).IsUnicode(false);

                entity.Property(e => e.EnderecoDestino).IsUnicode(false);

                entity.Property(e => e.EnderecoOrigem).IsUnicode(false);

                entity.Property(e => e.KmPercorrido).IsUnicode(false);

                entity.Property(e => e.KmPrevisto).IsUnicode(false);

                entity.Property(e => e.NumRat).IsUnicode(false);

                entity.Property(e => e.NumeroDestino).IsUnicode(false);

                entity.Property(e => e.NumeroOrigem).IsUnicode(false);

                entity.Property(e => e.Origem).IsUnicode(false);

                entity.Property(e => e.UfDestino).IsUnicode(false);

                entity.Property(e => e.UfOrigem).IsUnicode(false);
            });

            modelBuilder.Entity<VwcEquipamentoContrato>(entity =>
            {
                entity.ToView("vwc_EquipamentoContrato");

                entity.Property(e => e.AgenciaNumSerie).IsUnicode(false);

                entity.Property(e => e.AgenciaSb).IsUnicode(false);

                entity.Property(e => e.ClienteAgenciaNumSerie).IsUnicode(false);

                entity.Property(e => e.Lote).IsUnicode(false);

                entity.Property(e => e.Mtbf4).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.Retrofit).IsUnicode(false);

                entity.Property(e => e.Retrofit2).IsUnicode(false);

                entity.Property(e => e.Retrofit3).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcEquipamentoContratoComSla>(entity =>
            {
                entity.ToView("vwc_EquipamentoContratoComSLA");

                entity.Property(e => e.CodBmp).IsUnicode(false);

                entity.Property(e => e.CodEquipCliente).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManutencao).IsUnicode(false);

                entity.Property(e => e.NumEtiquetaEquip).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.NumSerieCliente).IsUnicode(false);

                entity.Property(e => e.Origem).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.Sequencia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcEquipamentoContratoComSladispBb>(entity =>
            {
                entity.ToView("vwc_EquipamentoContratoComSLADispBB");

                entity.Property(e => e.CodBmp).IsUnicode(false);

                entity.Property(e => e.CodEquipCliente).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManutencao).IsUnicode(false);

                entity.Property(e => e.NumEtiquetaEquip).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.NumSerieCliente).IsUnicode(false);

                entity.Property(e => e.Origem).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.Sequencia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcEquipamentoContratoComSlaroselei>(entity =>
            {
                entity.ToView("vwc_EquipamentoContratoComSLARoselei");

                entity.Property(e => e.CodBmp).IsUnicode(false);

                entity.Property(e => e.CodEquipCliente).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManutencao).IsUnicode(false);

                entity.Property(e => e.NumEtiquetaEquip).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.NumSerieCliente).IsUnicode(false);

                entity.Property(e => e.Origem).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.Sequencia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcEquipamentosPo>(entity =>
            {
                entity.ToView("vwc_EquipamentosPOS");

                entity.Property(e => e.Cnpj).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);
            });

            modelBuilder.Entity<VwcEstoqueTecnico>(entity =>
            {
                entity.ToView("vwc_Estoque_Tecnico");

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.Cpf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcEstoqueTecnico2>(entity =>
            {
                entity.ToView("Vwc_Estoque_Tecnico_2");

                entity.Property(e => e.Codmagnus).IsUnicode(false);

                entity.Property(e => e.Cpflogix).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.Nomefilial).IsUnicode(false);
            });

            modelBuilder.Entity<VwcExportacaoChamadosCobra>(entity =>
            {
                entity.ToView("vwc_Exportacao_Chamados_Cobra");

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.DescNumSerieNi).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NomTipoIntervencao).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.NomeAcao).IsUnicode(false);

                entity.Property(e => e.NomeCausa).IsUnicode(false);

                entity.Property(e => e.NomeDefeito).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeEquipSns).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFantasiaCliente).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);

                entity.Property(e => e.NomeRegiao).IsUnicode(false);

                entity.Property(e => e.NomeServico).IsUnicode(false);

                entity.Property(e => e.NomeSla).IsUnicode(false);

                entity.Property(e => e.NomeStatusServico).IsUnicode(false);

                entity.Property(e => e.NomeTipoCausa).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumBanco).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumOsquarteirizada).IsUnicode(false);

                entity.Property(e => e.NumRat).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.ObsRat).IsUnicode(false);

                entity.Property(e => e.Observ).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Rg).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.StatusRat).IsUnicode(false);

                entity.Property(e => e.TecnicoOs).IsUnicode(false);

                entity.Property(e => e.TecnicoRat).IsUnicode(false);
            });

            modelBuilder.Entity<VwcFilial>(entity =>
            {
                entity.ToView("vwc_Filial");
            });

            modelBuilder.Entity<VwcFinanceiroBanrisulPo>(entity =>
            {
                entity.ToView("vwc_financeiro_banrisul_pos");
            });

            modelBuilder.Entity<VwcFrotaTecnico>(entity =>
            {
                entity.ToView("vwc_FrotaTecnicos");

                entity.Property(e => e.Cartao).IsUnicode(false);

                entity.Property(e => e.Lote).IsUnicode(false);

                entity.Property(e => e.Modalidade).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);
            });

            modelBuilder.Entity<VwcFullTime1>(entity =>
            {
                entity.ToView("vwc_FullTime_1");

                entity.Property(e => e.Filial).IsUnicode(false);
            });

            modelBuilder.Entity<VwcFullTime2>(entity =>
            {
                entity.ToView("vwc_FullTime_2");

                entity.Property(e => e.Cliente).IsUnicode(false);
            });

            modelBuilder.Entity<VwcGiane>(entity =>
            {
                entity.ToView("Vwc_Giane");

                entity.Property(e => e.BairroCobranca).IsUnicode(false);

                entity.Property(e => e.Cepcobranca).IsUnicode(false);

                entity.Property(e => e.CidadeCobranca).IsUnicode(false);

                entity.Property(e => e.Cnpj).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCancelamento).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManutencao).IsUnicode(false);

                entity.Property(e => e.ComplemEnd).IsUnicode(false);

                entity.Property(e => e.EnderecoCobranca).IsUnicode(false);

                entity.Property(e => e.Faxcobranca).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NomeContrato).IsUnicode(false);

                entity.Property(e => e.NomeResponsavelCliente).IsUnicode(false);

                entity.Property(e => e.NomeResponsavelPerto).IsUnicode(false);

                entity.Property(e => e.NroContrato).IsUnicode(false);

                entity.Property(e => e.NumeroEnd).IsUnicode(false);

                entity.Property(e => e.ObjetoContrato).IsUnicode(false);

                entity.Property(e => e.SemCobertura).IsUnicode(false);

                entity.Property(e => e.SiglaUfcobranca).IsUnicode(false);

                entity.Property(e => e.TelefoneCobranca).IsUnicode(false);
            });

            modelBuilder.Entity<VwcGiane2>(entity =>
            {
                entity.ToView("VWC_GIANE2");

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.CodEacao).IsUnicode(false);

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.DescNumSerieNi).IsUnicode(false);

                entity.Property(e => e.DiaAbertura).IsUnicode(false);

                entity.Property(e => e.MesAbertura).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NomTipoIntervencao).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.NomeAcao).IsUnicode(false);

                entity.Property(e => e.NomeCausa).IsUnicode(false);

                entity.Property(e => e.NomeContrato).IsUnicode(false);

                entity.Property(e => e.NomeDefeito).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeEquipSns).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFantasiaCliente).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);

                entity.Property(e => e.NomeRegiao).IsUnicode(false);

                entity.Property(e => e.NomeServico).IsUnicode(false);

                entity.Property(e => e.NomeSla).IsUnicode(false);

                entity.Property(e => e.NomeStatusServico).IsUnicode(false);

                entity.Property(e => e.NomeTipoCausa).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumBanco).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumOsquarteirizada).IsUnicode(false);

                entity.Property(e => e.NumRat).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.ObsRat).IsUnicode(false);

                entity.Property(e => e.Observ).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.Racesso).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Rg).IsUnicode(false);

                entity.Property(e => e.Rhorario).IsUnicode(false);

                entity.Property(e => e.Semat).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.StatusRat).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.TecnicoOs).IsUnicode(false);

                entity.Property(e => e.TecnicoRat).IsUnicode(false);
            });

            modelBuilder.Entity<VwcHistEquipamentoContrato>(entity =>
            {
                entity.ToView("vwc_HistEquipamentoContrato");

                entity.Property(e => e.Ativo).IsUnicode(false);

                entity.Property(e => e.Garantia).IsUnicode(false);

                entity.Property(e => e.NomeAutorizada).IsUnicode(false);

                entity.Property(e => e.NomeCliente).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeRegiao).IsUnicode(false);

                entity.Property(e => e.NumSerieEquipamento).IsUnicode(false);

                entity.Property(e => e.Receita).IsUnicode(false);

                entity.Property(e => e.Repasse).IsUnicode(false);

                entity.Property(e => e.UsuarioAlteracao).IsUnicode(false);

                entity.Property(e => e.UsuarioCadastro).IsUnicode(false);
            });

            modelBuilder.Entity<VwcHistPeca>(entity =>
            {
                entity.ToView("vwc_HistPeca");

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);

                entity.Property(e => e.NomeUsuario).IsUnicode(false);

                entity.Property(e => e.StatusPeca).IsUnicode(false);
            });

            modelBuilder.Entity<VwcIndAtivo>(entity =>
            {
                entity.ToView("vwc_IndAtivo");

                entity.Property(e => e.DescF).IsUnicode(false);

                entity.Property(e => e.DescFplural).IsUnicode(false);

                entity.Property(e => e.DescM).IsUnicode(false);

                entity.Property(e => e.DescMplural).IsUnicode(false);

                entity.Property(e => e.Sigla).IsUnicode(false);

                entity.Property(e => e.Source).IsUnicode(false);
            });

            modelBuilder.Entity<VwcIndGarantium>(entity =>
            {
                entity.ToView("vwc_IndGarantia");

                entity.Property(e => e.DescF).IsUnicode(false);

                entity.Property(e => e.DescFplural).IsUnicode(false);

                entity.Property(e => e.DescM).IsUnicode(false);

                entity.Property(e => e.DescMplural).IsUnicode(false);

                entity.Property(e => e.Sigla).IsUnicode(false);

                entity.Property(e => e.Source).IsUnicode(false);
            });

            modelBuilder.Entity<VwcIndReceitum>(entity =>
            {
                entity.ToView("vwc_IndReceita");

                entity.Property(e => e.DescF).IsUnicode(false);

                entity.Property(e => e.DescFplural).IsUnicode(false);

                entity.Property(e => e.DescM).IsUnicode(false);

                entity.Property(e => e.DescMplural).IsUnicode(false);

                entity.Property(e => e.Sigla).IsUnicode(false);

                entity.Property(e => e.Source).IsUnicode(false);
            });

            modelBuilder.Entity<VwcIndRepasse>(entity =>
            {
                entity.ToView("vwc_IndRepasse");

                entity.Property(e => e.DescF).IsUnicode(false);

                entity.Property(e => e.DescFplural).IsUnicode(false);

                entity.Property(e => e.DescM).IsUnicode(false);

                entity.Property(e => e.DescMplural).IsUnicode(false);

                entity.Property(e => e.Sigla).IsUnicode(false);

                entity.Property(e => e.Source).IsUnicode(false);
            });

            modelBuilder.Entity<VwcIndicadoresLogisticaProgramadorFilial>(entity =>
            {
                entity.ToView("vwc_IndicadoresLogisticaProgramadorFilial");

                entity.Property(e => e.Descstatus).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Pa).IsUnicode(false);
            });

            modelBuilder.Entity<VwcInstalacao>(entity =>
            {
                entity.ToView("vwc_Instalacao");
            });

            modelBuilder.Entity<VwcInstalacaoArqMorto>(entity =>
            {
                entity.ToView("vwc_Instalacao_Arq_Morto");

                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.AgenciaEnt).IsUnicode(false);

                entity.Property(e => e.AgenciaIns).IsUnicode(false);

                entity.Property(e => e.AntigoNomeDependenciaRedestinacao)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AntigoPedidoCompraRedestinacao)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AntigoPrefixoRedestinacao)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AntigoProtocoloCdo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AntigoSbRedestinacao)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AntigoTipoDependenciaRedestinacao)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AntigoUfRedestinacao)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BemTradeIn).IsUnicode(false);

                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.Cnpj).IsUnicode(false);

                entity.Property(e => e.CodEquipamento).IsUnicode(false);

                entity.Property(e => e.CodFilAutReg).IsUnicode(false);

                entity.Property(e => e.CodUsuarioBlock).IsUnicode(false);

                entity.Property(e => e.Csl).IsUnicode(false);

                entity.Property(e => e.Csoserv).IsUnicode(false);

                entity.Property(e => e.CteFrete1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CteFrete2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.Ddd)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DtbCliente).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.Fabricante).IsUnicode(false);

                entity.Property(e => e.FaturaFrete1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FaturaFrete2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FaturaTranspReEntrega).IsUnicode(false);

                entity.Property(e => e.FilialAutorizadaRegiao).IsUnicode(false);

                entity.Property(e => e.FornecedorCompraTradeIn).IsUnicode(false);

                entity.Property(e => e.FornecedorTradeIn1).IsUnicode(false);

                entity.Property(e => e.FornecedorTradeIn2).IsUnicode(false);

                entity.Property(e => e.IndAnexo).IsUnicode(false);

                entity.Property(e => e.IndObs).IsUnicode(false);

                entity.Property(e => e.IndRessalvaEnt).IsUnicode(false);

                entity.Property(e => e.IndRessalvaInsF).IsUnicode(false);

                entity.Property(e => e.IndRessalvaInsR).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.Mst606tipoNovo).IsUnicode(false);

                entity.Property(e => e.Nfaut).IsUnicode(false);

                entity.Property(e => e.Nfremessa).IsUnicode(false);

                entity.Property(e => e.NfremessaConferida).IsUnicode(false);

                entity.Property(e => e.NftradeIn1).IsUnicode(false);

                entity.Property(e => e.NftradeIn2).IsUnicode(false);

                entity.Property(e => e.NftransportadoraTradeIn).IsUnicode(false);

                entity.Property(e => e.NfvendaTradeIn).IsUnicode(false);

                entity.Property(e => e.NomeAutorizada).IsUnicode(false);

                entity.Property(e => e.NomeCidade).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NomeLocalEnt).IsUnicode(false);

                entity.Property(e => e.NomeLocalIns).IsUnicode(false);

                entity.Property(e => e.NomeLote).IsUnicode(false);

                entity.Property(e => e.NomeRegiao).IsUnicode(false);

                entity.Property(e => e.NomeReponsavelBancoAcompanhamento).IsUnicode(false);

                entity.Property(e => e.NomeRespBancoBi).IsUnicode(false);

                entity.Property(e => e.NomeRespBancoBt).IsUnicode(false);

                entity.Property(e => e.NomeSla).IsUnicode(false);

                entity.Property(e => e.NomeStatusServico).IsUnicode(false);

                entity.Property(e => e.NomeTransportadora).IsUnicode(false);

                entity.Property(e => e.NomeUsuarioBlock).IsUnicode(false);

                entity.Property(e => e.NovoProtocoloCdo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NroContrato).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumFaturaTransp).IsUnicode(false);

                entity.Property(e => e.NumMatriculaBi).IsUnicode(false);

                entity.Property(e => e.NumMatriculaBt).IsUnicode(false);

                entity.Property(e => e.NumMatriculaRespBancoAcompanhamento).IsUnicode(false);

                entity.Property(e => e.NumRat).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.NumSerieCliente).IsUnicode(false);

                entity.Property(e => e.PedidoCompra).IsUnicode(false);

                entity.Property(e => e.Redestinacao)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ResponsavelRecebReEntrega).IsUnicode(false);

                entity.Property(e => e.Romaneio).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.SuperE).IsUnicode(false);

                entity.Property(e => e.Supridora).IsUnicode(false);

                entity.Property(e => e.Telefone1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoEquipGrupoEquipCodEquip).IsUnicode(false);

                entity.Property(e => e.TransportadoraAcompanhamento).IsUnicode(false);
            });

            modelBuilder.Entity<VwcIntegracaoBb>(entity =>
            {
                entity.ToView("vwc_IntegracaoBB");

                entity.Property(e => e.CodEcausa).IsUnicode(false);

                entity.Property(e => e.DataAgendamento).IsUnicode(false);

                entity.Property(e => e.DataFimAtendimento).IsUnicode(false);

                entity.Property(e => e.DataFinal).IsUnicode(false);

                entity.Property(e => e.DataInicioAtendimento).IsUnicode(false);

                entity.Property(e => e.DeParaCausa).IsUnicode(false);

                entity.Property(e => e.HoraAgendamento).IsUnicode(false);

                entity.Property(e => e.HoraFimAtendimento).IsUnicode(false);

                entity.Property(e => e.HoraFinal).IsUnicode(false);

                entity.Property(e => e.HoraInicioAtendimento).IsUnicode(false);

                entity.Property(e => e.NomTipoIntervencao).IsUnicode(false);

                entity.Property(e => e.NomeTecnico).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumRat).IsUnicode(false);
            });

            modelBuilder.Entity<VwcIntegracaoBrbv2>(entity =>
            {
                entity.ToView("vwc_IntegracaoBRBV2");

                entity.Property(e => e.CodigoEnomeAutorizada).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.NomeDefeito).IsUnicode(false);

                entity.Property(e => e.NomeStatusServico).IsUnicode(false);

                entity.Property(e => e.NomeTipoIntervencao).IsUnicode(false);

                entity.Property(e => e.NumBanco).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.ObservacaoCliente).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcKitPadrao>(entity =>
            {
                entity.ToView("vwc_KitPadrao");

                entity.Property(e => e.DescriçãoPeça).IsUnicode(false);

                entity.Property(e => e.KitPadrão).IsUnicode(false);

                entity.Property(e => e.Magnus).IsUnicode(false);
            });

            modelBuilder.Entity<VwcListaCodEquipPo>(entity =>
            {
                entity.ToView("vwc_ListaCodEquipPOS");
            });

            modelBuilder.Entity<VwcListaOssBloqueio>(entity =>
            {
                entity.ToView("vwc_ListaOSsBloqueio");

                entity.Property(e => e.Dados).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);
            });

            modelBuilder.Entity<VwcListaOssHistorico>(entity =>
            {
                entity.ToView("vwc_ListaOSsHistorico");

                entity.Property(e => e.Dados).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);
            });

            modelBuilder.Entity<VwcListaRatdetalhesBloqueio>(entity =>
            {
                entity.ToView("vwc_ListaRATDetalhesBloqueio");

                entity.Property(e => e.Dados).IsUnicode(false);
            });

            modelBuilder.Entity<VwcListaRatdetalhesPecasBloqueio>(entity =>
            {
                entity.ToView("vwc_ListaRATDetalhesPecasBloqueio");

                entity.Property(e => e.Dados).IsUnicode(false);
            });

            modelBuilder.Entity<VwcListaRatsBloqueio>(entity =>
            {
                entity.ToView("vwc_ListaRATsBloqueio");

                entity.Property(e => e.Dados).IsUnicode(false);

                entity.Property(e => e.NomeStatusServico).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcLogAlertum>(entity =>
            {
                entity.ToView("vwc_LogAlerta");

                entity.Property(e => e.Disco).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.Mensagem).IsUnicode(false);

                entity.Property(e => e.Servidor).IsUnicode(false);

                entity.Property(e => e.Tipo).IsUnicode(false);
            });

            modelBuilder.Entity<VwcLogServico>(entity =>
            {
                entity.ToView("vwc_logServico");

                entity.Property(e => e.CodLogServico).ValueGeneratedOnAdd();

                entity.Property(e => e.Duracao).IsUnicode(false);

                entity.Property(e => e.NomeServico).IsUnicode(false);

                entity.Property(e => e.NomeServidor).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.TempoOciosidade).IsUnicode(false);
            });

            modelBuilder.Entity<VwcLogisticaBackUpTecnico>(entity =>
            {
                entity.ToView("vwc_LogisticaBackUpTecnico");

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.Cpflogix).IsUnicode(false);
            });

            modelBuilder.Entity<VwcLogisticaEstrutura>(entity =>
            {
                entity.ToView("vwc_Logistica_Estrutura");

                entity.Property(e => e.Estrutura).IsUnicode(false);
            });

            modelBuilder.Entity<VwcLogisticaItemBackup>(entity =>
            {
                entity.ToView("vwc_Logistica_ItemBackup");

                entity.Property(e => e.ItemBackup).IsUnicode(false);
            });

            modelBuilder.Entity<VwcLogisticaItemParque>(entity =>
            {
                entity.ToView("vwc_Logistica_ItemParque");

                entity.Property(e => e.ItemParque).IsUnicode(false);
            });

            modelBuilder.Entity<VwcLogisticaListaTecnico>(entity =>
            {
                entity.ToView("vwc_LogisticaListaTecnicos");

                entity.Property(e => e.Expr1).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.Sinc).IsUnicode(false);
            });

            modelBuilder.Entity<VwcLogisticaTecnico>(entity =>
            {
                entity.ToView("vwc_Logistica_Tecnico");

                entity.Property(e => e.Técnico).IsUnicode(false);
            });

            modelBuilder.Entity<VwcLogixBackUpTecnico>(entity =>
            {
                entity.ToView("vwc_Logix_BackUpTecnico");

                entity.Property(e => e.Nome).IsUnicode(false);
            });

            modelBuilder.Entity<VwcLogixConsumo>(entity =>
            {
                entity.ToView("vwc_Logix_Consumo");

                entity.Property(e => e.Nome).IsUnicode(false);
            });

            modelBuilder.Entity<VwcLogixConsumoTotal>(entity =>
            {
                entity.ToView("vwc_Logix_Consumo_Total");

                entity.Property(e => e.Nome).IsUnicode(false);
            });

            modelBuilder.Entity<VwcLogixEstoque>(entity =>
            {
                entity.ToView("vwc_Logix_Estoque");

                entity.Property(e => e.DatEmisNf).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);
            });

            modelBuilder.Entity<VwcLogixEstoqueGeral>(entity =>
            {
                entity.ToView("vwc_Logix_Estoque_Geral");

                entity.Property(e => e.CodItemCompon)
                    .IsUnicode(false)
                    .UseCollation("Latin1_General_CI_AS");
            });

            modelBuilder.Entity<VwcLogixEstoqueMinimoTecnico>(entity =>
            {
                entity.ToView("vwc_Logix_Estoque_Minimo_Tecnico");
            });

            modelBuilder.Entity<VwcLogixEstoqueTecnico>(entity =>
            {
                entity.ToView("vwc_Logix_Estoque_Tecnico");

                entity.Property(e => e.Nome).IsUnicode(false);
            });

            modelBuilder.Entity<VwcLogixEstoqueTecnicoFull>(entity =>
            {
                entity.ToView("vwc_Logix_Estoque_TecnicoFULL");

                entity.Property(e => e.DatEmisNf).IsUnicode(false);

                entity.Property(e => e.DataEmissaoAntiga).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.QtdTotRecebida).IsUnicode(false);

                entity.Property(e => e.QtdTotRemessa).IsUnicode(false);
            });

            modelBuilder.Entity<VwcLogixEstoqueTecnicoOld>(entity =>
            {
                entity.ToView("vwc_Logix_Estoque_Tecnico_OLD");
            });

            modelBuilder.Entity<VwcLogixEstoqueTecnicoOld2>(entity =>
            {
                entity.ToView("vwc_Logix_Estoque_Tecnico_OLD_2");

                entity.Property(e => e.Nome).IsUnicode(false);
            });

            modelBuilder.Entity<VwcLogixEstoqueTecnicoTotal>(entity =>
            {
                entity.ToView("vwc_Logix_Estoque_Tecnico_Total");

                entity.Property(e => e.Dataemissaoantiga).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);
            });

            modelBuilder.Entity<VwcMaicon>(entity =>
            {
                entity.ToView("vwc_Maicon");

                entity.Property(e => e.DescriçãoDaTarefa).IsUnicode(false);

                entity.Property(e => e.NomeDoUsuário).IsUnicode(false);
            });

            modelBuilder.Entity<VwcModeloPosBanrisul>(entity =>
            {
                entity.ToView("VWC_MODELO_POS_BANRISUL");

                entity.Property(e => e.CodEequip).IsUnicode(false);

                entity.Property(e => e.DescEquip).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);
            });

            modelBuilder.Entity<VwcMonitoramentoTempoAberturaChamadoCliente>(entity =>
            {
                entity.ToView("vwc_MonitoramentoTempoAberturaChamadoCliente");

                entity.Property(e => e.Cliente).IsUnicode(false);
            });

            modelBuilder.Entity<VwcMtbf1>(entity =>
            {
                entity.ToView("vwc_MTBF_1");
            });

            modelBuilder.Entity<VwcMtbf11>(entity =>
            {
                entity.ToView("vwc_MTBF1");
            });

            modelBuilder.Entity<VwcMtbf2>(entity =>
            {
                entity.ToView("vwc_MTBF_2");
            });

            modelBuilder.Entity<VwcMultaCef>(entity =>
            {
                entity.ToView("vwc_Multa_CEF");

                entity.Property(e => e.AnaliseAbertura).IsUnicode(false);

                entity.Property(e => e.AnaliseAgendamento).IsUnicode(false);

                entity.Property(e => e.AnaliseFechamento).IsUnicode(false);

                entity.Property(e => e.AnaliseFechamentoPa).IsUnicode(false);

                entity.Property(e => e.Causa).IsUnicode(false);

                entity.Property(e => e.CgcUnidadeConvênio).IsUnicode(false);

                entity.Property(e => e.Chamado).IsUnicode(false);

                entity.Property(e => e.CódigoDoOrçamento).IsUnicode(false);

                entity.Property(e => e.ExistePerto).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.FilialPerto).IsUnicode(false);

                entity.Property(e => e.Lote).IsUnicode(false);

                entity.Property(e => e.MaquinaExtraMaquina).IsUnicode(false);

                entity.Property(e => e.Modalidade).IsUnicode(false);

                entity.Property(e => e.NomeDaUnidade).IsUnicode(false);

                entity.Property(e => e.Obs).IsUnicode(false);

                entity.Property(e => e.Ocorrência).IsUnicode(false);

                entity.Property(e => e.OsClientePerto).IsUnicode(false);

                entity.Property(e => e.PatPerto).IsUnicode(false);

                entity.Property(e => e.Rat).IsUnicode(false);

                entity.Property(e => e.RatPendente).IsUnicode(false);

                entity.Property(e => e.RegiãoPerto).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.StatusSla1).IsUnicode(false);

                entity.Property(e => e.TipoIntervencao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcMultaCef2>(entity =>
            {
                entity.ToView("vwc_Multa_CEF2");

                entity.Property(e => e.AnaliseAbertura).IsUnicode(false);

                entity.Property(e => e.AnaliseAgendamento).IsUnicode(false);

                entity.Property(e => e.AnaliseFechamento).IsUnicode(false);

                entity.Property(e => e.AnaliseFechamentoPa).IsUnicode(false);

                entity.Property(e => e.Causa).IsUnicode(false);

                entity.Property(e => e.CgcUnidadeConvênio).IsUnicode(false);

                entity.Property(e => e.Chamado).IsUnicode(false);

                entity.Property(e => e.CódigoDoOrçamento).IsUnicode(false);

                entity.Property(e => e.ExistePerto).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.FilialPerto).IsUnicode(false);

                entity.Property(e => e.Lote).IsUnicode(false);

                entity.Property(e => e.MaquinaExtraMaquina).IsUnicode(false);

                entity.Property(e => e.Modalidade).IsUnicode(false);

                entity.Property(e => e.NomeDaUnidade).IsUnicode(false);

                entity.Property(e => e.Obs).IsUnicode(false);

                entity.Property(e => e.Ocorrência).IsUnicode(false);

                entity.Property(e => e.OsClientePerto).IsUnicode(false);

                entity.Property(e => e.PatPerto).IsUnicode(false);

                entity.Property(e => e.Rat).IsUnicode(false);

                entity.Property(e => e.RatPendente).IsUnicode(false);

                entity.Property(e => e.RegiãoPerto).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.StatusSla1).IsUnicode(false);

                entity.Property(e => e.TipoIntervencao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcMultaCefMaio>(entity =>
            {
                entity.ToView("vwc_Multa_CEF_Maio");

                entity.Property(e => e.AnaliseAbertura).IsUnicode(false);

                entity.Property(e => e.AnaliseAgendamento).IsUnicode(false);

                entity.Property(e => e.AnaliseFechamento).IsUnicode(false);

                entity.Property(e => e.AnaliseFechamentoPa).IsUnicode(false);

                entity.Property(e => e.Causa).IsUnicode(false);

                entity.Property(e => e.Chamado).IsUnicode(false);

                entity.Property(e => e.ExistePerto).IsUnicode(false);

                entity.Property(e => e.FilialPerto).IsUnicode(false);

                entity.Property(e => e.MaquinaExtraMaquina).IsUnicode(false);

                entity.Property(e => e.Obs).IsUnicode(false);

                entity.Property(e => e.OsClientePerto).IsUnicode(false);

                entity.Property(e => e.PatPerto).IsUnicode(false);

                entity.Property(e => e.Rat).IsUnicode(false);

                entity.Property(e => e.RatPendente).IsUnicode(false);

                entity.Property(e => e.RegiãoPerto).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.StatusSla1).IsUnicode(false);

                entity.Property(e => e.TipoIntervencao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcO>(entity =>
            {
                entity.ToView("vwc_os");

                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.ClienteLocal).IsUnicode(false);

                entity.Property(e => e.CnpjestabelecimentoCliente).IsUnicode(false);

                entity.Property(e => e.CodEtipoIntervencao).IsUnicode(false);

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.CodUsuarioAcertoParque).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCancelamento).IsUnicode(false);

                entity.Property(e => e.CodUsuarioFechamento).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManutencao).IsUnicode(false);

                entity.Property(e => e.CodUsuarioMarcaEspecial).IsUnicode(false);

                entity.Property(e => e.DataAberturaOs).IsUnicode(false);

                entity.Property(e => e.DataSolicitacao).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.DescMotivoMarcaEspecial).IsUnicode(false);

                entity.Property(e => e.DescNumSerieNi).IsUnicode(false);

                entity.Property(e => e.DtFimSla).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.HoraAberturaOs).IsUnicode(false);

                entity.Property(e => e.HoraSolicitacao).IsUnicode(false);

                entity.Property(e => e.HrFimSla).IsUnicode(false);

                entity.Property(e => e.Marcacaoespecial).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NomTipoIntervencao).IsUnicode(false);

                entity.Property(e => e.NomeArquivoIntegracaoBanrisul).IsUnicode(false);

                entity.Property(e => e.NomeContato).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeSolicitante).IsUnicode(false);

                entity.Property(e => e.NroSerieMecanismo).IsUnicode(false);

                entity.Property(e => e.NumAgenciaBanco).IsUnicode(false);

                entity.Property(e => e.NumAgenciaNi).IsUnicode(false);

                entity.Property(e => e.NumContaEstabelecimentoCliente).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumOsquarteirizada).IsUnicode(false);

                entity.Property(e => e.NumReincidencia).IsUnicode(false);

                entity.Property(e => e.NumRemessa).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.NumTerminal).IsUnicode(false);

                entity.Property(e => e.ObservacaoCliente).IsUnicode(false);

                entity.Property(e => e.Pais).IsUnicode(false);

                entity.Property(e => e.RazaoSocialEstabelecimentoCliente).IsUnicode(false);

                entity.Property(e => e.RedeEquipamento).IsUnicode(false);

                entity.Property(e => e.ServicoEmail).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.TelefoneSolicitante).IsUnicode(false);
            });

            modelBuilder.Entity<VwcOrdemServico>(entity =>
            {
                entity.ToView("vwc_OrdemServico");

                entity.Property(e => e.IndServico).IsUnicode(false);
            });

            modelBuilder.Entity<VwcOrdemServicoAtendidum>(entity =>
            {
                entity.ToView("vwc_OrdemServicoAtendida");

                entity.Property(e => e.IndServico).IsUnicode(false);
            });

            modelBuilder.Entity<VwcOsClienteCoordenadorContrato>(entity =>
            {
                entity.ToView("vwc_OS_Cliente_CoordenadorContrato");

                entity.Property(e => e.CodOs).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCoordenadorContrato).IsUnicode(false);

                entity.Property(e => e.DataHoraAberturaOs).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeUsuario).IsUnicode(false);
            });

            modelBuilder.Entity<VwcOsFechadasNetbookMesAtual>(entity =>
            {
                entity.ToView("vwc_OS_fechadas_netbook_MesAtual");

                entity.Property(e => e.NomeTécnico).IsUnicode(false);
            });

            modelBuilder.Entity<VwcOsNew>(entity =>
            {
                entity.ToView("VWC_OS_NEW");

                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.CodEtipoIntervencao).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.DescTurno).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.EnderecoOs).IsUnicode(false);

                entity.Property(e => e.NomeCidade).IsUnicode(false);

                entity.Property(e => e.NomeCliente).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NomeSla).IsUnicode(false);

                entity.Property(e => e.NomeSolicitante).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumBanco).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.Patregiao).IsUnicode(false);

                entity.Property(e => e.PatregiaoAbrev).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);
            });

            modelBuilder.Entity<VwcOsreincidenciaNew>(entity =>
            {
                entity.ToView("vwc_OSReincidencia_NEW");

                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.CnpjestabelecimentoCliente).IsUnicode(false);

                entity.Property(e => e.CodUsuarioAcertoParque).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCancelamento).IsUnicode(false);

                entity.Property(e => e.CodUsuarioFechamento).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManutencao).IsUnicode(false);

                entity.Property(e => e.CodUsuarioMarcaEspecial).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.DescMotivoMarcaEspecial).IsUnicode(false);

                entity.Property(e => e.DescNumSerieNi).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NomTipoIntervencao).IsUnicode(false);

                entity.Property(e => e.NomeArquivoIntegracaoBanrisul).IsUnicode(false);

                entity.Property(e => e.NomeContato).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NomeSolicitante).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumAgenciaBanco).IsUnicode(false);

                entity.Property(e => e.NumAgenciaNi).IsUnicode(false);

                entity.Property(e => e.NumBanco).IsUnicode(false);

                entity.Property(e => e.NumContaEstabelecimentoCliente).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumOsquarteirizada).IsUnicode(false);

                entity.Property(e => e.NumRemessa).IsUnicode(false);

                entity.Property(e => e.NumTerminal).IsUnicode(false);

                entity.Property(e => e.ObservacaoCliente).IsUnicode(false);

                entity.Property(e => e.Pais).IsUnicode(false);

                entity.Property(e => e.RazaoSocialEstabelecimentoCliente).IsUnicode(false);

                entity.Property(e => e.RedeEquipamento).IsUnicode(false);

                entity.Property(e => e.ServicoEmail).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.TelefoneSolicitante).IsUnicode(false);
            });

            modelBuilder.Entity<VwcOsreincidencium>(entity =>
            {
                entity.ToView("vwc_OSReincidencia");
            });

            modelBuilder.Entity<VwcOsrencidencium>(entity =>
            {
                entity.ToView("_vwc_OSRencidencia_");

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumBanco).IsUnicode(false);
            });

            modelBuilder.Entity<VwcParqueO>(entity =>
            {
                entity.ToView("vwc_ParqueOS");
            });

            modelBuilder.Entity<VwcParqueOs2>(entity =>
            {
                entity.ToView("vwc_ParqueOS2");
            });

            modelBuilder.Entity<VwcParqueOsperformance>(entity =>
            {
                entity.ToView("vwc_ParqueOSPerformance");
            });

            modelBuilder.Entity<VwcParqueOsperformance2>(entity =>
            {
                entity.ToView("vwc_ParqueOSPerformance2");
            });

            modelBuilder.Entity<VwcParqueOsperformanceAnual>(entity =>
            {
                entity.ToView("vwc_ParqueOSPerformanceAnual");
            });

            modelBuilder.Entity<VwcParqueResumo>(entity =>
            {
                entity.ToView("vwc_Parque_Resumo");

                entity.Property(e => e.AgenciaNumSerie).IsUnicode(false);

                entity.Property(e => e.AgenciaSb).IsUnicode(false);

                entity.Property(e => e.Lote).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NomePais).IsUnicode(false);

                entity.Property(e => e.NomeTipoContrato).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.Semat).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);
            });

            modelBuilder.Entity<VwcParqueResumoPerformance>(entity =>
            {
                entity.ToView("vwc_Parque_Resumo_Performance");
            });

            modelBuilder.Entity<VwcParqueResumoPerformance2>(entity =>
            {
                entity.ToView("vwc_Parque_Resumo_Performance_2");
            });

            modelBuilder.Entity<VwcParqueResumoPerformanceAnual>(entity =>
            {
                entity.ToView("vwc_Parque_Resumo_PerformanceAnual");
            });

            modelBuilder.Entity<VwcPatRegiao>(entity =>
            {
                entity.ToView("vwc_PAT_Regiao");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeRegiao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcPeca>(entity =>
            {
                entity.ToView("vwc_Peca");
            });

            modelBuilder.Entity<VwcPendenciaFiliaisDashboard>(entity =>
            {
                entity.ToView("vwc_PendenciaFiliaisDashboard");

                entity.Property(e => e.Filial).IsUnicode(false);
            });

            modelBuilder.Entity<VwcPendenciaFiliaisDashboardBackup>(entity =>
            {
                entity.ToView("vwc_PendenciaFiliaisDashboardBackup");

                entity.Property(e => e.Filial).IsUnicode(false);
            });

            modelBuilder.Entity<VwcPendenciasIvanKatium>(entity =>
            {
                entity.ToView("vwc_Pendencias_Ivan_Katia");

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.CnpjestabelecimentoCliente).IsUnicode(false);

                entity.Property(e => e.CodUsuarioAcertoParque).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCancelamento).IsUnicode(false);

                entity.Property(e => e.CodUsuarioFechamento).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManutencao).IsUnicode(false);

                entity.Property(e => e.CodUsuarioMarcaEspecial).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.DescMotivoMarcaEspecial).IsUnicode(false);

                entity.Property(e => e.DescNumSerieNi).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NomeArquivoIntegracaoBanrisul).IsUnicode(false);

                entity.Property(e => e.NomeContato).IsUnicode(false);

                entity.Property(e => e.NomeSolicitante).IsUnicode(false);

                entity.Property(e => e.NumAgenciaBanco).IsUnicode(false);

                entity.Property(e => e.NumAgenciaNi).IsUnicode(false);

                entity.Property(e => e.NumContaEstabelecimentoCliente).IsUnicode(false);

                entity.Property(e => e.NumEstabelecimentoCliente).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumOsquarteirizada).IsUnicode(false);

                entity.Property(e => e.NumRemessa).IsUnicode(false);

                entity.Property(e => e.NumTerminal).IsUnicode(false);

                entity.Property(e => e.ObsFechamentoBanrisul).IsUnicode(false);

                entity.Property(e => e.ObservacaoCliente).IsUnicode(false);

                entity.Property(e => e.Pais).IsUnicode(false);

                entity.Property(e => e.RazaoSocialEstabelecimentoCliente).IsUnicode(false);

                entity.Property(e => e.RedeEquipamento).IsUnicode(false);

                entity.Property(e => e.ServicoEmail).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.SugestaoOs).IsUnicode(false);

                entity.Property(e => e.TelefoneSolicitante).IsUnicode(false);
            });

            modelBuilder.Entity<VwcPendenciasTecnicoFrotum>(entity =>
            {
                entity.ToView("vwc_PendenciasTecnicoFrota");
            });

            modelBuilder.Entity<VwcPercentualQuebraParque>(entity =>
            {
                entity.ToView("vwc_Percentual_Quebra_Parque");
            });

            modelBuilder.Entity<VwcPercentualQuebraParqueIndicador>(entity =>
            {
                entity.ToView("vwc_Percentual_Quebra_Parque_Indicador");
            });

            modelBuilder.Entity<VwcPercentualQuebraParqueIndicadorNew>(entity =>
            {
                entity.ToView("vwc_Percentual_Quebra_Parque_IndicadorNew");
            });

            modelBuilder.Entity<VwcPerformance10indicesRegiao>(entity =>
            {
                entity.ToView("vwc_Performance_10IndicesRegiao");

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcPerformance10indicesRegiaoDadosCongelado>(entity =>
            {
                entity.ToView("vwc_Performance_10IndicesRegiaoDadosCongelados");

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcPerformance10indicesRegiaoFilial>(entity =>
            {
                entity.ToView("vwc_Performance_10IndicesRegiao_Filial");

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcPerformance10indicesRegiaoReincidenciaFilial>(entity =>
            {
                entity.ToView("vwc_Performance_10IndicesRegiaoReincidencia_Filial");

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcPerformance10indicesRegiaoReincidencium>(entity =>
            {
                entity.ToView("vwc_Performance_10IndicesRegiaoReincidencia");

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcPerformanceMtbf1>(entity =>
            {
                entity.ToView("vwc_Performance_MTBF1");
            });

            modelBuilder.Entity<VwcPonto>(entity =>
            {
                entity.ToView("vwc_Ponto");

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.CodUsuarioAprov).IsUnicode(false);

                entity.Property(e => e.NomeUsuario).IsUnicode(false);
            });

            modelBuilder.Entity<VwcPrevisaoFaturamento>(entity =>
            {
                entity.ToView("vwc_PrevisaoFaturamento");

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.RazaoSocial).IsUnicode(false);
            });

            modelBuilder.Entity<VwcProdutividadeTecnico>(entity =>
            {
                entity.ToView("vwc_Produtividade_Tecnicos");

                entity.Property(e => e.Localidade).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);
            });

            modelBuilder.Entity<VwcProdutividadeTecnicosMesAtual>(entity =>
            {
                entity.ToView("vwc_Produtividade_Tecnicos_Mes_Atual");

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Tecnico).IsUnicode(false);
            });

            modelBuilder.Entity<VwcProdutividadeTecnicosTodoPeriodo>(entity =>
            {
                entity.ToView("vwc_Produtividade_Tecnicos_Todo_Periodo");

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Tecnico).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRat>(entity =>
            {
                entity.ToView("vwc_rat");

                entity.Property(e => e.CaminhoRatdigitalizada).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCadastro).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManutencao).IsUnicode(false);

                entity.Property(e => e.IndBrbatendeConfederal)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MotivoEspera).IsUnicode(false);

                entity.Property(e => e.MotivoInterrupcao).IsUnicode(false);

                entity.Property(e => e.NomeAcompanhante).IsUnicode(false);

                entity.Property(e => e.NomeRespCliente).IsUnicode(false);

                entity.Property(e => e.NomeStatusServico).IsUnicode(false);

                entity.Property(e => e.NomeTecnico).IsUnicode(false);

                entity.Property(e => e.NumRat).IsUnicode(false);

                entity.Property(e => e.ObsRat).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRatOtimizadum>(entity =>
            {
                entity.ToView("vwc_RAT_Otimizada");
            });

            modelBuilder.Entity<VwcRatbrb>(entity =>
            {
                entity.ToView("vwc_RATBRB");

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.NomeDefeito).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRebateRedutor>(entity =>
            {
                entity.ToView("vwc_RebateRedutor");

                entity.Property(e => e.Tipo).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReenvioCef>(entity =>
            {
                entity.ToView("vwc_reenvioCEF");

                entity.Property(e => e.NumAgenciaNi).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.ServicoEmail).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReincidenciaFiliaisDashboard>(entity =>
            {
                entity.ToView("vwc_ReincidenciaFiliaisDashboard");

                entity.Property(e => e.Filial).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReincidenciaFiliaisDashboardBackup>(entity =>
            {
                entity.ToView("vwc_ReincidenciaFiliaisDashboardBackup");

                entity.Property(e => e.Filial).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReincidenciaLab>(entity =>
            {
                entity.ToView("vwc_reincidenciaLAB");

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.StatusItem).IsUnicode(false);

                entity.Property(e => e.TécnicoReparador).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReincidenciaTecnicosTop20>(entity =>
            {
                entity.ToView("vwc_Reincidencia_Tecnicos_Top_20");

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeTecnico).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRelAline>(entity =>
            {
                entity.ToView("vwc_RelAline");

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.DescNumSerieNi).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NomTipoIntervencao).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.NomeAcao).IsUnicode(false);

                entity.Property(e => e.NomeCausa).IsUnicode(false);

                entity.Property(e => e.NomeContrato).IsUnicode(false);

                entity.Property(e => e.NomeDefeito).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeEquipSns).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFantasiaCliente).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);

                entity.Property(e => e.NomeRegiao).IsUnicode(false);

                entity.Property(e => e.NomeServico).IsUnicode(false);

                entity.Property(e => e.NomeSla).IsUnicode(false);

                entity.Property(e => e.NomeStatusServico).IsUnicode(false);

                entity.Property(e => e.NomeTipoCausa).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumBanco).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumOsquarteirizada).IsUnicode(false);

                entity.Property(e => e.NumRat).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.ObsRat).IsUnicode(false);

                entity.Property(e => e.Observ).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Rg).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.StatusRat).IsUnicode(false);

                entity.Property(e => e.TecnicoOs).IsUnicode(false);

                entity.Property(e => e.TecnicoRat).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRelAnaliseBasa>(entity =>
            {
                entity.ToView("vwc_Rel_Analise_BASA");

                entity.Property(e => e.Agência).IsUnicode(false);

                entity.Property(e => e.AnaliseAbertura).IsUnicode(false);

                entity.Property(e => e.AnaliseFechamento).IsUnicode(false);

                entity.Property(e => e.Causa).IsUnicode(false);

                entity.Property(e => e.Comparativo).IsUnicode(false);

                entity.Property(e => e.Contrato).IsUnicode(false);

                entity.Property(e => e.ContratoPerto).IsUnicode(false);

                entity.Property(e => e.Excedente).IsUnicode(false);

                entity.Property(e => e.ExistePerto).IsUnicode(false);

                entity.Property(e => e.Fator).IsUnicode(false);

                entity.Property(e => e.FilialPerto).IsUnicode(false);

                entity.Property(e => e.HoraAb).IsUnicode(false);

                entity.Property(e => e.HoraFech).IsUnicode(false);

                entity.Property(e => e.Localização).IsUnicode(false);

                entity.Property(e => e.MaquinaExtraMaquina).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.ModeloPerto).IsUnicode(false);

                entity.Property(e => e.Município).IsUnicode(false);

                entity.Property(e => e.NºSérie).IsUnicode(false);

                entity.Property(e => e.Obs).IsUnicode(false);

                entity.Property(e => e.PatPerto).IsUnicode(false);

                entity.Property(e => e.PertoDetalhe).IsUnicode(false);

                entity.Property(e => e.PertoMotivo).IsUnicode(false);

                entity.Property(e => e.RatPendente).IsUnicode(false);

                entity.Property(e => e.RegiãoPerto).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.StatusSla1).IsUnicode(false);

                entity.Property(e => e.SériePerto).IsUnicode(false);

                entity.Property(e => e.TipoIntervencao).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRelAnaliseBasa2>(entity =>
            {
                entity.ToView("vwc_Rel_Analise_BASA2");

                entity.Property(e => e.Abertura).IsUnicode(false);

                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.AnaliseAbertura).IsUnicode(false);

                entity.Property(e => e.AnaliseFechamento).IsUnicode(false);

                entity.Property(e => e.Ação).IsUnicode(false);

                entity.Property(e => e.Causa).IsUnicode(false);

                entity.Property(e => e.CausaPerto).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.Contrato).IsUnicode(false);

                entity.Property(e => e.ContratoPerto).IsUnicode(false);

                entity.Property(e => e.CódCausa).IsUnicode(false);

                entity.Property(e => e.CódMagnus).IsUnicode(false);

                entity.Property(e => e.Dc).IsUnicode(false);

                entity.Property(e => e.Defeito).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.ExistePerto).IsUnicode(false);

                entity.Property(e => e.Fechamento).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.FilialPerto).IsUnicode(false);

                entity.Property(e => e.HoraAb).IsUnicode(false);

                entity.Property(e => e.HoraFech).IsUnicode(false);

                entity.Property(e => e.Intervenção).IsUnicode(false);

                entity.Property(e => e.IntervençãoPerto).IsUnicode(false);

                entity.Property(e => e.Local).IsUnicode(false);

                entity.Property(e => e.MaquinaExtraMaquina).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.ModeloPerto).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NSerie).IsUnicode(false);

                entity.Property(e => e.NumRat).IsUnicode(false);

                entity.Property(e => e.Obs).IsUnicode(false);

                entity.Property(e => e.ObsRat).IsUnicode(false);

                entity.Property(e => e.Observação).IsUnicode(false);

                entity.Property(e => e.Os4a).IsUnicode(false);

                entity.Property(e => e.OsCliente).IsUnicode(false);

                entity.Property(e => e.Pa).IsUnicode(false);

                entity.Property(e => e.Pat).IsUnicode(false);

                entity.Property(e => e.PatPerto).IsUnicode(false);

                entity.Property(e => e.PontoEstratégico).IsUnicode(false);

                entity.Property(e => e.Qtd).IsUnicode(false);

                entity.Property(e => e.Racesso).IsUnicode(false);

                entity.Property(e => e.RatPendente).IsUnicode(false);

                entity.Property(e => e.Região).IsUnicode(false);

                entity.Property(e => e.RegiãoPerto).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Rg).IsUnicode(false);

                entity.Property(e => e.Rhorario).IsUnicode(false);

                entity.Property(e => e.Semat).IsUnicode(false);

                entity.Property(e => e.SeriePerto).IsUnicode(false);

                entity.Property(e => e.Serviço).IsUnicode(false);

                entity.Property(e => e.SlaPerto).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusRat).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.StatusSla1).IsUnicode(false);

                entity.Property(e => e.TipoCausa).IsUnicode(false);

                entity.Property(e => e.TipoContrato).IsUnicode(false);

                entity.Property(e => e.Técnico).IsUnicode(false);

                entity.Property(e => e.TécnicoTransf).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRelAnaliseCaixa>(entity =>
            {
                entity.ToView("vwc_Rel_Analise_Caixa");

                entity.Property(e => e.AnaliseAbertura).IsUnicode(false);

                entity.Property(e => e.AnaliseAgendamento).IsUnicode(false);

                entity.Property(e => e.AnaliseFechamento).IsUnicode(false);

                entity.Property(e => e.AnaliseFechamentoPa).IsUnicode(false);

                entity.Property(e => e.AnaliseMulta).IsUnicode(false);

                entity.Property(e => e.Causa).IsUnicode(false);

                entity.Property(e => e.Chamado).IsUnicode(false);

                entity.Property(e => e.ExistePerto).IsUnicode(false);

                entity.Property(e => e.FilialPerto).IsUnicode(false);

                entity.Property(e => e.MaquinaExtraMaquina).IsUnicode(false);

                entity.Property(e => e.Obs).IsUnicode(false);

                entity.Property(e => e.OsClientePerto).IsUnicode(false);

                entity.Property(e => e.PatPerto).IsUnicode(false);

                entity.Property(e => e.RatPendente).IsUnicode(false);

                entity.Property(e => e.RegiãoPerto).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.StatusSla1).IsUnicode(false);

                entity.Property(e => e.TipoIntervencao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRelAnaliseCaixaCofre>(entity =>
            {
                entity.ToView("vwc_Rel_Analise_Caixa_Cofre");

                entity.Property(e => e.Comparativo).IsUnicode(false);

                entity.Property(e => e.ExistePerto).IsUnicode(false);

                entity.Property(e => e.FilialPerto).IsUnicode(false);

                entity.Property(e => e.Obs).IsUnicode(false);

                entity.Property(e => e.OsClientePerto).IsUnicode(false);

                entity.Property(e => e.PatPerto).IsUnicode(false);

                entity.Property(e => e.RatPendente).IsUnicode(false);

                entity.Property(e => e.RegiãoPerto).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.TipoIntervencao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRelAnaliseCaixaContrato0077>(entity =>
            {
                entity.ToView("vwc_Rel_Analise_Caixa_Contrato0077");

                entity.Property(e => e.AnaliseAbertura).IsUnicode(false);

                entity.Property(e => e.AnaliseFechamento).IsUnicode(false);

                entity.Property(e => e.AnaliseFechamentoPa).IsUnicode(false);

                entity.Property(e => e.Causa).IsUnicode(false);

                entity.Property(e => e.CoChamado).IsUnicode(false);

                entity.Property(e => e.CoChamado1).IsUnicode(false);

                entity.Property(e => e.Comparativo).IsUnicode(false);

                entity.Property(e => e.ExistePerto).IsUnicode(false);

                entity.Property(e => e.FilialPerto).IsUnicode(false);

                entity.Property(e => e.MaquinaExtraMaquina).IsUnicode(false);

                entity.Property(e => e.Obs).IsUnicode(false);

                entity.Property(e => e.OsClientePerto).IsUnicode(false);

                entity.Property(e => e.PatPerto).IsUnicode(false);

                entity.Property(e => e.PertoDetalhe).IsUnicode(false);

                entity.Property(e => e.PertoMotivo).IsUnicode(false);

                entity.Property(e => e.RatPendente).IsUnicode(false);

                entity.Property(e => e.RegiãoPerto).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.StatusSla1).IsUnicode(false);

                entity.Property(e => e.TipoIntervencao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRelAugusto>(entity =>
            {
                entity.ToView("vwc_Rel_Augusto");

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.DescNumSerieNi).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NomTipoIntervencao).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.NomeAcao).IsUnicode(false);

                entity.Property(e => e.NomeCausa).IsUnicode(false);

                entity.Property(e => e.NomeContrato).IsUnicode(false);

                entity.Property(e => e.NomeDefeito).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeEquipSns).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFantasiaCliente).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);

                entity.Property(e => e.NomeRegiao).IsUnicode(false);

                entity.Property(e => e.NomeServico).IsUnicode(false);

                entity.Property(e => e.NomeSla).IsUnicode(false);

                entity.Property(e => e.NomeStatusServico).IsUnicode(false);

                entity.Property(e => e.NomeTipoCausa).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumBanco).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumOsquarteirizada).IsUnicode(false);

                entity.Property(e => e.NumRat).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.ObsRat).IsUnicode(false);

                entity.Property(e => e.Observ).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Rg).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.StatusRat).IsUnicode(false);

                entity.Property(e => e.TecnicoOs).IsUnicode(false);

                entity.Property(e => e.TecnicoRat).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRelDaniela>(entity =>
            {
                entity.ToView("vwc_Rel_Daniela");

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.DescNumSerieNi).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NomTipoIntervencao).IsUnicode(false);

                entity.Property(e => e.NomeContrato).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeEquipSns).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFantasiaCliente).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NomeRegiao).IsUnicode(false);

                entity.Property(e => e.NomeSla).IsUnicode(false);

                entity.Property(e => e.NomeStatusServico).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumBanco).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumOsquarteirizada).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.Observ).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.Rat).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRelDefeitoPo>(entity =>
            {
                entity.ToView("vwc_RelDefeitoPOS");

                entity.Property(e => e.Defeito).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRelDefeitoPosHelp>(entity =>
            {
                entity.ToView("vwc_RelDefeitoPOS_Help");

                entity.Property(e => e.Defeito).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRelDefeitoPosHelp60>(entity =>
            {
                entity.ToView("vwc_RelDefeitoPOS_Help_60");

                entity.Property(e => e.Defeito).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRelDefeitoPosHelpRelVolnei>(entity =>
            {
                entity.ToView("vwc_RelDefeitoPOS_Help_RelVolnei");

                entity.Property(e => e.Defeito).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRelDefeitoPosVeloh3>(entity =>
            {
                entity.ToView("vwc_RelDefeitoPOS_Veloh_3");

                entity.Property(e => e.Defeito).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRelDefeitoPosVeloh3Help>(entity =>
            {
                entity.ToView("vwc_RelDefeitoPOS_Veloh_3_Help");

                entity.Property(e => e.Defeito).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRelDefeitoPosVeloh3Help60>(entity =>
            {
                entity.ToView("vwc_RelDefeitoPOS_Veloh_3_Help_60");

                entity.Property(e => e.Defeito).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRelDefeitoPosVelohC>(entity =>
            {
                entity.ToView("vwc_RelDefeitoPOS_Veloh_C");

                entity.Property(e => e.Defeito).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRelDefeitoPosVelohCHelp>(entity =>
            {
                entity.ToView("vwc_RelDefeitoPOS_Veloh_C_Help");

                entity.Property(e => e.Defeito).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRelDefeitoPosVelohCHelp60>(entity =>
            {
                entity.ToView("vwc_RelDefeitoPOS_Veloh_C_Help_60");

                entity.Property(e => e.Defeito).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRelDefeitoPosVelohW>(entity =>
            {
                entity.ToView("vwc_RelDefeitoPOS_Veloh_W");

                entity.Property(e => e.Defeito).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRelDefeitoPosVelohWHelp>(entity =>
            {
                entity.ToView("vwc_RelDefeitoPOS_Veloh_W_Help");

                entity.Property(e => e.Defeito).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRelDefeitoPosVelohWHelp60>(entity =>
            {
                entity.ToView("vwc_RelDefeitoPOS_Veloh_W_Help_60");

                entity.Property(e => e.Defeito).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRelEder>(entity =>
            {
                entity.ToView("vwc_Rel_Eder");

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.DescNumSerieNi).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NomTipoIntervencao).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.NomeAcao).IsUnicode(false);

                entity.Property(e => e.NomeCausa).IsUnicode(false);

                entity.Property(e => e.NomeContrato).IsUnicode(false);

                entity.Property(e => e.NomeDefeito).IsUnicode(false);

                entity.Property(e => e.NomeEquipSns).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFantasiaCliente).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);

                entity.Property(e => e.NomeRegiao).IsUnicode(false);

                entity.Property(e => e.NomeServico).IsUnicode(false);

                entity.Property(e => e.NomeSla).IsUnicode(false);

                entity.Property(e => e.NomeStatusServico).IsUnicode(false);

                entity.Property(e => e.NomeTipoCausa).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumBanco).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumOsquarteirizada).IsUnicode(false);

                entity.Property(e => e.NumRat).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.ObsRat).IsUnicode(false);

                entity.Property(e => e.Observ).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Rg).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.StatusRat).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.TecnicoOs).IsUnicode(false);

                entity.Property(e => e.TecnicoRat).IsUnicode(false);

                entity.Property(e => e.TipoCausa).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRelElaine>(entity =>
            {
                entity.ToView("vwc_RelElaine");

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.DescNumSerieNi).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NomTipoIntervencao).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.NomeAcao).IsUnicode(false);

                entity.Property(e => e.NomeCausa).IsUnicode(false);

                entity.Property(e => e.NomeContrato).IsUnicode(false);

                entity.Property(e => e.NomeDefeito).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeEquipSns).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFantasiaCliente).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);

                entity.Property(e => e.NomeRegiao).IsUnicode(false);

                entity.Property(e => e.NomeServico).IsUnicode(false);

                entity.Property(e => e.NomeSla).IsUnicode(false);

                entity.Property(e => e.NomeStatusServico).IsUnicode(false);

                entity.Property(e => e.NomeTipoCausa).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumBanco).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumOsquarteirizada).IsUnicode(false);

                entity.Property(e => e.NumRat).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.ObsRat).IsUnicode(false);

                entity.Property(e => e.Observ).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Rg).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.StatusRat).IsUnicode(false);

                entity.Property(e => e.TecnicoOs).IsUnicode(false);

                entity.Property(e => e.TecnicoRat).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRelFilialPr>(entity =>
            {
                entity.ToView("vwc_Rel_FILIAL_PR");

                entity.Property(e => e.Autorizada).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.Contrato).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Intervencao).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumBanco).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.Observ).IsUnicode(false);

                entity.Property(e => e.Rat).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusServico).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRelGv>(entity =>
            {
                entity.ToView("vwc_Rel_GV");

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.DescNumSerieNi).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NomTipoIntervencao).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.NomeAcao).IsUnicode(false);

                entity.Property(e => e.NomeCausa).IsUnicode(false);

                entity.Property(e => e.NomeDefeito).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeEquipSns).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFantasiaCliente).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);

                entity.Property(e => e.NomeRegiao).IsUnicode(false);

                entity.Property(e => e.NomeServico).IsUnicode(false);

                entity.Property(e => e.NomeSla).IsUnicode(false);

                entity.Property(e => e.NomeStatusServico).IsUnicode(false);

                entity.Property(e => e.NomeTipoCausa).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumBanco).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumOsquarteirizada).IsUnicode(false);

                entity.Property(e => e.NumRat).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.ObsRat).IsUnicode(false);

                entity.Property(e => e.Observ).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Rg).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.StatusRat).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.TecnicoOs).IsUnicode(false);

                entity.Property(e => e.TecnicoRat).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRelMultaCef>(entity =>
            {
                entity.ToView("vwc_Rel_Multa_CEF");

                entity.Property(e => e.CgcUnidadeConvênio).IsUnicode(false);

                entity.Property(e => e.Chamado).IsUnicode(false);

                entity.Property(e => e.Comparativo).IsUnicode(false);

                entity.Property(e => e.CódigoDoOrçamento).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.FilialPerto).IsUnicode(false);

                entity.Property(e => e.Lote).IsUnicode(false);

                entity.Property(e => e.MaquinaExtraMaquina).IsUnicode(false);

                entity.Property(e => e.Modalidade).IsUnicode(false);

                entity.Property(e => e.NomeDaUnidade).IsUnicode(false);

                entity.Property(e => e.Ocorrência).IsUnicode(false);

                entity.Property(e => e.PatPerto).IsUnicode(false);

                entity.Property(e => e.PertoDetalhe).IsUnicode(false);

                entity.Property(e => e.PertoMotivo).IsUnicode(false);

                entity.Property(e => e.Rat).IsUnicode(false);

                entity.Property(e => e.RatPendente).IsUnicode(false);

                entity.Property(e => e.RegiãoPerto).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.TipoIntervenção).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRelMultaCef2>(entity =>
            {
                entity.ToView("vwc_Rel_Multa_CEF2");

                entity.Property(e => e.CgcUnidadeConvênio).IsUnicode(false);

                entity.Property(e => e.Chamado).IsUnicode(false);

                entity.Property(e => e.Comparativo).IsUnicode(false);

                entity.Property(e => e.CódigoDoOrçamento).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.FilialPerto).IsUnicode(false);

                entity.Property(e => e.Lote).IsUnicode(false);

                entity.Property(e => e.MaquinaExtraMaquina).IsUnicode(false);

                entity.Property(e => e.Modalidade).IsUnicode(false);

                entity.Property(e => e.NomeDaUnidade).IsUnicode(false);

                entity.Property(e => e.Ocorrência).IsUnicode(false);

                entity.Property(e => e.PatPerto).IsUnicode(false);

                entity.Property(e => e.PertoDetalhe).IsUnicode(false);

                entity.Property(e => e.PertoMotivo).IsUnicode(false);

                entity.Property(e => e.Rat).IsUnicode(false);

                entity.Property(e => e.RatPendente).IsUnicode(false);

                entity.Property(e => e.RegiãoPerto).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.TipoIntervenção).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRelRegi>(entity =>
            {
                entity.ToView("vwc_RelRegis");

                entity.Property(e => e.Acao).IsUnicode(false);

                entity.Property(e => e.Celular).IsUnicode(false);

                entity.Property(e => e.CodEcausa).IsUnicode(false);

                entity.Property(e => e.CodEcausaAbrev).IsUnicode(false);

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.DataDefeito).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.Defeito).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.FoneParticular).IsUnicode(false);

                entity.Property(e => e.FonePerto).IsUnicode(false);

                entity.Property(e => e.HoraDefeito).IsUnicode(false);

                entity.Property(e => e.Ind).IsUnicode(false);

                entity.Property(e => e.Lote).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NroContrato).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Servico).IsUnicode(false);

                entity.Property(e => e.TecnicoRat).IsUnicode(false);

                entity.Property(e => e.UsuarioCadastroRat).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRelRegisBanrisul>(entity =>
            {
                entity.ToView("vwc_RelRegisBanrisul");

                entity.Property(e => e.Acao).IsUnicode(false);

                entity.Property(e => e.Celular).IsUnicode(false);

                entity.Property(e => e.CodEcausa).IsUnicode(false);

                entity.Property(e => e.CodEcausaAbrev).IsUnicode(false);

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.DataDefeito).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.Defeito).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.FoneParticular).IsUnicode(false);

                entity.Property(e => e.FonePerto).IsUnicode(false);

                entity.Property(e => e.HoraDefeito).IsUnicode(false);

                entity.Property(e => e.Ind).IsUnicode(false);

                entity.Property(e => e.Lote).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NroContrato).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Servico).IsUnicode(false);

                entity.Property(e => e.TecnicoRat).IsUnicode(false);

                entity.Property(e => e.UsuarioCadastroRat).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRelRegisBb>(entity =>
            {
                entity.ToView("vwc_RelRegisBB");

                entity.Property(e => e.Acao).IsUnicode(false);

                entity.Property(e => e.Celular).IsUnicode(false);

                entity.Property(e => e.CodEcausa).IsUnicode(false);

                entity.Property(e => e.CodEcausaAbrev).IsUnicode(false);

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.DataDefeito).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.Defeito).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.FoneParticular).IsUnicode(false);

                entity.Property(e => e.FonePerto).IsUnicode(false);

                entity.Property(e => e.HoraDefeito).IsUnicode(false);

                entity.Property(e => e.Ind).IsUnicode(false);

                entity.Property(e => e.Lote).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NroContrato).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Servico).IsUnicode(false);

                entity.Property(e => e.TecnicoRat).IsUnicode(false);

                entity.Property(e => e.UsuarioCadastroRat).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRelSilmara>(entity =>
            {
                entity.ToView("vwc_RelSilmara");

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.DescNumSerieNi).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NomTipoIntervencao).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.NomeAcao).IsUnicode(false);

                entity.Property(e => e.NomeCausa).IsUnicode(false);

                entity.Property(e => e.NomeContrato).IsUnicode(false);

                entity.Property(e => e.NomeDefeito).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeEquipSns).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFantasiaCliente).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);

                entity.Property(e => e.NomeRegiao).IsUnicode(false);

                entity.Property(e => e.NomeServico).IsUnicode(false);

                entity.Property(e => e.NomeSla).IsUnicode(false);

                entity.Property(e => e.NomeStatusServico).IsUnicode(false);

                entity.Property(e => e.NomeTipoCausa).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumBanco).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumOsquarteirizada).IsUnicode(false);

                entity.Property(e => e.NumRat).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.ObsRat).IsUnicode(false);

                entity.Property(e => e.Observ).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Rg).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.StatusRat).IsUnicode(false);

                entity.Property(e => e.TecnicoOs).IsUnicode(false);

                entity.Property(e => e.TecnicoRat).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRelSlaCefMesAnterior>(entity =>
            {
                entity.ToView("vwc_Rel_SLA_CEF_Mes_Anterior");

                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.DataAberturaOs).IsUnicode(false);

                entity.Property(e => e.DataAgendamento).IsUnicode(false);

                entity.Property(e => e.DataFechamento).IsUnicode(false);

                entity.Property(e => e.DataFimSla).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.Equipamento).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Intervencao).IsUnicode(false);

                entity.Property(e => e.Local).IsUnicode(false);

                entity.Property(e => e.Nserie).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.Pat).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRelVwcAnaliseCaixa20062009>(entity =>
            {
                entity.ToView("vwc_Rel_vwc_Analise_Caixa_2006_2009");

                entity.Property(e => e.AnaliseAbertura).IsUnicode(false);

                entity.Property(e => e.AnaliseFechamento).IsUnicode(false);

                entity.Property(e => e.AnaliseFechamentoPa).IsUnicode(false);

                entity.Property(e => e.Causa).IsUnicode(false);

                entity.Property(e => e.Comparativo).IsUnicode(false);

                entity.Property(e => e.ExistePerto).IsUnicode(false);

                entity.Property(e => e.FilialPerto).IsUnicode(false);

                entity.Property(e => e.MaquinaExtraMaquina).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.ModeloPerto).IsUnicode(false);

                entity.Property(e => e.Obs).IsUnicode(false);

                entity.Property(e => e.OsClientePerto).IsUnicode(false);

                entity.Property(e => e.PatPerto).IsUnicode(false);

                entity.Property(e => e.PertoDetalhe).IsUnicode(false);

                entity.Property(e => e.PertoMotivo).IsUnicode(false);

                entity.Property(e => e.RatPendente).IsUnicode(false);

                entity.Property(e => e.RegiãoPerto).IsUnicode(false);

                entity.Property(e => e.Siate).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.StatusSla1).IsUnicode(false);

                entity.Property(e => e.Série).IsUnicode(false);

                entity.Property(e => e.SériePerto).IsUnicode(false);

                entity.Property(e => e.TipoIntervencao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRelVwcMultaCefMaio>(entity =>
            {
                entity.ToView("vwc_Rel_vwc_Multa_CEF_Maio");

                entity.Property(e => e.AnaliseAbertura).IsUnicode(false);

                entity.Property(e => e.AnaliseAgendamento).IsUnicode(false);

                entity.Property(e => e.AnaliseFechamento).IsUnicode(false);

                entity.Property(e => e.AnaliseFechamentoPa).IsUnicode(false);

                entity.Property(e => e.Causa).IsUnicode(false);

                entity.Property(e => e.Chamado).IsUnicode(false);

                entity.Property(e => e.Comparativo).IsUnicode(false);

                entity.Property(e => e.ExistePerto).IsUnicode(false);

                entity.Property(e => e.FilialPerto).IsUnicode(false);

                entity.Property(e => e.MaquinaExtraMaquina).IsUnicode(false);

                entity.Property(e => e.Obs).IsUnicode(false);

                entity.Property(e => e.OsClientePerto).IsUnicode(false);

                entity.Property(e => e.PatPerto).IsUnicode(false);

                entity.Property(e => e.PertoDetalhe).IsUnicode(false);

                entity.Property(e => e.PertoMotivo).IsUnicode(false);

                entity.Property(e => e.Rat).IsUnicode(false);

                entity.Property(e => e.RatPendente).IsUnicode(false);

                entity.Property(e => e.RegiãoPerto).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.StatusSla1).IsUnicode(false);

                entity.Property(e => e.TipoIntervencao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRelatorioDescricao>(entity =>
            {
                entity.ToView("vwc_RelatorioDescricao");

                entity.Property(e => e.Nome).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRelatorioDetalhadoChamado>(entity =>
            {
                entity.ToView("vwc_RelatorioDetalhadoChamados");

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.DescNumSerieNi).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NomTipoIntervencao).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.NomeAcao).IsUnicode(false);

                entity.Property(e => e.NomeCausa).IsUnicode(false);

                entity.Property(e => e.NomeContrato).IsUnicode(false);

                entity.Property(e => e.NomeDefeito).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeEquipSns).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFantasiaCliente).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);

                entity.Property(e => e.NomeRegiao).IsUnicode(false);

                entity.Property(e => e.NomeServico).IsUnicode(false);

                entity.Property(e => e.NomeSla).IsUnicode(false);

                entity.Property(e => e.NomeStatusServico).IsUnicode(false);

                entity.Property(e => e.NomeTipoCausa).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumBanco).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumOsquarteirizada).IsUnicode(false);

                entity.Property(e => e.NumRat).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.ObsRat).IsUnicode(false);

                entity.Property(e => e.Observ).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Rg).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.StatusRat).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.TecnicoOs).IsUnicode(false);

                entity.Property(e => e.TecnicoRat).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRelatorioFalhasAlexandre>(entity =>
            {
                entity.ToView("vwc_RelatorioFalhasAlexandre");

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.LocalAtendimento).IsUnicode(false);

                entity.Property(e => e.NumRat).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRelatorioFalhasAlexandreSintetico>(entity =>
            {
                entity.ToView("vwc_RelatorioFalhasAlexandreSintetico");

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.DuracaoFalhas).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRelatorioLocaisPo>(entity =>
            {
                entity.ToView("vwc_RelatorioLocaisPOS");

                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.Cnpj).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.Fone).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.RemanejamentoCancelado).IsUnicode(false);

                entity.Property(e => e.RemanejamentoComSucesso).IsUnicode(false);

                entity.Property(e => e.Serie).IsUnicode(false);

                entity.Property(e => e.Tipo).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRelatorioLocaisPostotal>(entity =>
            {
                entity.ToView("vwc_RelatorioLocaisPOSTotal");

                entity.Property(e => e.TotaldeEquipamentos).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRelatorioRatsTensaoTerraNeutro>(entity =>
            {
                entity.ToView("vwc_RelatorioRatsTensaoTerraNeutro");

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NomeTecnico).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.ObsRat).IsUnicode(false);

                entity.Property(e => e.Rat).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Servico).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e.TemperaturaAmbiente).IsUnicode(false);

                entity.Property(e => e.TensaoComCarga).IsUnicode(false);

                entity.Property(e => e.TensaoSemCarga).IsUnicode(false);

                entity.Property(e => e.TensaoTerraNeutro).IsUnicode(false);

                entity.Property(e => e.TipoIntervencao).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingAtendimentosBrb>(entity =>
            {
                entity.ToView("vwc_Reporting_Atendimentos_BRB");

                entity.Property(e => e.MesAtendimento).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingBanrisulChamadosOrcamento>(entity =>
            {
                entity.ToView("vwc_Reporting_Banrisul_Chamados_Orcamentos");

                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.DataFiltro).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.Equipamento).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Intervenção).IsUnicode(false);

                entity.Property(e => e.Local).IsUnicode(false);

                entity.Property(e => e.MaquinaExtraMaquina).IsUnicode(false);

                entity.Property(e => e.Nserie).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.Observação).IsUnicode(false);

                entity.Property(e => e.PatRegiao).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingBanrisulContrato>(entity =>
            {
                entity.ToView("vwc_Reporting_Banrisul_Contratos");

                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.DataAberturaOs).IsUnicode(false);

                entity.Property(e => e.DataAgendamento).IsUnicode(false);

                entity.Property(e => e.DataFechamento).IsUnicode(false);

                entity.Property(e => e.DataFiltro).IsUnicode(false);

                entity.Property(e => e.DataFimSla).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.Equipamento).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Intervencao).IsUnicode(false);

                entity.Property(e => e.Local).IsUnicode(false);

                entity.Property(e => e.MaquinaExtraMaquina).IsUnicode(false);

                entity.Property(e => e.Nserie).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.ObsRat).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.Pat).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingBanrisulSla>(entity =>
            {
                entity.ToView("vwc_Reporting_Banrisul_SLA");

                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.DataAberturaOs).IsUnicode(false);

                entity.Property(e => e.DataAgendamento).IsUnicode(false);

                entity.Property(e => e.DataFechamento).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.Equipamento).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Intervencao).IsUnicode(false);

                entity.Property(e => e.Local).IsUnicode(false);

                entity.Property(e => e.Nserie).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.Pat).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);

                entity.Property(e => e.Semat).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingBanrisulSla52>(entity =>
            {
                entity.ToView("vwc_Reporting_Banrisul_SLA_52");

                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.DataAberturaOs).IsUnicode(false);

                entity.Property(e => e.DataAgendamento).IsUnicode(false);

                entity.Property(e => e.DataFechamento).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.Equipamento).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Intervencao).IsUnicode(false);

                entity.Property(e => e.Local).IsUnicode(false);

                entity.Property(e => e.Nserie).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.Pat).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);

                entity.Property(e => e.Semat).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingBanrisulSla52PosVeloh>(entity =>
            {
                entity.ToView("vwc_Reporting_Banrisul_SLA_52_POS_VELOH");

                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.DataAberturaOs).IsUnicode(false);

                entity.Property(e => e.DataAgendamento).IsUnicode(false);

                entity.Property(e => e.DataFechamento).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.Equipamento).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Intervencao).IsUnicode(false);

                entity.Property(e => e.Local).IsUnicode(false);

                entity.Property(e => e.Nserie).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.Pat).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);

                entity.Property(e => e.Semat).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingBasaSla>(entity =>
            {
                entity.ToView("vwc_Reporting_BASA_SLA");

                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.DataAberturaOs).IsUnicode(false);

                entity.Property(e => e.DataAgendamento).IsUnicode(false);

                entity.Property(e => e.DataFechamento).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.Equipamento).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Intervencao).IsUnicode(false);

                entity.Property(e => e.Local).IsUnicode(false);

                entity.Property(e => e.Nserie).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.Pat).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);

                entity.Property(e => e.Semat).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingBbSla>(entity =>
            {
                entity.ToView("vwc_Reporting_BB_SLA");

                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.DataAberturaOs).IsUnicode(false);

                entity.Property(e => e.DataAgendamento).IsUnicode(false);

                entity.Property(e => e.DataFechamento).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.Equipamento).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Intervencao).IsUnicode(false);

                entity.Property(e => e.Local).IsUnicode(false);

                entity.Property(e => e.NomeContrato).IsUnicode(false);

                entity.Property(e => e.Nserie).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.Pat).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Semat).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingBbdSla>(entity =>
            {
                entity.ToView("vwc_Reporting_BBD_SLA");

                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.DataAberturaOs).IsUnicode(false);

                entity.Property(e => e.DataAgendamento).IsUnicode(false);

                entity.Property(e => e.DataFechamento).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.Equipamento).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Intervencao).IsUnicode(false);

                entity.Property(e => e.Local).IsUnicode(false);

                entity.Property(e => e.Nserie).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.Pat).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);

                entity.Property(e => e.Semat).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingBnbGraficoSla>(entity =>
            {
                entity.ToView("vwc_Reporting_BNB_Grafico_SLA");

                entity.Property(e => e.Cl1015).IsUnicode(false);

                entity.Property(e => e.ExtraMaquina).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingBnbSla>(entity =>
            {
                entity.ToView("vwc_Reporting_BNB_SLA");

                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.DataAberturaOs).IsUnicode(false);

                entity.Property(e => e.DataAgendamento).IsUnicode(false);

                entity.Property(e => e.DataFechamento).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.Equipamento).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Grupo).IsUnicode(false);

                entity.Property(e => e.Horas).IsUnicode(false);

                entity.Property(e => e.Intervencao).IsUnicode(false);

                entity.Property(e => e.Local).IsUnicode(false);

                entity.Property(e => e.NomeContrato).IsUnicode(false);

                entity.Property(e => e.Nserie).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.ObsRat).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.Pat).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Semat).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingBrbSla>(entity =>
            {
                entity.ToView("vwc_Reporting_BRB_SLA");

                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.DataAberturaOs).IsUnicode(false);

                entity.Property(e => e.DataAgendamento).IsUnicode(false);

                entity.Property(e => e.DataFechamento).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.Equipamento).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Intervencao).IsUnicode(false);

                entity.Property(e => e.Local).IsUnicode(false);

                entity.Property(e => e.Nserie).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.Pae).IsUnicode(false);

                entity.Property(e => e.Pat).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);

                entity.Property(e => e.Semat).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingCefGrafico5853>(entity =>
            {
                entity.ToView("vwc_Reporting_CEF_Grafico_5853");

                entity.Property(e => e.Cl1015).IsUnicode(false);

                entity.Property(e => e.ExtraMaquina).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingCefGrafico5855>(entity =>
            {
                entity.ToView("vwc_Reporting_CEF_Grafico_5855");

                entity.Property(e => e.Cl1015).IsUnicode(false);

                entity.Property(e => e.ExtraMaquina).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingCefGraficoSla>(entity =>
            {
                entity.ToView("vwc_Reporting_CEF_Grafico_SLA");

                entity.Property(e => e.Cl1015).IsUnicode(false);

                entity.Property(e => e.ExtraMaquina).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingCefSla>(entity =>
            {
                entity.ToView("vwc_Reporting_CEF_SLA");

                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.DataAberturaOs).IsUnicode(false);

                entity.Property(e => e.DataAgendamento).IsUnicode(false);

                entity.Property(e => e.DataFechamento).IsUnicode(false);

                entity.Property(e => e.DataFimSla).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.Equipamento).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Intervencao).IsUnicode(false);

                entity.Property(e => e.Local).IsUnicode(false);

                entity.Property(e => e.Nserie).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.Pat).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingCefSla58535855>(entity =>
            {
                entity.ToView("vwc_Reporting_CEF_SLA_5853_5855");

                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.DataAberturaOs).IsUnicode(false);

                entity.Property(e => e.DataAgendamento).IsUnicode(false);

                entity.Property(e => e.DataFechamento).IsUnicode(false);

                entity.Property(e => e.DataFimSla).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.Equipamento).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Intervencao).IsUnicode(false);

                entity.Property(e => e.Local).IsUnicode(false);

                entity.Property(e => e.Nserie).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.Pat).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingCefSlaContrato1>(entity =>
            {
                entity.ToView("vwc_Reporting_CEF_SLA_Contrato1");

                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.DataAberturaOs).IsUnicode(false);

                entity.Property(e => e.DataAgendamento).IsUnicode(false);

                entity.Property(e => e.DataFechamento).IsUnicode(false);

                entity.Property(e => e.DataFimSla).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.Equipamento).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Intervencao).IsUnicode(false);

                entity.Property(e => e.Local).IsUnicode(false);

                entity.Property(e => e.Nserie).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.Pat).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingCefSlaContrato3>(entity =>
            {
                entity.ToView("vwc_Reporting_CEF_SLA_Contrato3");

                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.DataAberturaOs).IsUnicode(false);

                entity.Property(e => e.DataAgendamento).IsUnicode(false);

                entity.Property(e => e.DataFechamento).IsUnicode(false);

                entity.Property(e => e.DataFimSla).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.Equipamento).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Intervencao).IsUnicode(false);

                entity.Property(e => e.Local).IsUnicode(false);

                entity.Property(e => e.Nserie).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.Pat).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingCobraDispBbSla>(entity =>
            {
                entity.ToView("vwc_Reporting_Cobra_DispBB_SLA");

                entity.Property(e => e.Cl1015).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingCobraGraficoSla>(entity =>
            {
                entity.ToView("vwc_Reporting_Cobra_Grafico_SLA");

                entity.Property(e => e.Cl1015).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingCobraGraficoSla2>(entity =>
            {
                entity.ToView("vwc_Reporting_Cobra_Grafico_SLA_2");

                entity.Property(e => e.Cl1015).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingCobraRelatorioComparacao>(entity =>
            {
                entity.ToView("vwc_Reporting_Cobra_Relatorio_comparacao");

                entity.Property(e => e.AnaliseAberturaOs).IsUnicode(false);

                entity.Property(e => e.AnaliseDataAgendamento).IsUnicode(false);

                entity.Property(e => e.AnaliseDataFechamento).IsUnicode(false);

                entity.Property(e => e.AnaliseDataFimSla).IsUnicode(false);

                entity.Property(e => e.AnaliseKm).IsUnicode(false);

                entity.Property(e => e.AnalisePlanilhaCobra).IsUnicode(false);

                entity.Property(e => e.AnaliseRebate).IsUnicode(false);

                entity.Property(e => e.AnaliseRedutor).IsUnicode(false);

                entity.Property(e => e.AnaliseSat).IsUnicode(false);

                entity.Property(e => e.AnaliseSla).IsUnicode(false);

                entity.Property(e => e.AnaliseStatusSla).IsUnicode(false);

                entity.Property(e => e.AnaliseValorManutencao).IsUnicode(false);

                entity.Property(e => e.ChamadoCancelado).IsUnicode(false);

                entity.Property(e => e.ChamadoReaberto).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Cl1015).IsUnicode(false);

                entity.Property(e => e.Contingencia).IsUnicode(false);

                entity.Property(e => e.DataAlterada).IsUnicode(false);

                entity.Property(e => e.EquipamentoForadeGarantia).IsUnicode(false);

                entity.Property(e => e.IntervençãoNãoCorretiva).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.NomeArquivoPnd).IsUnicode(false);

                entity.Property(e => e.NomeArquivoRat).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.QtdHorasAcrescimoKm).IsUnicode(false);

                entity.Property(e => e.RegraPerto).IsUnicode(false);

                entity.Property(e => e.Semat).IsUnicode(false);

                entity.Property(e => e.Slacobra).IsFixedLength(true);

                entity.Property(e => e.SlaforadeContrato).IsUnicode(false);

                entity.Property(e => e.Slaperto).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.StatusSlacobra).IsUnicode(false);

                entity.Property(e => e.TipoRetornoCliente).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);

                entity.Property(e => e.Vandalismo).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingCobraSla>(entity =>
            {
                entity.ToView("vwc_Reporting_Cobra_SLA");

                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.ArquivoPnd).IsUnicode(false);

                entity.Property(e => e.ArquivoRat).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Cl1015).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.DataFimSlaSemVand).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.Equipamento).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Intervencao).IsUnicode(false);

                entity.Property(e => e.Local).IsUnicode(false);

                entity.Property(e => e.Nserie).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.Pat).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.QtdHorasAcrescimoKm).IsUnicode(false);

                entity.Property(e => e.Racesso).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Rhorario).IsUnicode(false);

                entity.Property(e => e.Semat).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingCobraSlaComparacao>(entity =>
            {
                entity.ToView("vwc_Reporting_Cobra_SLA_Comparacao");

                entity.Property(e => e.AnaliseAberturaOs).IsUnicode(false);

                entity.Property(e => e.AnaliseDataAgendamento).IsUnicode(false);

                entity.Property(e => e.AnaliseDataFechamento).IsUnicode(false);

                entity.Property(e => e.AnaliseDataFimSla).IsUnicode(false);

                entity.Property(e => e.AnalisePlanilhaCobra).IsUnicode(false);

                entity.Property(e => e.AnaliseStatusSla).IsUnicode(false);

                entity.Property(e => e.Cl1015).IsUnicode(false);

                entity.Property(e => e.DataFimSlaSemVand).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.QtdHorasAcrescimoKm).IsUnicode(false);

                entity.Property(e => e.Semat).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.StatusSlacobra).IsUnicode(false);

                entity.Property(e => e.TipoRetornoCliente).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingCobraSlaComparacao2>(entity =>
            {
                entity.ToView("vwc_Reporting_Cobra_SLA_Comparacao2");

                entity.Property(e => e.AnaliseAberturaOs).IsUnicode(false);

                entity.Property(e => e.AnaliseDataAgendamento).IsUnicode(false);

                entity.Property(e => e.AnaliseDataFechamento).IsUnicode(false);

                entity.Property(e => e.AnaliseDataFimSla).IsUnicode(false);

                entity.Property(e => e.AnaliseKm).IsUnicode(false);

                entity.Property(e => e.AnalisePlanilhaCobra).IsUnicode(false);

                entity.Property(e => e.AnaliseSla).IsUnicode(false);

                entity.Property(e => e.AnaliseStatusSla).IsUnicode(false);

                entity.Property(e => e.AnaliseValorManutencao).IsUnicode(false);

                entity.Property(e => e.ChamadoCancelado).IsUnicode(false);

                entity.Property(e => e.ChamadoReaberto).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Cl1015).IsUnicode(false);

                entity.Property(e => e.Contingencia).IsUnicode(false);

                entity.Property(e => e.DataAlterada).IsUnicode(false);

                entity.Property(e => e.DataFimSlaSemAgend).IsUnicode(false);

                entity.Property(e => e.DataFimSlaSemCofre).IsUnicode(false);

                entity.Property(e => e.DataFimSlaSemCopa).IsUnicode(false);

                entity.Property(e => e.DataFimSlaSemVand).IsUnicode(false);

                entity.Property(e => e.EquipamentoForadeGarantia).IsUnicode(false);

                entity.Property(e => e.IntervençãoNãoCorretiva).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.NomeArquivoPnd).IsUnicode(false);

                entity.Property(e => e.NomeArquivoRat).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.QtdHorasAcrescimoKm).IsUnicode(false);

                entity.Property(e => e.Semat).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.Slacobra).IsFixedLength(true);

                entity.Property(e => e.SlaforadeContrato).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.StatusSlacobra).IsUnicode(false);

                entity.Property(e => e.TipoRetornoCliente).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);

                entity.Property(e => e.Vandalismo).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingCobraSlaComparacao2MesAnterior>(entity =>
            {
                entity.ToView("vwc_Reporting_Cobra_SLA_Comparacao2MesAnterior");

                entity.Property(e => e.AnaliseAberturaOs).IsUnicode(false);

                entity.Property(e => e.AnaliseDataAgendamento).IsUnicode(false);

                entity.Property(e => e.AnaliseDataFechamento).IsUnicode(false);

                entity.Property(e => e.AnaliseDataFimSla).IsUnicode(false);

                entity.Property(e => e.AnaliseKm).IsUnicode(false);

                entity.Property(e => e.AnalisePlanilhaCobra).IsUnicode(false);

                entity.Property(e => e.AnaliseSla).IsUnicode(false);

                entity.Property(e => e.AnaliseStatusSla).IsUnicode(false);

                entity.Property(e => e.AnaliseValorManutencao).IsUnicode(false);

                entity.Property(e => e.ChamadoCancelado).IsUnicode(false);

                entity.Property(e => e.ChamadoReaberto).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Cl1015).IsUnicode(false);

                entity.Property(e => e.Contingencia).IsUnicode(false);

                entity.Property(e => e.DataAlterada).IsUnicode(false);

                entity.Property(e => e.DataFimSlaSemAgend).IsUnicode(false);

                entity.Property(e => e.DataFimSlaSemCofre).IsUnicode(false);

                entity.Property(e => e.DataFimSlaSemCopa).IsUnicode(false);

                entity.Property(e => e.DataFimSlaSemVand).IsUnicode(false);

                entity.Property(e => e.EquipamentoForadeGarantia).IsUnicode(false);

                entity.Property(e => e.IntervençãoNãoCorretiva).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.NomeArquivoPnd).IsUnicode(false);

                entity.Property(e => e.NomeArquivoRat).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.QtdHorasAcrescimoKm).IsUnicode(false);

                entity.Property(e => e.Semat).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.Slaanterior).IsUnicode(false);

                entity.Property(e => e.Slacobra).IsFixedLength(true);

                entity.Property(e => e.SlaforadeContrato).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.StatusSlacobra).IsUnicode(false);

                entity.Property(e => e.TipoRetornoCliente).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);

                entity.Property(e => e.Vandalismo).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingCobraSlaComparacao2Old>(entity =>
            {
                entity.ToView("vwc_Reporting_Cobra_SLA_Comparacao2_OLD");

                entity.Property(e => e.AnaliseAberturaOs).IsUnicode(false);

                entity.Property(e => e.AnaliseDataAgendamento).IsUnicode(false);

                entity.Property(e => e.AnaliseDataFechamento).IsUnicode(false);

                entity.Property(e => e.AnaliseDataFimSla).IsUnicode(false);

                entity.Property(e => e.AnalisePlanilhaCobra).IsUnicode(false);

                entity.Property(e => e.AnaliseStatusSla).IsUnicode(false);

                entity.Property(e => e.ChamadoCancelado).IsUnicode(false);

                entity.Property(e => e.ChamadoReaberto).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Cl1015).IsUnicode(false);

                entity.Property(e => e.Contingencia).IsUnicode(false);

                entity.Property(e => e.Criticidade).IsFixedLength(true);

                entity.Property(e => e.DataAlterada).IsUnicode(false);

                entity.Property(e => e.DataFimSlaSemAgend).IsUnicode(false);

                entity.Property(e => e.DataFimSlaSemCofre).IsUnicode(false);

                entity.Property(e => e.DataFimSlaSemCopa).IsUnicode(false);

                entity.Property(e => e.DataFimSlaSemVand).IsUnicode(false);

                entity.Property(e => e.EquipamentoForadeGarantia).IsUnicode(false);

                entity.Property(e => e.IntervençãoNãoCorretiva).IsUnicode(false);

                entity.Property(e => e.Motivo).IsUnicode(false);

                entity.Property(e => e.NomeArquivoPnd).IsUnicode(false);

                entity.Property(e => e.NomeArquivoRat).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.QtdHorasAcrescimoKm).IsUnicode(false);

                entity.Property(e => e.Semat).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.Slacobra).IsFixedLength(true);

                entity.Property(e => e.SlaforadeContrato).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.StatusSlacobra).IsUnicode(false);

                entity.Property(e => e.TipoRetornoCliente).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);

                entity.Property(e => e.Vandalismo).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingCobraSlaComparacao2ParqueResumo>(entity =>
            {
                entity.ToView("vwc_Reporting_Cobra_SLA_Comparacao2Parque_resumo");

                entity.Property(e => e.AnaliseAberturaOs).IsUnicode(false);

                entity.Property(e => e.AnaliseDataAgendamento).IsUnicode(false);

                entity.Property(e => e.AnaliseDataFechamento).IsUnicode(false);

                entity.Property(e => e.AnaliseDataFimSla).IsUnicode(false);

                entity.Property(e => e.AnaliseKm).IsUnicode(false);

                entity.Property(e => e.AnalisePlanilhaCobra).IsUnicode(false);

                entity.Property(e => e.AnaliseSla).IsUnicode(false);

                entity.Property(e => e.AnaliseStatusSla).IsUnicode(false);

                entity.Property(e => e.AnaliseValorManutencao).IsUnicode(false);

                entity.Property(e => e.ChamadoCancelado).IsUnicode(false);

                entity.Property(e => e.ChamadoReaberto).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Cl1015).IsUnicode(false);

                entity.Property(e => e.Contingencia).IsUnicode(false);

                entity.Property(e => e.DataAlterada).IsUnicode(false);

                entity.Property(e => e.DataFimSlaSemAgend).IsUnicode(false);

                entity.Property(e => e.DataFimSlaSemCofre).IsUnicode(false);

                entity.Property(e => e.DataFimSlaSemCopa).IsUnicode(false);

                entity.Property(e => e.DataFimSlaSemVand).IsUnicode(false);

                entity.Property(e => e.EquipamentoForadeGarantia).IsUnicode(false);

                entity.Property(e => e.IntervençãoNãoCorretiva).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.NomeArquivoPnd).IsUnicode(false);

                entity.Property(e => e.NomeArquivoRat).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.QtdHorasAcrescimoKm).IsUnicode(false);

                entity.Property(e => e.Semat).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.Slacobra).IsFixedLength(true);

                entity.Property(e => e.SlaforadeContrato).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.StatusSlacobra).IsUnicode(false);

                entity.Property(e => e.TipoRetornoCliente).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);

                entity.Property(e => e.Vandalismo).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingCobraSlaComparacao3>(entity =>
            {
                entity.ToView("vwc_Reporting_Cobra_SLA_Comparacao3");

                entity.Property(e => e.AnaliseAberturaOs).IsUnicode(false);

                entity.Property(e => e.AnaliseDataAgendamento).IsUnicode(false);

                entity.Property(e => e.AnaliseDataFechamento).IsUnicode(false);

                entity.Property(e => e.AnaliseDataFimSla).IsUnicode(false);

                entity.Property(e => e.AnalisePlanilhaCobra).IsUnicode(false);

                entity.Property(e => e.AnaliseStatusSla).IsUnicode(false);

                entity.Property(e => e.ChamadoCancelado).IsUnicode(false);

                entity.Property(e => e.ChamadoReaberto).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Cl1015).IsUnicode(false);

                entity.Property(e => e.Contingencia).IsUnicode(false);

                entity.Property(e => e.Criticidade).IsFixedLength(true);

                entity.Property(e => e.DataAlterada).IsUnicode(false);

                entity.Property(e => e.DataFimSlaSemAgend).IsUnicode(false);

                entity.Property(e => e.DataFimSlaSemCofre).IsUnicode(false);

                entity.Property(e => e.DataFimSlaSemCopa).IsUnicode(false);

                entity.Property(e => e.DataFimSlaSemVand).IsUnicode(false);

                entity.Property(e => e.EquipamentoForadeGarantia).IsUnicode(false);

                entity.Property(e => e.Garantia).IsUnicode(false);

                entity.Property(e => e.Intervencao).IsUnicode(false);

                entity.Property(e => e.IntervençãoNãoCorretiva).IsUnicode(false);

                entity.Property(e => e.Motivo).IsUnicode(false);

                entity.Property(e => e.NomeArquivoPnd).IsUnicode(false);

                entity.Property(e => e.NomeArquivoRat).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.QtdHorasAcrescimoKm).IsUnicode(false);

                entity.Property(e => e.Semat).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.Slacobra).IsFixedLength(true);

                entity.Property(e => e.SlaforadeContrato).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.StatusSlacobra).IsUnicode(false);

                entity.Property(e => e.TipoRetornoCliente).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);

                entity.Property(e => e.Vandalismo).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingCobraSlaComparacaoAut>(entity =>
            {
                entity.ToView("vwc_Reporting_Cobra_SLA_Comparacao_AUT");

                entity.Property(e => e.Ação).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.DataFimSlaSemCofre).IsUnicode(false);

                entity.Property(e => e.DataFimSlaSemCopa).IsUnicode(false);

                entity.Property(e => e.DataFimSlaSemVand).IsUnicode(false);

                entity.Property(e => e.Motivo).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.Slacobra).IsFixedLength(true);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.StatusSlacobra).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingCobraSlaComparacaoAutOld>(entity =>
            {
                entity.ToView("vwc_Reporting_Cobra_SLA_Comparacao_AUT_OLD");

                entity.Property(e => e.Ação).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.DataFimSlaSemCofre).IsUnicode(false);

                entity.Property(e => e.DataFimSlaSemCopa).IsUnicode(false);

                entity.Property(e => e.DataFimSlaSemVand).IsUnicode(false);

                entity.Property(e => e.Motivo).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.Slacobra).IsFixedLength(true);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.StatusSlacobra).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingCorreiosSla>(entity =>
            {
                entity.ToView("vwc_Reporting_Correios_SLA");

                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.DataAberturaOs).IsUnicode(false);

                entity.Property(e => e.DataAgendamento).IsUnicode(false);

                entity.Property(e => e.DataFechamento).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.Equipamento).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Intervencao).IsUnicode(false);

                entity.Property(e => e.Local).IsUnicode(false);

                entity.Property(e => e.Nserie).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.Pat).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);

                entity.Property(e => e.Semat).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingDigiconSla>(entity =>
            {
                entity.ToView("vwc_Reporting_Digicon_SLA");

                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.DataAberturaOs).IsUnicode(false);

                entity.Property(e => e.DataAgendamento).IsUnicode(false);

                entity.Property(e => e.DataFechamento).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.Equipamento).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Intervencao).IsUnicode(false);

                entity.Property(e => e.Local).IsUnicode(false);

                entity.Property(e => e.Nserie).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.Pat).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);

                entity.Property(e => e.Semat).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingHsbcSla>(entity =>
            {
                entity.ToView("vwc_Reporting_HSBC_SLA");

                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.DataAberturaOs).IsUnicode(false);

                entity.Property(e => e.DataAgendamento).IsUnicode(false);

                entity.Property(e => e.DataFechamento).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.Equipamento).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Intervencao).IsUnicode(false);

                entity.Property(e => e.Local).IsUnicode(false);

                entity.Property(e => e.Nserie).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.Pat).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);

                entity.Property(e => e.Semat).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingIndiceDeAtendimento>(entity =>
            {
                entity.ToView("vwc_Reporting_Indice_de_Atendimento");

                entity.Property(e => e.CodUf).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwcReportingIndiceDeAtendimento2>(entity =>
            {
                entity.ToView("vwc_Reporting_Indice_de_Atendimento2");

                entity.Property(e => e.AnoMes).IsUnicode(false);

                entity.Property(e => e.CodUf).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwcReportingIndiceDePecasPendente>(entity =>
            {
                entity.ToView("vwc_Reporting_Indice_de_Pecas_Pendentes");
            });

            modelBuilder.Entity<VwcReportingIndiceDePecasPendentesGeovane>(entity =>
            {
                entity.ToView("vwc_Reporting_Indice_de_Pecas_Pendentes_Geovane");

                entity.Property(e => e.Cpf).IsUnicode(false);

                entity.Property(e => e.NomeUsuario).IsUnicode(false);

                entity.Property(e => e.Tecnico).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingIndiceDePecasPendentesSlide>(entity =>
            {
                entity.ToView("vwc_Reporting_Indice_de_Pecas_Pendentes_Slide");
            });

            modelBuilder.Entity<VwcReportingIndiceDePecasPendentesSlideOld>(entity =>
            {
                entity.ToView("vwc_Reporting_Indice_de_Pecas_Pendentes_Slide_OLD");
            });

            modelBuilder.Entity<VwcReportingIndiceDeQuebra>(entity =>
            {
                entity.ToView("vwc_Reporting_Indice_de_Quebra");

                entity.Property(e => e.CodUf).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwcReportingIndiceDeReincidencia2>(entity =>
            {
                entity.ToView("vwc_Reporting_Indice_de_Reincidencia2");
            });

            modelBuilder.Entity<VwcReportingIndiceDeReincidenciaIndicador>(entity =>
            {
                entity.ToView("vwc_Reporting_Indice_de_Reincidencia_Indicador");
            });

            modelBuilder.Entity<VwcReportingIndiceDeReincidenciaMarco>(entity =>
            {
                entity.ToView("vwc_Reporting_Indice_de_Reincidencia_Marco");
            });

            modelBuilder.Entity<VwcReportingIndiceDeReincidenciaMesAnterior>(entity =>
            {
                entity.ToView("vwc_Reporting_Indice_de_Reincidencia_MesAnterior");
            });

            modelBuilder.Entity<VwcReportingIndiceDeReincidenciaSlide>(entity =>
            {
                entity.ToView("vwc_Reporting_Indice_de_ReincidenciaSlide");
            });

            modelBuilder.Entity<VwcReportingIndiceDeReincidenciaSlide7dia>(entity =>
            {
                entity.ToView("vwc_Reporting_Indice_de_ReincidenciaSlide_7Dias");
            });

            modelBuilder.Entity<VwcReportingIndiceDeReincidenciaSlideNew>(entity =>
            {
                entity.ToView("vwc_Reporting_Indice_de_ReincidenciaSlideNew");
            });

            modelBuilder.Entity<VwcReportingIndiceDeReincidenciaTecnico>(entity =>
            {
                entity.ToView("vwc_Reporting_Indice_de_Reincidencia_Tecnico");
            });

            modelBuilder.Entity<VwcReportingIndiceDeReincidencium>(entity =>
            {
                entity.ToView("vwc_Reporting_Indice_de_Reincidencia");
            });

            modelBuilder.Entity<VwcReportingIndiceDeSolucao>(entity =>
            {
                entity.ToView("vwc_Reporting_Indice_de_Solucao");
            });

            modelBuilder.Entity<VwcReportingOlavo>(entity =>
            {
                entity.ToView("vwc_Reporting_Olavo");

                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.ArquivoPnd).IsUnicode(false);

                entity.Property(e => e.ArquivoRat).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Cl1015).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.DataFimSlaSemVand).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.Equipamento).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Intervencao).IsUnicode(false);

                entity.Property(e => e.Local).IsUnicode(false);

                entity.Property(e => e.Nserie).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.Pat).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.QtdHorasAcrescimoKm).IsUnicode(false);

                entity.Property(e => e.Racesso).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);

                entity.Property(e => e.Rhorario).IsUnicode(false);

                entity.Property(e => e.Semat).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingParqueResumo>(entity =>
            {
                entity.ToView("vwc_Reporting_Parque_Resumo");

                entity.Property(e => e.Modelo).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingParqueResumo2>(entity =>
            {
                entity.ToView("vwc_Reporting_Parque_Resumo2");

                entity.Property(e => e.Modelo).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingParqueResumoChamadosPeriodo>(entity =>
            {
                entity.ToView("vwc_Reporting_Parque_Resumo_ChamadosPeriodo");

                entity.Property(e => e.Modelo).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingParqueResumoIten>(entity =>
            {
                entity.ToView("vwc_Reporting_Parque_Resumo_Itens");

                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.Autorizada).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.Dc).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Local).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.Serie).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingSaquePagueContrato>(entity =>
            {
                entity.ToView("vwc_Reporting_Saque_Pague_Contratos");

                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.DataAberturaOs).IsUnicode(false);

                entity.Property(e => e.DataAgendamento).IsUnicode(false);

                entity.Property(e => e.DataFechamento).IsUnicode(false);

                entity.Property(e => e.DataFiltro).IsUnicode(false);

                entity.Property(e => e.DataFimSla).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.Equipamento).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Intervencao).IsUnicode(false);

                entity.Property(e => e.Local).IsUnicode(false);

                entity.Property(e => e.MaquinaExtraMaquina).IsUnicode(false);

                entity.Property(e => e.Nserie).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.Pat).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingSicrediSla24>(entity =>
            {
                entity.ToView("vwc_Reporting_SICREDI_SLA24");

                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.DataAberturaOs).IsUnicode(false);

                entity.Property(e => e.DataAgendamento).IsUnicode(false);

                entity.Property(e => e.DataFechamento).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.Equipamento).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Intervencao).IsUnicode(false);

                entity.Property(e => e.Local).IsUnicode(false);

                entity.Property(e => e.MaquinaExtraMaquina).IsUnicode(false);

                entity.Property(e => e.Nserie).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.Pat).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Semat).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.TempoAtendimento).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingSicrediSla48>(entity =>
            {
                entity.ToView("vwc_Reporting_SICREDI_SLA48");

                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.DataAberturaOs).IsUnicode(false);

                entity.Property(e => e.DataAgendamento).IsUnicode(false);

                entity.Property(e => e.DataFechamento).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.Equipamento).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Intervencao).IsUnicode(false);

                entity.Property(e => e.Local).IsUnicode(false);

                entity.Property(e => e.MaquinaExtraMaquina).IsUnicode(false);

                entity.Property(e => e.Nserie).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.Pat).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Semat).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.TempoAtendimento).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingSicrediSla72>(entity =>
            {
                entity.ToView("vwc_Reporting_SICREDI_SLA72");

                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.DataAberturaOs).IsUnicode(false);

                entity.Property(e => e.DataAgendamento).IsUnicode(false);

                entity.Property(e => e.DataFechamento).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.Equipamento).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Intervencao).IsUnicode(false);

                entity.Property(e => e.Local).IsUnicode(false);

                entity.Property(e => e.MaquinaExtraMaquina).IsUnicode(false);

                entity.Property(e => e.Nserie).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.Pat).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Semat).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.TempoAtendimento).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingSicrediSlaNãoUsado>(entity =>
            {
                entity.ToView("vwc_Reporting_SICREDI_SLA_Não usado");

                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.DataAberturaOs).IsUnicode(false);

                entity.Property(e => e.DataAgendamento).IsUnicode(false);

                entity.Property(e => e.DataFechamento).IsUnicode(false);

                entity.Property(e => e.DataFiltro).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.Equipamento).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Intervencao).IsUnicode(false);

                entity.Property(e => e.Local).IsUnicode(false);

                entity.Property(e => e.Nserie).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.Pat).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Semat).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.TempoAtendimento).IsUnicode(false);

                entity.Property(e => e.TipoContrato).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingSilmara>(entity =>
            {
                entity.ToView("vwc_Reporting_Silmara");

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.DescNumSerieNi).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NomTipoIntervencao).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.NomeAcao).IsUnicode(false);

                entity.Property(e => e.NomeCausa).IsUnicode(false);

                entity.Property(e => e.NomeDefeito).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeEquipSns).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFantasiaCliente).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);

                entity.Property(e => e.NomeRegiao).IsUnicode(false);

                entity.Property(e => e.NomeServico).IsUnicode(false);

                entity.Property(e => e.NomeSla).IsUnicode(false);

                entity.Property(e => e.NomeStatusServico).IsUnicode(false);

                entity.Property(e => e.NomeTipoCausa).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumBanco).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumOsquarteirizada).IsUnicode(false);

                entity.Property(e => e.NumRat).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.ObsRat).IsUnicode(false);

                entity.Property(e => e.Observ).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Rg).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.StatusRat).IsUnicode(false);

                entity.Property(e => e.TecnicoOs).IsUnicode(false);

                entity.Property(e => e.TecnicoRat).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingSla17Bancoob>(entity =>
            {
                entity.ToView("vwc_Reporting_SLA17_BANCOOB");

                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.DataAberturaOs).IsUnicode(false);

                entity.Property(e => e.DataAgendamento).IsUnicode(false);

                entity.Property(e => e.DataFechamento).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.Equipamento).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Intervencao).IsUnicode(false);

                entity.Property(e => e.Local).IsUnicode(false);

                entity.Property(e => e.Nserie).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.Pat).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);

                entity.Property(e => e.Semat).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingSla17Dicico>(entity =>
            {
                entity.ToView("vwc_Reporting_SLA17_DICICO");

                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.DataAberturaOs).IsUnicode(false);

                entity.Property(e => e.DataAgendamento).IsUnicode(false);

                entity.Property(e => e.DataFechamento).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.Equipamento).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Intervencao).IsUnicode(false);

                entity.Property(e => e.Local).IsUnicode(false);

                entity.Property(e => e.Nserie).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.Pat).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);

                entity.Property(e => e.Semat).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingSla17Hering>(entity =>
            {
                entity.ToView("vwc_Reporting_SLA17_HERING");

                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.DataAberturaOs).IsUnicode(false);

                entity.Property(e => e.DataAgendamento).IsUnicode(false);

                entity.Property(e => e.DataFechamento).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.Equipamento).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Intervencao).IsUnicode(false);

                entity.Property(e => e.Local).IsUnicode(false);

                entity.Property(e => e.Nserie).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.Pat).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);

                entity.Property(e => e.Semat).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcReportingSla17Tendtudo>(entity =>
            {
                entity.ToView("vwc_Reporting_SLA17_TENDTUDO");

                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.DataAberturaOs).IsUnicode(false);

                entity.Property(e => e.DataAgendamento).IsUnicode(false);

                entity.Property(e => e.DataFechamento).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.Equipamento).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Intervencao).IsUnicode(false);

                entity.Property(e => e.Local).IsUnicode(false);

                entity.Property(e => e.Nserie).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.Pat).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);

                entity.Property(e => e.Semat).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRoboGoogleBuscaEnderecosAleatorio>(entity =>
            {
                entity.ToView("vwc_RoboGoogleBuscaEnderecosAleatorio");

                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.Latitude).IsUnicode(false);

                entity.Property(e => e.Longitude).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcRoboGoogleBuscaEnderecosSemCoordenada>(entity =>
            {
                entity.ToView("vwc_RoboGoogleBuscaEnderecosSemCoordenadas");

                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.Latitude).IsUnicode(false);

                entity.Property(e => e.Longitude).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcSatMobileAppVersao>(entity =>
            {
                entity.ToView("vwc_SatMobileAppVersao");

                entity.Property(e => e.NomeFilial).IsUnicode(false);
            });

            modelBuilder.Entity<VwcSilmara>(entity =>
            {
                entity.ToView("vwc_Silmara");

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.DescNumSerieNi).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NomTipoIntervencao).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.NomeAcao).IsUnicode(false);

                entity.Property(e => e.NomeCausa).IsUnicode(false);

                entity.Property(e => e.NomeDefeito).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeEquipSns).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFantasiaCliente).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);

                entity.Property(e => e.NomeRegiao).IsUnicode(false);

                entity.Property(e => e.NomeServico).IsUnicode(false);

                entity.Property(e => e.NomeSla).IsUnicode(false);

                entity.Property(e => e.NomeStatusServico).IsUnicode(false);

                entity.Property(e => e.NomeTipoCausa).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumBanco).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumOsquarteirizada).IsUnicode(false);

                entity.Property(e => e.NumRat).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.ObsRat).IsUnicode(false);

                entity.Property(e => e.Observ).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Rg).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.StatusRat).IsUnicode(false);

                entity.Property(e => e.TecnicoOs).IsUnicode(false);

                entity.Property(e => e.TecnicoRat).IsUnicode(false);
            });

            modelBuilder.Entity<VwcSilmaraErro>(entity =>
            {
                entity.ToView("vwc_SilmaraErro");

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.CodEacao).IsUnicode(false);

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.DescNumSerieNi).IsUnicode(false);

                entity.Property(e => e.DiaAbertura).IsUnicode(false);

                entity.Property(e => e.MesAbertura).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NomTipoIntervencao).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.NomeAcao).IsUnicode(false);

                entity.Property(e => e.NomeCausa).IsUnicode(false);

                entity.Property(e => e.NomeContrato).IsUnicode(false);

                entity.Property(e => e.NomeDefeito).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeEquipSns).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFantasiaCliente).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);

                entity.Property(e => e.NomeRegiao).IsUnicode(false);

                entity.Property(e => e.NomeServico).IsUnicode(false);

                entity.Property(e => e.NomeSla).IsUnicode(false);

                entity.Property(e => e.NomeStatusServico).IsUnicode(false);

                entity.Property(e => e.NomeTipoCausa).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumBanco).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumOsquarteirizada).IsUnicode(false);

                entity.Property(e => e.NumRat).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.ObsRat).IsUnicode(false);

                entity.Property(e => e.Observ).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.Racesso).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Rg).IsUnicode(false);

                entity.Property(e => e.Rhorario).IsUnicode(false);

                entity.Property(e => e.Semat).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.StatusRat).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.TecnicoOs).IsUnicode(false);

                entity.Property(e => e.TecnicoRat).IsUnicode(false);
            });

            modelBuilder.Entity<VwcSimCardLivre>(entity =>
            {
                entity.ToView("vwc_SimCardLivre");

                entity.Property(e => e.CodSimCard).ValueGeneratedOnAdd();

                entity.Property(e => e.SimCardNumber).IsUnicode(false);

                entity.Property(e => e.TrackerId).IsUnicode(false);
            });

            modelBuilder.Entity<VwcSla>(entity =>
            {
                entity.ToView("vwc_sla");

                entity.Property(e => e.StatusSla).IsUnicode(false);
            });

            modelBuilder.Entity<VwcSla1>(entity =>
            {
                entity.ToView("vwc_SLA_1");

                entity.Property(e => e.Maior5Dias).IsUnicode(false);

                entity.Property(e => e.Pa).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);
            });

            modelBuilder.Entity<VwcSla2>(entity =>
            {
                entity.ToView("vwc_SLA_2");

                entity.Property(e => e.Maior5Dias).IsUnicode(false);

                entity.Property(e => e.Pa).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);
            });

            modelBuilder.Entity<VwcSla3>(entity =>
            {
                entity.ToView("vwc_SLA_3");

                entity.Property(e => e.DescricaoAtraso).IsUnicode(false);

                entity.Property(e => e.Maior5Dias).IsUnicode(false);

                entity.Property(e => e.Pa).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);
            });

            modelBuilder.Entity<VwcSlaCefMesAnterior>(entity =>
            {
                entity.ToView("VWC_SLA_CEF_Mes_Anterior");

                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.DataAberturaOs).IsUnicode(false);

                entity.Property(e => e.DataAgendamento).IsUnicode(false);

                entity.Property(e => e.DataFechamento).IsUnicode(false);

                entity.Property(e => e.DataFimSla).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.Equipamento).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Intervencao).IsUnicode(false);

                entity.Property(e => e.Local).IsUnicode(false);

                entity.Property(e => e.Nserie).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.Pat).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcSlaCefMêsAnterior>(entity =>
            {
                entity.ToView("VWC_SLA CEF Mês Anterior");

                entity.Property(e => e.Agencia).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.DataAberturaOs).IsUnicode(false);

                entity.Property(e => e.DataAgendamento).IsUnicode(false);

                entity.Property(e => e.DataFechamento).IsUnicode(false);

                entity.Property(e => e.DataFimSla).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.Equipamento).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.Intervencao).IsUnicode(false);

                entity.Property(e => e.Local).IsUnicode(false);

                entity.Property(e => e.Nserie).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.Observacao).IsUnicode(false);

                entity.Property(e => e.Pat).IsUnicode(false);

                entity.Property(e => e.Regiao).IsUnicode(false);

                entity.Property(e => e.Sla).IsUnicode(false);

                entity.Property(e => e.StatusOs).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.Uf).IsUnicode(false);
            });

            modelBuilder.Entity<VwcSqlMaribelStn>(entity =>
            {
                entity.ToView("vwc_sqlMaribel_STN");

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.DemandaEmEspera).IsUnicode(false);

                entity.Property(e => e.DescOrigemChamadoStn).IsUnicode(false);

                entity.Property(e => e.DescStatusServicoStn).IsUnicode(false);

                entity.Property(e => e.Diagnostico).IsUnicode(false);

                entity.Property(e => e.EvitouPendência).IsUnicode(false);

                entity.Property(e => e.Filial).IsUnicode(false);

                entity.Property(e => e.LocalDoAtendimento).IsUnicode(false);

                entity.Property(e => e.Manual).IsUnicode(false);

                entity.Property(e => e.NetbookFerramenta).IsUnicode(false);

                entity.Property(e => e.NomeSolicitante).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.ObsSistema).IsUnicode(false);

                entity.Property(e => e.OrientaçãoDoSuporte).IsUnicode(false);

                entity.Property(e => e.PrimeiroContato).IsUnicode(false);

                entity.Property(e => e.Produto).IsUnicode(false);

                entity.Property(e => e.RazaoSocial).IsUnicode(false);

                entity.Property(e => e.RelatoTécnico).IsUnicode(false);

                entity.Property(e => e.ResponsávelOsStn).IsUnicode(false);

                entity.Property(e => e.SuporteTratativa).IsUnicode(false);

                entity.Property(e => e.TipoDeChamadoTratativa).IsUnicode(false);

                entity.Property(e => e.Treinamento).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTarefa>(entity =>
            {
                entity.ToView("vwc_Tarefas");

                entity.Property(e => e.Código).ValueGeneratedOnAdd();

                entity.Property(e => e.Descrição).IsUnicode(false);

                entity.Property(e => e.Solicitante).IsUnicode(false);

                entity.Property(e => e.Solução).IsUnicode(false);

                entity.Property(e => e.Título).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTarefasCristiano>(entity =>
            {
                entity.ToView("vwc_tarefasCristiano");

                entity.Property(e => e.Descricao).IsUnicode(false);

                entity.Property(e => e.Solicitante).IsUnicode(false);

                entity.Property(e => e.Titulo).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTecnico>(entity =>
            {
                entity.ToView("vwc_tecnico");

                entity.Property(e => e.Apelido).IsUnicode(false);

                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.BairroCoordenadas).IsUnicode(false);

                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.CidadeCoordenadas).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.Cpf).IsUnicode(false);

                entity.Property(e => e.Cpfformatado).IsUnicode(false);

                entity.Property(e => e.CpfformatadoLogix).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.EnderecoComplemento).IsUnicode(false);

                entity.Property(e => e.EnderecoCoordenadas).IsUnicode(false);

                entity.Property(e => e.Fone).IsUnicode(false);

                entity.Property(e => e.FoneParticular).IsUnicode(false);

                entity.Property(e => e.FonePerto).IsUnicode(false);

                entity.Property(e => e.Latitude).IsUnicode(false);

                entity.Property(e => e.Longitude).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.NumCrea).IsUnicode(false);

                entity.Property(e => e.PaisCoordenadas).IsUnicode(false);

                entity.Property(e => e.Rg).IsUnicode(false);

                entity.Property(e => e.SimCardMobile).IsUnicode(false);

                entity.Property(e => e.TrackerId).IsUnicode(false);

                entity.Property(e => e.Ufcoordenadas).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTecnicoComDetalhe>(entity =>
            {
                entity.ToView("vwc_TecnicoComDetalhes");

                entity.Property(e => e.Apelido).IsUnicode(false);

                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.Cpf).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.EnderecoComplemento).IsUnicode(false);

                entity.Property(e => e.Fone).IsUnicode(false);

                entity.Property(e => e.FoneParticular).IsUnicode(false);

                entity.Property(e => e.FonePerto).IsUnicode(false);

                entity.Property(e => e.IndAtivo).IsUnicode(false);

                entity.Property(e => e.IndFerias).IsUnicode(false);

                entity.Property(e => e.IndTecnicoBancada).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.NomeCidade).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomePais).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumBanco).IsUnicode(false);

                entity.Property(e => e.NumConta).IsUnicode(false);

                entity.Property(e => e.NumCrea).IsUnicode(false);

                entity.Property(e => e.Placa).IsUnicode(false);

                entity.Property(e => e.Rg).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.SimCardMobile).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTecnicoMediaAtend>(entity =>
            {
                entity.ToView("vwc_TecnicoMediaAtend");
            });

            modelBuilder.Entity<VwcTecnicoReincidencia2>(entity =>
            {
                entity.ToView("vwc_TecnicoReincidencia2");

                entity.Property(e => e.Lote).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTecnicoReincidenciaNew>(entity =>
            {
                entity.ToView("vwc_TecnicoReincidenciaNew");

                entity.Property(e => e.Lote).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTecnicoReincidenciaTeste>(entity =>
            {
                entity.ToView("vwc_TecnicoReincidencia_Teste");

                entity.Property(e => e.Lote).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTecnicoReincidenciaTeste1>(entity =>
            {
                entity.ToView("vwc_TecnicoReincidenciaTeste");

                entity.Property(e => e.Lote).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTecnicoReincidencium>(entity =>
            {
                entity.ToView("vwc_TecnicoReincidencia");

                entity.Property(e => e.Lote).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTecnicosDisponibilidade>(entity =>
            {
                entity.ToView("vwc_TecnicosDisponibilidades");
            });

            modelBuilder.Entity<VwcTecnicosSat>(entity =>
            {
                entity.ToView("vwc_TecnicosSAT");

                entity.Property(e => e.Apelido).IsUnicode(false);

                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.BairroCoordenadas).IsUnicode(false);

                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.CidadeCoordenadas).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.Cpf).IsUnicode(false);

                entity.Property(e => e.Cpfformatado).IsUnicode(false);

                entity.Property(e => e.CpfformatadoLogix).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.EnderecoComplemento).IsUnicode(false);

                entity.Property(e => e.EnderecoCoordenadas).IsUnicode(false);

                entity.Property(e => e.Fone).IsUnicode(false);

                entity.Property(e => e.FoneParticular).IsUnicode(false);

                entity.Property(e => e.FonePerto).IsUnicode(false);

                entity.Property(e => e.Latitude).IsUnicode(false);

                entity.Property(e => e.Longitude).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NumCrea).IsUnicode(false);

                entity.Property(e => e.PaisCoordenadas).IsUnicode(false);

                entity.Property(e => e.Rg).IsUnicode(false);

                entity.Property(e => e.SimCardMobile).IsUnicode(false);

                entity.Property(e => e.TrackerId).IsUnicode(false);

                entity.Property(e => e.Ufcoordenadas).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTeste>(entity =>
            {
                entity.ToView("vwc_teste");

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.DefeitoRelatado).IsUnicode(false);

                entity.Property(e => e.DescNumSerieNi).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NomTipoIntervencao).IsUnicode(false);

                entity.Property(e => e.NomeContrato).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeEquipSns).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFantasiaCliente).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NomeRegiao).IsUnicode(false);

                entity.Property(e => e.NomeSla).IsUnicode(false);

                entity.Property(e => e.NomeStatusServico).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumBanco).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumOsquarteirizada).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.Observ).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.Rat).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTipoCausaEstrutura>(entity =>
            {
                entity.ToView("vwc_TipoCausa_Estrutura");

                entity.Property(e => e.CodCausaPerson).IsUnicode(false);

                entity.Property(e => e.CodEcausa).IsUnicode(false);

                entity.Property(e => e.CodEgrupoCausa).IsUnicode(false);

                entity.Property(e => e.CodEtipoCausa).IsUnicode(false);

                entity.Property(e => e.NomeCausa).IsUnicode(false);

                entity.Property(e => e.NomeGrupoCausa).IsUnicode(false);

                entity.Property(e => e.NomeTipoCausa).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramento22>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_22");

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramento23>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_23");

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramento25>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_25");

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramento26>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_26");

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramento27>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_27");

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramento28>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_28");

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramento29>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_29");

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramento30>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_30");

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramento31>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_31");

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramento33>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_33");

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramento34>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_34");

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramento35>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_35");

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramento36>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_36");

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramento37>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_37");

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramento38>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_38");

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramento39>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_39");

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramento40>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_40");

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramento41>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_41");

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramento42>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_42");

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramento43>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_43");

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramento44>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_44");

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramento45>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_45");

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramentoCaminho22>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_Caminho_22");

                entity.Property(e => e.Caminho).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramentoCaminho23>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_Caminho_23");

                entity.Property(e => e.Caminho).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramentoCaminho25>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_Caminho_25");

                entity.Property(e => e.Caminho).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramentoCaminho26>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_Caminho_26");

                entity.Property(e => e.Caminho).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramentoCaminho27>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_Caminho_27");

                entity.Property(e => e.Caminho).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramentoCaminho28>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_Caminho_28");

                entity.Property(e => e.Caminho).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramentoCaminho29>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_Caminho_29");

                entity.Property(e => e.Caminho).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramentoCaminho30>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_Caminho_30");

                entity.Property(e => e.Caminho).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramentoCaminho31>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_Caminho_31");

                entity.Property(e => e.Caminho).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramentoCaminho33>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_Caminho_33");

                entity.Property(e => e.Caminho).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramentoCaminho34>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_Caminho_34");

                entity.Property(e => e.Caminho).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramentoCaminho35>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_Caminho_35");

                entity.Property(e => e.Caminho).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramentoCaminho36>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_Caminho_36");

                entity.Property(e => e.Caminho).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramentoCaminho37>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_Caminho_37");

                entity.Property(e => e.Caminho).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramentoCaminho38>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_Caminho_38");

                entity.Property(e => e.Caminho).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramentoCaminho39>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_Caminho_39");

                entity.Property(e => e.Caminho).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramentoCaminho40>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_Caminho_40");

                entity.Property(e => e.Caminho).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramentoCaminho41>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_Caminho_41");

                entity.Property(e => e.Caminho).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramentoCaminho42>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_Caminho_42");

                entity.Property(e => e.Caminho).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramentoCaminho43>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_Caminho_43");

                entity.Property(e => e.Caminho).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramentoCaminho44>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_Caminho_44");

                entity.Property(e => e.Caminho).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTmpMonitoramentoCaminho45>(entity =>
            {
                entity.ToView("vwc_tmpMonitoramento_Caminho_45");

                entity.Property(e => e.Caminho).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaBancoob>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_BANCOOB");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaBancoobFilial>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_BANCOOB_Filial");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaBanestesFilial>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_BANESTES_Filial");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaBanrisul>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_Banrisul");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaBanrisulFilial>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_Banrisul_Filial");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaBasa>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_BASA");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaBasaFilial>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_BASA_Filial");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaBb>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_BB");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaBbFilial>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_BB_Filial");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaBbd>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_BBD");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaBbdFilial>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_BBD_Filial");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaBnb>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_BNB");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaBnbFilial>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_BNB_Filial");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaBrb>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_BRB");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaBrbFilial>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_BRB_Filial");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaBrinksFilial>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_BRINKS_Filial");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaBrmallsFilial>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_BRMALLS_Filial");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaCef>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_CEF");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaCefFilial>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_CEF_Filial");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaCobra>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_COBRA");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaCobraFilial>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_COBRA_Filial");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaCorreio>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_Correios");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaCorreiosFilial>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_Correios_Filial");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaDdtotalFilial>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_DDTOTAL_Filial");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaDicico>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_DICICO");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaDicicoFilial>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_DICICO_Filial");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaDigicon>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_DIGICON");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaDigiconFilial>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_DIGICON_Filial");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaGideFilial>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_GIDE_Filial");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaHering>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_HERING");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaHeringFilial>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_HERING_Filial");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaHsbcFilial>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_HSBC_Filial");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaMetrorioFilial>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_METRORIO_Filial");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaMetrospFilial>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_METROSP_Filial");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaMultiplanFilial>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_MULTIPLAN_Filial");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaNeposFilial>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_NEPOS_Filial");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaProsegurFilial>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_PROSEGUR_Filial");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaRiachueloFilial>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_RIACHUELO_Filial");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaRiocardFilial>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_RIOCARD_Filial");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaSetranspFilial>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_SETRANSP_Filial");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaSicredi>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_SICREDI");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaSicrediFilial>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_SICREDI_Filial");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaStvFilial>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_STV_Filial");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaTendtudo>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_TENDTUDO");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaTendtudoFilial>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_TENDTUDO_Filial");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaVarejoFilial>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_VAREJO_Filial");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaWpsFilial>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_WPS_Filial");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTotalSlaZaffariFilial>(entity =>
            {
                entity.ToView("vwc_TOTAL_SLA_ZAFFARI_Filial");

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwcTrocaSubstituicaoPeca>(entity =>
            {
                entity.ToView("vwc_TrocaSubstituicaoPecas");

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.Dcposto).IsUnicode(false);

                entity.Property(e => e.Defeito).IsUnicode(false);

                entity.Property(e => e.DescNumSerieNi).IsUnicode(false);

                entity.Property(e => e.MotivoCancelamento).IsUnicode(false);

                entity.Property(e => e.NomTipoIntervencao).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.NomeAcao).IsUnicode(false);

                entity.Property(e => e.NomeCausa).IsUnicode(false);

                entity.Property(e => e.NomeContrato).IsUnicode(false);

                entity.Property(e => e.NomeDefeito).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NomeEquipSns).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);

                entity.Property(e => e.NomeFantasiaCliente).IsUnicode(false);

                entity.Property(e => e.NomeFilial).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);

                entity.Property(e => e.NomeRegiao).IsUnicode(false);

                entity.Property(e => e.NomeServico).IsUnicode(false);

                entity.Property(e => e.NomeSla).IsUnicode(false);

                entity.Property(e => e.NomeStatusServico).IsUnicode(false);

                entity.Property(e => e.NomeTipoCausa).IsUnicode(false);

                entity.Property(e => e.NumAgencia).IsUnicode(false);

                entity.Property(e => e.NumBanco).IsUnicode(false);

                entity.Property(e => e.NumOscliente).IsUnicode(false);

                entity.Property(e => e.NumOsquarteirizada).IsUnicode(false);

                entity.Property(e => e.NumRat).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.Observ).IsUnicode(false);

                entity.Property(e => e.PontoEstrategico).IsUnicode(false);

                entity.Property(e => e.Relato).IsUnicode(false);

                entity.Property(e => e.RelatoSolucao).IsUnicode(false);

                entity.Property(e => e.Rg).IsUnicode(false);

                entity.Property(e => e.SiglaUf).IsUnicode(false);

                entity.Property(e => e.StatusRat).IsUnicode(false);

                entity.Property(e => e.StatusSla).IsUnicode(false);

                entity.Property(e => e.TecnicoOs).IsUnicode(false);

                entity.Property(e => e.TecnicoRat).IsUnicode(false);
            });

            modelBuilder.Entity<VwcUsuarioAtivo>(entity =>
            {
                entity.ToView("vwc_usuario_ativo");

                entity.Property(e => e.Bairro).IsUnicode(false);

                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.CodContrato).IsUnicode(false);

                entity.Property(e => e.CodRelatorioNaoMostrado).IsUnicode(false);

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.Complemento).IsUnicode(false);

                entity.Property(e => e.Cpf).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Endereco).IsUnicode(false);

                entity.Property(e => e.Fax).IsUnicode(false);

                entity.Property(e => e.Fone).IsUnicode(false);

                entity.Property(e => e.InstalPerfilPagina).IsUnicode(false);

                entity.Property(e => e.NomeUsuario).IsUnicode(false);

                entity.Property(e => e.NumCracha).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.Ramal).IsUnicode(false);
            });

            modelBuilder.Entity<VwcVwcEquipamentosPo>(entity =>
            {
                entity.ToView("vwc_vwc_EquipamentosPOS");

                entity.Property(e => e.Cnpj).IsUnicode(false);

                entity.Property(e => e.NomeEquip).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);
            });

            modelBuilder.Entity<VwmRelDefeitoPos2>(entity =>
            {
                entity.ToView("vwm_RelDefeitoPOS_2");
            });

            modelBuilder.Entity<VwmRelDefeitoPos2Veloh3>(entity =>
            {
                entity.ToView("vwm_RelDefeitoPOS_2_Veloh_3");
            });

            modelBuilder.Entity<VwmRelDefeitoPos2VelohC>(entity =>
            {
                entity.ToView("vwm_RelDefeitoPOS_2_Veloh_C");
            });

            modelBuilder.Entity<VwmRelDefeitoPos2VelohW>(entity =>
            {
                entity.ToView("vwm_RelDefeitoPOS_2_Veloh_W");
            });

            modelBuilder.Entity<VwmRelDefeitoPos3>(entity =>
            {
                entity.ToView("vwm_RelDefeitoPOS_3");

                entity.Property(e => e.NomeDefeito).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.NumSerieRetirado).IsUnicode(false);
            });

            modelBuilder.Entity<VwmRelDefeitoPos3Help>(entity =>
            {
                entity.ToView("vwm_RelDefeitoPOS_3_Help");

                entity.Property(e => e.NomeDefeito).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.NumSerieRetirado).IsUnicode(false);
            });

            modelBuilder.Entity<VwmRelDefeitoPos3Help60>(entity =>
            {
                entity.ToView("vwm_RelDefeitoPOS_3_Help_60");

                entity.Property(e => e.NomeDefeito).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.NumSerieRetirado).IsUnicode(false);
            });

            modelBuilder.Entity<VwmRelDefeitoPos3HelpRelVolnei>(entity =>
            {
                entity.ToView("vwm_RelDefeitoPOS_3_Help_RelVolnei");

                entity.Property(e => e.NomeDefeito).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.NumSerieRetirado).IsUnicode(false);
            });

            modelBuilder.Entity<VwmRelDefeitoPos3Veloh3>(entity =>
            {
                entity.ToView("vwm_RelDefeitoPOS_3_Veloh_3");

                entity.Property(e => e.NomeDefeito).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.NumSerieRetirado).IsUnicode(false);
            });

            modelBuilder.Entity<VwmRelDefeitoPos3Veloh3Help>(entity =>
            {
                entity.ToView("vwm_RelDefeitoPOS_3_Veloh_3_Help");

                entity.Property(e => e.NomeDefeito).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.NumSerieRetirado).IsUnicode(false);
            });

            modelBuilder.Entity<VwmRelDefeitoPos3Veloh3Help60>(entity =>
            {
                entity.ToView("vwm_RelDefeitoPOS_3_Veloh_3_Help_60");

                entity.Property(e => e.NomeDefeito).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.NumSerieRetirado).IsUnicode(false);
            });

            modelBuilder.Entity<VwmRelDefeitoPos3VelohC>(entity =>
            {
                entity.ToView("vwm_RelDefeitoPOS_3_Veloh_C");

                entity.Property(e => e.NomeDefeito).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.NumSerieRetirado).IsUnicode(false);
            });

            modelBuilder.Entity<VwmRelDefeitoPos3VelohCHelp>(entity =>
            {
                entity.ToView("vwm_RelDefeitoPOS_3_Veloh_C_Help");

                entity.Property(e => e.NomeDefeito).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.NumSerieRetirado).IsUnicode(false);
            });

            modelBuilder.Entity<VwmRelDefeitoPos3VelohCHelp60>(entity =>
            {
                entity.ToView("vwm_RelDefeitoPOS_3_Veloh_C_Help_60");

                entity.Property(e => e.NomeDefeito).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.NumSerieRetirado).IsUnicode(false);
            });

            modelBuilder.Entity<VwmRelDefeitoPos3VelohW>(entity =>
            {
                entity.ToView("vwm_RelDefeitoPOS_3_Veloh_W");

                entity.Property(e => e.NomeDefeito).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.NumSerieRetirado).IsUnicode(false);
            });

            modelBuilder.Entity<VwmRelDefeitoPos3VelohWHelp>(entity =>
            {
                entity.ToView("vwm_RelDefeitoPOS_3_Veloh_W_Help");

                entity.Property(e => e.NomeDefeito).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.NumSerieRetirado).IsUnicode(false);
            });

            modelBuilder.Entity<VwmRelDefeitoPos3VelohWHelp60>(entity =>
            {
                entity.ToView("vwm_RelDefeitoPOS_3_Veloh_W_Help_60");

                entity.Property(e => e.NomeDefeito).IsUnicode(false);

                entity.Property(e => e.NomeLocal).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.NumSerieRetirado).IsUnicode(false);
            });

            modelBuilder.Entity<VwmRelDefeitoPos4>(entity =>
            {
                entity.ToView("vwm_RelDefeitoPOS_4");
            });

            modelBuilder.Entity<VwmRelDefeitoPos4RelVolnei>(entity =>
            {
                entity.ToView("vwm_RelDefeitoPOS_4_RelVolnei");
            });

            modelBuilder.Entity<VwmRelDefeitoPos4Veloh3>(entity =>
            {
                entity.ToView("vwm_RelDefeitoPOS_4_Veloh_3");
            });

            modelBuilder.Entity<VwmRelDefeitoPos4VelohC>(entity =>
            {
                entity.ToView("vwm_RelDefeitoPOS_4_Veloh_C");
            });

            modelBuilder.Entity<VwmRelDefeitoPos4VelohW>(entity =>
            {
                entity.ToView("vwm_RelDefeitoPOS_4_Veloh_W");
            });

            modelBuilder.Entity<VwmRelDefeitoPosRelVolnei>(entity =>
            {
                entity.ToView("vwm_RelDefeitoPOS_RelVolnei");
            });

            modelBuilder.Entity<VwtAcao>(entity =>
            {
                entity.ToView("vwt_Acao");

                entity.Property(e => e.CodEacao).IsUnicode(false);

                entity.Property(e => e.Culture).IsUnicode(false);

                entity.Property(e => e.NomeAcao).IsUnicode(false);
            });

            modelBuilder.Entity<VwtCausaTipoCausa>(entity =>
            {
                entity.ToView("vwt_CausaTipoCausa");

                entity.Property(e => e.CodEcausa).IsUnicode(false);

                entity.Property(e => e.CodEtipoCausa).IsUnicode(false);

                entity.Property(e => e.Culture).IsUnicode(false);

                entity.Property(e => e.NomeCausa).IsUnicode(false);
            });

            modelBuilder.Entity<VwtDefeito>(entity =>
            {
                entity.ToView("vwt_Defeito");

                entity.Property(e => e.CodEdefeito).IsUnicode(false);

                entity.Property(e => e.Culture).IsUnicode(false);

                entity.Property(e => e.NomeDefeito).IsUnicode(false);
            });

            modelBuilder.Entity<VwtMenu>(entity =>
            {
                entity.ToView("vwt_Menu");

                entity.Property(e => e.CodUsuarioCad).IsUnicode(false);

                entity.Property(e => e.CodUsuarioManut).IsUnicode(false);

                entity.Property(e => e.Culture).IsUnicode(false);

                entity.Property(e => e.Funcao).IsUnicode(false);

                entity.Property(e => e.NomeMenu).IsUnicode(false);
            });

            modelBuilder.Entity<VwtMotivoAgendamento>(entity =>
            {
                entity.ToView("vwt_MotivoAgendamento");

                entity.Property(e => e.Culture).IsUnicode(false);

                entity.Property(e => e.DescricaoMotivo).IsUnicode(false);
            });

            modelBuilder.Entity<VwtPeca>(entity =>
            {
                entity.ToView("vwt_Peca");

                entity.Property(e => e.CodMagnus).IsUnicode(false);

                entity.Property(e => e.Culture).IsUnicode(false);

                entity.Property(e => e.NomePeca).IsUnicode(false);
            });

            modelBuilder.Entity<VwtPecaStatus>(entity =>
            {
                entity.ToView("vwt_PecaStatus");

                entity.Property(e => e.Culture).IsUnicode(false);

                entity.Property(e => e.MsgStatus).IsUnicode(false);

                entity.Property(e => e.NomeStatus).IsUnicode(false);

                entity.Property(e => e.SiglaStatus).IsUnicode(false);
            });

            modelBuilder.Entity<VwtPedidoPecaStatus>(entity =>
            {
                entity.ToView("vwt_PedidoPecaStatus");

                entity.Property(e => e.Culture).IsUnicode(false);

                entity.Property(e => e.NomeStatus).IsUnicode(false);

                entity.Property(e => e.SiglaStatus).IsUnicode(false);
            });

            modelBuilder.Entity<VwtPedidoStatus>(entity =>
            {
                entity.ToView("vwt_PedidoStatus");

                entity.Property(e => e.Culture).IsUnicode(false);

                entity.Property(e => e.NomeStatus).IsUnicode(false);
            });

            modelBuilder.Entity<VwtStatusServico>(entity =>
            {
                entity.ToView("vwt_StatusServico");

                entity.Property(e => e.Culture).IsUnicode(false);

                entity.Property(e => e.NomeStatusServico).IsUnicode(false);
            });

            modelBuilder.Entity<VwtTipoCausa>(entity =>
            {
                entity.ToView("vwt_TipoCausa");

                entity.Property(e => e.CodEtipoCausa).IsUnicode(false);

                entity.Property(e => e.Culture).IsUnicode(false);

                entity.Property(e => e.NomeTipoCausa).IsUnicode(false);
            });

            modelBuilder.Entity<VwtTipoIntervencao>(entity =>
            {
                entity.ToView("vwt_TipoIntervencao");

                entity.Property(e => e.Culture).IsUnicode(false);

                entity.Property(e => e.NomTipoIntervencao).IsUnicode(false);
            });

            modelBuilder.Entity<VwtTipoServico>(entity =>
            {
                entity.ToView("vwt_TipoServico");

                entity.Property(e => e.CodEtipoServico).IsUnicode(false);

                entity.Property(e => e.Culture).IsUnicode(false);

                entity.Property(e => e.NomeServico).IsUnicode(false);
            });

            modelBuilder.Entity<VwvEMailsReincidencium1>(entity =>
            {
                entity.ToView("Vwv_E-mails_Reincidencia");

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            modelBuilder.Entity<VwvEmailsReincidencium>(entity =>
            {
                entity.ToView("Vwv_Emails_Reincidencia");

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.NomeFantasia).IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
